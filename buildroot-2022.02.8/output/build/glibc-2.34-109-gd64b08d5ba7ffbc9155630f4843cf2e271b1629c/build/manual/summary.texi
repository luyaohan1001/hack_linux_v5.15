@c DO NOT EDIT THIS FILE!
@c This file is generated by summary.pl from the Texinfo sources.
@c The @items are @include'd from a @table in header.texi.

@comment ACCOUNTING
@item ACCOUNTING

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@comment AF_FILE
@item AF_FILE

@file{sys/socket.h} (GNU):  @ref{Address Formats}.

@comment AF_INET
@item AF_INET

@file{sys/socket.h} (BSD):  @ref{Address Formats}.

@comment AF_INET6
@item AF_INET6

@file{sys/socket.h} (IPv6 Basic API):  @ref{Address Formats}.

@comment AF_LOCAL
@item AF_LOCAL

@file{sys/socket.h} (POSIX):  @ref{Address Formats}.

@comment AF_UNIX
@item AF_UNIX

@file{sys/socket.h} (BSD):  @ref{Address Formats}.

@file{sys/socket.h} (Unix98):  @ref{Address Formats}.

@comment AF_UNSPEC
@item AF_UNSPEC

@file{sys/socket.h} (BSD):  @ref{Address Formats}.

@comment ALTWERASE
@item tcflag_t ALTWERASE

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment ARGP_ERR_UNKNOWN
@item int ARGP_ERR_UNKNOWN

@file{argp.h} (GNU):  @ref{Argp Parser Functions}.

@comment ARGP_HELP_BUG_ADDR
@item ARGP_HELP_BUG_ADDR

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_DOC
@item ARGP_HELP_DOC

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_EXIT_ERR
@item ARGP_HELP_EXIT_ERR

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_EXIT_OK
@item ARGP_HELP_EXIT_OK

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_LONG
@item ARGP_HELP_LONG

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_LONG_ONLY
@item ARGP_HELP_LONG_ONLY

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_POST_DOC
@item ARGP_HELP_POST_DOC

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_PRE_DOC
@item ARGP_HELP_PRE_DOC

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_SEE
@item ARGP_HELP_SEE

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_SHORT_USAGE
@item ARGP_HELP_SHORT_USAGE

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_STD_ERR
@item ARGP_HELP_STD_ERR

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_STD_HELP
@item ARGP_HELP_STD_HELP

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_STD_USAGE
@item ARGP_HELP_STD_USAGE

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_HELP_USAGE
@item ARGP_HELP_USAGE

@file{argp.h} (GNU):  @ref{Argp Help Flags}.

@comment ARGP_IN_ORDER
@item ARGP_IN_ORDER

@file{argp.h} (GNU):  @ref{Argp Flags}.

@comment ARGP_KEY_ARG
@item ARGP_KEY_ARG

@file{argp.h} (GNU):  @ref{Argp Special Keys}.

@comment ARGP_KEY_ARGS
@item ARGP_KEY_ARGS

@file{argp.h} (GNU):  @ref{Argp Special Keys}.

@comment ARGP_KEY_END
@item ARGP_KEY_END

@file{argp.h} (GNU):  @ref{Argp Special Keys}.

@comment ARGP_KEY_ERROR
@item ARGP_KEY_ERROR

@file{argp.h} (GNU):  @ref{Argp Special Keys}.

@comment ARGP_KEY_FINI
@item ARGP_KEY_FINI

@file{argp.h} (GNU):  @ref{Argp Special Keys}.

@comment ARGP_KEY_HELP_ARGS_DOC
@item ARGP_KEY_HELP_ARGS_DOC

@file{argp.h} (GNU):  @ref{Argp Help Filter Keys}.

@comment ARGP_KEY_HELP_DUP_ARGS_NOTE
@item ARGP_KEY_HELP_DUP_ARGS_NOTE

@file{argp.h} (GNU):  @ref{Argp Help Filter Keys}.

@comment ARGP_KEY_HELP_EXTRA
@item ARGP_KEY_HELP_EXTRA

@file{argp.h} (GNU):  @ref{Argp Help Filter Keys}.

@comment ARGP_KEY_HELP_HEADER
@item ARGP_KEY_HELP_HEADER

@file{argp.h} (GNU):  @ref{Argp Help Filter Keys}.

@comment ARGP_KEY_HELP_POST_DOC
@item ARGP_KEY_HELP_POST_DOC

@file{argp.h} (GNU):  @ref{Argp Help Filter Keys}.

@comment ARGP_KEY_HELP_PRE_DOC
@item ARGP_KEY_HELP_PRE_DOC

@file{argp.h} (GNU):  @ref{Argp Help Filter Keys}.

@comment ARGP_KEY_INIT
@item ARGP_KEY_INIT

@file{argp.h} (GNU):  @ref{Argp Special Keys}.

@comment ARGP_KEY_NO_ARGS
@item ARGP_KEY_NO_ARGS

@file{argp.h} (GNU):  @ref{Argp Special Keys}.

@comment ARGP_KEY_SUCCESS
@item ARGP_KEY_SUCCESS

@file{argp.h} (GNU):  @ref{Argp Special Keys}.

@comment ARGP_LONG_ONLY
@item ARGP_LONG_ONLY

@file{argp.h} (GNU):  @ref{Argp Flags}.

@comment ARGP_NO_ARGS
@item ARGP_NO_ARGS

@file{argp.h} (GNU):  @ref{Argp Flags}.

@comment ARGP_NO_ERRS
@item ARGP_NO_ERRS

@file{argp.h} (GNU):  @ref{Argp Flags}.

@comment ARGP_NO_EXIT
@item ARGP_NO_EXIT

@file{argp.h} (GNU):  @ref{Argp Flags}.

@comment ARGP_NO_HELP
@item ARGP_NO_HELP

@file{argp.h} (GNU):  @ref{Argp Flags}.

@comment ARGP_PARSE_ARGV0
@item ARGP_PARSE_ARGV0

@file{argp.h} (GNU):  @ref{Argp Flags}.

@comment ARGP_SILENT
@item ARGP_SILENT

@file{argp.h} (GNU):  @ref{Argp Flags}.

@comment ARG_MAX
@item int ARG_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment BC_BASE_MAX
@item int BC_BASE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment BC_DIM_MAX
@item int BC_DIM_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment BC_SCALE_MAX
@item int BC_SCALE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment BC_STRING_MAX
@item int BC_STRING_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment BOOT_TIME
@item BOOT_TIME

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment BRKINT
@item tcflag_t BRKINT

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment BUFSIZ
@item int BUFSIZ

@file{stdio.h} (ISO):  @ref{Controlling Buffering}.

@comment CCTS_OFLOW
@item tcflag_t CCTS_OFLOW

@file{termios.h} (BSD):  @ref{Control Modes}.

@comment CHAR_BIT
@item int CHAR_BIT

@file{limits.h} (C90):  @ref{Width of Type}.

@comment CHAR_MAX
@item CHAR_MAX

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment CHAR_MIN
@item CHAR_MIN

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment CHAR_WIDTH
@item CHAR_WIDTH

@file{limits.h} (ISO):  @ref{Width of Type}.

@comment CHILD_MAX
@item int CHILD_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment CIGNORE
@item tcflag_t CIGNORE

@file{termios.h} (BSD):  @ref{Control Modes}.

@comment CLK_TCK
@item int CLK_TCK

@file{time.h} (POSIX.1):  @ref{Processor Time}.

@comment CLOCAL
@item tcflag_t CLOCAL

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment CLOCKS_PER_SEC
@item int CLOCKS_PER_SEC

@file{time.h} (ISO):  @ref{CPU Time}.

@comment CLOCK_MONOTONIC
@item clockid_t CLOCK_MONOTONIC

@file{time.h} (POSIX.1):  @ref{Getting the Time}.

@comment CLOCK_REALTIME
@item clockid_t CLOCK_REALTIME

@file{time.h} (POSIX.1):  @ref{Getting the Time}.

@comment COLL_WEIGHTS_MAX
@item int COLL_WEIGHTS_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment CPU_CLR
@item void CPU_CLR (int @var{cpu}, cpu_set_t *@var{set})

@file{sched.h} (GNU):  @ref{CPU Affinity}.

@comment CPU_ISSET
@item int CPU_ISSET (int @var{cpu}, const cpu_set_t *@var{set})

@file{sched.h} (GNU):  @ref{CPU Affinity}.

@comment CPU_SET
@item void CPU_SET (int @var{cpu}, cpu_set_t *@var{set})

@file{sched.h} (GNU):  @ref{CPU Affinity}.

@comment CPU_SETSIZE
@item int CPU_SETSIZE

@file{sched.h} (GNU):  @ref{CPU Affinity}.

@comment CPU_ZERO
@item void CPU_ZERO (cpu_set_t *@var{set})

@file{sched.h} (GNU):  @ref{CPU Affinity}.

@comment CREAD
@item tcflag_t CREAD

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment CRTS_IFLOW
@item tcflag_t CRTS_IFLOW

@file{termios.h} (BSD):  @ref{Control Modes}.

@comment CS5
@item tcflag_t CS5

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment CS6
@item tcflag_t CS6

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment CS7
@item tcflag_t CS7

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment CS8
@item tcflag_t CS8

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment CSIZE
@item tcflag_t CSIZE

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment CSTOPB
@item tcflag_t CSTOPB

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment DBL_DIG
@item DBL_DIG

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment DBL_EPSILON
@item DBL_EPSILON

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment DBL_MANT_DIG
@item DBL_MANT_DIG

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment DBL_MAX
@item DBL_MAX

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment DBL_MAX_10_EXP
@item DBL_MAX_10_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment DBL_MAX_EXP
@item DBL_MAX_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment DBL_MIN
@item DBL_MIN

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment DBL_MIN_10_EXP
@item DBL_MIN_10_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment DBL_MIN_EXP
@item DBL_MIN_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment DEAD_PROCESS
@item DEAD_PROCESS

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment DIR
@item DIR

@file{dirent.h} (POSIX.1):  @ref{Opening a Directory}.

@comment DTTOIF
@item mode_t DTTOIF (int @var{dtype})

@file{dirent.h} (BSD):  @ref{Directory Entries}.

@comment E2BIG
@item int E2BIG

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EACCES
@item int EACCES

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EADDRINUSE
@item int EADDRINUSE

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EADDRNOTAVAIL
@item int EADDRNOTAVAIL

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EADV
@item int EADV

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EAFNOSUPPORT
@item int EAFNOSUPPORT

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EAGAIN
@item int EAGAIN

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EALREADY
@item int EALREADY

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EAUTH
@item int EAUTH

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EBACKGROUND
@item int EBACKGROUND

@file{errno.h} (GNU):  @ref{Error Codes}.

@comment EBADE
@item int EBADE

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EBADF
@item int EBADF

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EBADFD
@item int EBADFD

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EBADMSG
@item int EBADMSG

@file{errno.h} (XOPEN):  @ref{Error Codes}.

@comment EBADR
@item int EBADR

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EBADRPC
@item int EBADRPC

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EBADRQC
@item int EBADRQC

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EBADSLT
@item int EBADSLT

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EBFONT
@item int EBFONT

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EBUSY
@item int EBUSY

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ECANCELED
@item int ECANCELED

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ECHILD
@item int ECHILD

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ECHO
@item tcflag_t ECHO

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment ECHOCTL
@item tcflag_t ECHOCTL

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment ECHOE
@item tcflag_t ECHOE

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment ECHOK
@item tcflag_t ECHOK

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment ECHOKE
@item tcflag_t ECHOKE

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment ECHONL
@item tcflag_t ECHONL

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment ECHOPRT
@item tcflag_t ECHOPRT

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment ECHRNG
@item int ECHRNG

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ECOMM
@item int ECOMM

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ECONNABORTED
@item int ECONNABORTED

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ECONNREFUSED
@item int ECONNREFUSED

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ECONNRESET
@item int ECONNRESET

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ED
@item int ED

@file{errno.h} (GNU):  @ref{Error Codes}.

@comment EDEADLK
@item int EDEADLK

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EDEADLOCK
@item int EDEADLOCK

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EDESTADDRREQ
@item int EDESTADDRREQ

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EDIED
@item int EDIED

@file{errno.h} (GNU):  @ref{Error Codes}.

@comment EDOM
@item int EDOM

@file{errno.h} (ISO):  @ref{Error Codes}.

@comment EDOTDOT
@item int EDOTDOT

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EDQUOT
@item int EDQUOT

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EEXIST
@item int EEXIST

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EFAULT
@item int EFAULT

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EFBIG
@item int EFBIG

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EFTYPE
@item int EFTYPE

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EGRATUITOUS
@item int EGRATUITOUS

@file{errno.h} (GNU):  @ref{Error Codes}.

@comment EGREGIOUS
@item int EGREGIOUS

@file{errno.h} (GNU):  @ref{Error Codes}.

@comment EHOSTDOWN
@item int EHOSTDOWN

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EHOSTUNREACH
@item int EHOSTUNREACH

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EHWPOISON
@item int EHWPOISON

@file{errno.h} (Linux):  @ref{Error Codes}.

@comment EIDRM
@item int EIDRM

@file{errno.h} (XOPEN):  @ref{Error Codes}.

@comment EIEIO
@item int EIEIO

@file{errno.h} (GNU):  @ref{Error Codes}.

@comment EILSEQ
@item int EILSEQ

@file{errno.h} (ISO):  @ref{Error Codes}.

@comment EINPROGRESS
@item int EINPROGRESS

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EINTR
@item int EINTR

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EINVAL
@item int EINVAL

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EIO
@item int EIO

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EISCONN
@item int EISCONN

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EISDIR
@item int EISDIR

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EISNAM
@item int EISNAM

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EKEYEXPIRED
@item int EKEYEXPIRED

@file{errno.h} (Linux):  @ref{Error Codes}.

@comment EKEYREJECTED
@item int EKEYREJECTED

@file{errno.h} (Linux):  @ref{Error Codes}.

@comment EKEYREVOKED
@item int EKEYREVOKED

@file{errno.h} (Linux):  @ref{Error Codes}.

@comment EL2HLT
@item int EL2HLT

@file{errno.h} (Obsolete):  @ref{Error Codes}.

@comment EL2NSYNC
@item int EL2NSYNC

@file{errno.h} (Obsolete):  @ref{Error Codes}.

@comment EL3HLT
@item int EL3HLT

@file{errno.h} (Obsolete):  @ref{Error Codes}.

@comment EL3RST
@item int EL3RST

@file{errno.h} (Obsolete):  @ref{Error Codes}.

@comment ELIBACC
@item int ELIBACC

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ELIBBAD
@item int ELIBBAD

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ELIBEXEC
@item int ELIBEXEC

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ELIBMAX
@item int ELIBMAX

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ELIBSCN
@item int ELIBSCN

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ELNRNG
@item int ELNRNG

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ELOOP
@item int ELOOP

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EMEDIUMTYPE
@item int EMEDIUMTYPE

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EMFILE
@item int EMFILE

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EMLINK
@item int EMLINK

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EMPTY
@item EMPTY

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment EMSGSIZE
@item int EMSGSIZE

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EMULTIHOP
@item int EMULTIHOP

@file{errno.h} (XOPEN):  @ref{Error Codes}.

@comment ENAMETOOLONG
@item int ENAMETOOLONG

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENAVAIL
@item int ENAVAIL

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ENEEDAUTH
@item int ENEEDAUTH

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ENETDOWN
@item int ENETDOWN

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ENETRESET
@item int ENETRESET

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ENETUNREACH
@item int ENETUNREACH

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ENFILE
@item int ENFILE

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOANO
@item int ENOANO

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ENOBUFS
@item int ENOBUFS

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ENOCSI
@item int ENOCSI

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ENODATA
@item int ENODATA

@file{errno.h} (XOPEN):  @ref{Error Codes}.

@comment ENODEV
@item int ENODEV

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOENT
@item int ENOENT

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOEXEC
@item int ENOEXEC

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOKEY
@item int ENOKEY

@file{errno.h} (Linux):  @ref{Error Codes}.

@comment ENOLCK
@item int ENOLCK

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOLINK
@item int ENOLINK

@file{errno.h} (XOPEN):  @ref{Error Codes}.

@comment ENOMEDIUM
@item int ENOMEDIUM

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ENOMEM
@item int ENOMEM

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOMSG
@item int ENOMSG

@file{errno.h} (XOPEN):  @ref{Error Codes}.

@comment ENONET
@item int ENONET

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ENOPKG
@item int ENOPKG

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ENOPROTOOPT
@item int ENOPROTOOPT

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ENOSPC
@item int ENOSPC

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOSR
@item int ENOSR

@file{errno.h} (XOPEN):  @ref{Error Codes}.

@comment ENOSTR
@item int ENOSTR

@file{errno.h} (XOPEN):  @ref{Error Codes}.

@comment ENOSYS
@item int ENOSYS

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOTBLK
@item int ENOTBLK

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ENOTCONN
@item int ENOTCONN

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ENOTDIR
@item int ENOTDIR

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOTEMPTY
@item int ENOTEMPTY

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOTNAM
@item int ENOTNAM

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ENOTRECOVERABLE
@item int ENOTRECOVERABLE

@file{errno.h} (GNU):  @ref{Error Codes}.

@comment ENOTSOCK
@item int ENOTSOCK

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ENOTSUP
@item int ENOTSUP

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOTTY
@item int ENOTTY

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ENOTUNIQ
@item int ENOTUNIQ

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ENXIO
@item int ENXIO

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EOF
@item int EOF

@file{stdio.h} (ISO):  @ref{EOF and Errors}.

@comment EOPNOTSUPP
@item int EOPNOTSUPP

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EOVERFLOW
@item int EOVERFLOW

@file{errno.h} (XOPEN):  @ref{Error Codes}.

@comment EOWNERDEAD
@item int EOWNERDEAD

@file{errno.h} (GNU):  @ref{Error Codes}.

@comment EPERM
@item int EPERM

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EPFNOSUPPORT
@item int EPFNOSUPPORT

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EPIPE
@item int EPIPE

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EPROCLIM
@item int EPROCLIM

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EPROCUNAVAIL
@item int EPROCUNAVAIL

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EPROGMISMATCH
@item int EPROGMISMATCH

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EPROGUNAVAIL
@item int EPROGUNAVAIL

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EPROTO
@item int EPROTO

@file{errno.h} (XOPEN):  @ref{Error Codes}.

@comment EPROTONOSUPPORT
@item int EPROTONOSUPPORT

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EPROTOTYPE
@item int EPROTOTYPE

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EQUIV_CLASS_MAX
@item int EQUIV_CLASS_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment ERANGE
@item int ERANGE

@file{errno.h} (ISO):  @ref{Error Codes}.

@comment EREMCHG
@item int EREMCHG

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EREMOTE
@item int EREMOTE

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EREMOTEIO
@item int EREMOTEIO

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ERESTART
@item int ERESTART

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ERFKILL
@item int ERFKILL

@file{errno.h} (Linux):  @ref{Error Codes}.

@comment EROFS
@item int EROFS

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ERPCMISMATCH
@item int ERPCMISMATCH

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ESHUTDOWN
@item int ESHUTDOWN

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ESOCKTNOSUPPORT
@item int ESOCKTNOSUPPORT

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ESPIPE
@item int ESPIPE

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ESRCH
@item int ESRCH

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment ESRMNT
@item int ESRMNT

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ESTALE
@item int ESTALE

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ESTRPIPE
@item int ESTRPIPE

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment ETIME
@item int ETIME

@file{errno.h} (XOPEN):  @ref{Error Codes}.

@comment ETIMEDOUT
@item int ETIMEDOUT

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ETOOMANYREFS
@item int ETOOMANYREFS

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment ETXTBSY
@item int ETXTBSY

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EUCLEAN
@item int EUCLEAN

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EUNATCH
@item int EUNATCH

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EUSERS
@item int EUSERS

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EWOULDBLOCK
@item int EWOULDBLOCK

@file{errno.h} (BSD):  @ref{Error Codes}.

@comment EXDEV
@item int EXDEV

@file{errno.h} (POSIX.1):  @ref{Error Codes}.

@comment EXFULL
@item int EXFULL

@file{errno.h} (Linux???):  @ref{Error Codes}.

@comment EXIT_FAILURE
@item int EXIT_FAILURE

@file{stdlib.h} (ISO):  @ref{Exit Status}.

@comment EXIT_SUCCESS
@item int EXIT_SUCCESS

@file{stdlib.h} (ISO):  @ref{Exit Status}.

@comment EXPR_NEST_MAX
@item int EXPR_NEST_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment FD_CLOEXEC
@item int FD_CLOEXEC

@file{fcntl.h} (POSIX.1):  @ref{Descriptor Flags}.

@comment FD_CLR
@item void FD_CLR (int @var{filedes}, fd_set *@var{set})

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment FD_ISSET
@item int FD_ISSET (int @var{filedes}, const fd_set *@var{set})

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment FD_SET
@item void FD_SET (int @var{filedes}, fd_set *@var{set})

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment FD_SETSIZE
@item int FD_SETSIZE

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment FD_ZERO
@item void FD_ZERO (fd_set *@var{set})

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment FE_DIVBYZERO
@item FE_DIVBYZERO

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment FE_DOWNWARD
@item FE_DOWNWARD

@file{fenv.h} (ISO):  @ref{Rounding}.

@comment FE_INEXACT
@item FE_INEXACT

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment FE_INVALID
@item FE_INVALID

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment FE_OVERFLOW
@item FE_OVERFLOW

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment FE_SNANS_ALWAYS_SIGNAL
@item int FE_SNANS_ALWAYS_SIGNAL

@file{fenv.h} (ISO):  @ref{Infinity and NaN}.

@comment FE_TONEAREST
@item FE_TONEAREST

@file{fenv.h} (ISO):  @ref{Rounding}.

@comment FE_TOWARDZERO
@item FE_TOWARDZERO

@file{fenv.h} (ISO):  @ref{Rounding}.

@comment FE_UNDERFLOW
@item FE_UNDERFLOW

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment FE_UPWARD
@item FE_UPWARD

@file{fenv.h} (ISO):  @ref{Rounding}.

@comment FILE
@item FILE

@file{stdio.h} (ISO):  @ref{Streams}.

@comment FILENAME_MAX
@item int FILENAME_MAX

@file{stdio.h} (ISO):  @ref{Limits for Files}.

@comment FLT_DIG
@item FLT_DIG

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment FLT_EPSILON
@item FLT_EPSILON

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment FLT_MANT_DIG
@item FLT_MANT_DIG

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment FLT_MAX
@item FLT_MAX

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment FLT_MAX_10_EXP
@item FLT_MAX_10_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment FLT_MAX_EXP
@item FLT_MAX_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment FLT_MIN
@item FLT_MIN

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment FLT_MIN_10_EXP
@item FLT_MIN_10_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment FLT_MIN_EXP
@item FLT_MIN_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment FLT_RADIX
@item FLT_RADIX

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment FLT_ROUNDS
@item FLT_ROUNDS

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment FLUSHO
@item tcflag_t FLUSHO

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment FNM_CASEFOLD
@item FNM_CASEFOLD

@file{fnmatch.h} (GNU):  @ref{Wildcard Matching}.

@comment FNM_EXTMATCH
@item FNM_EXTMATCH

@file{fnmatch.h} (GNU):  @ref{Wildcard Matching}.

@comment FNM_FILE_NAME
@item FNM_FILE_NAME

@file{fnmatch.h} (GNU):  @ref{Wildcard Matching}.

@comment FNM_LEADING_DIR
@item FNM_LEADING_DIR

@file{fnmatch.h} (GNU):  @ref{Wildcard Matching}.

@comment FNM_NOESCAPE
@item FNM_NOESCAPE

@file{fnmatch.h} (POSIX.2):  @ref{Wildcard Matching}.

@comment FNM_PATHNAME
@item FNM_PATHNAME

@file{fnmatch.h} (POSIX.2):  @ref{Wildcard Matching}.

@comment FNM_PERIOD
@item FNM_PERIOD

@file{fnmatch.h} (POSIX.2):  @ref{Wildcard Matching}.

@comment FOPEN_MAX
@item int FOPEN_MAX

@file{stdio.h} (ISO):  @ref{Opening Streams}.

@comment FPE_DECOVF_TRAP
@item FPE_DECOVF_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTDIV_FAULT
@item FPE_FLTDIV_FAULT

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTDIV_TRAP
@item FPE_FLTDIV_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTOVF_FAULT
@item FPE_FLTOVF_FAULT

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTOVF_TRAP
@item FPE_FLTOVF_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTUND_FAULT
@item FPE_FLTUND_FAULT

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_FLTUND_TRAP
@item FPE_FLTUND_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_INTDIV_TRAP
@item FPE_INTDIV_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_INTOVF_TRAP
@item FPE_INTOVF_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FPE_SUBRNG_TRAP
@item FPE_SUBRNG_TRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment FP_ILOGB0
@item int FP_ILOGB0

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment FP_ILOGBNAN
@item int FP_ILOGBNAN

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment FP_INFINITE
@item FP_INFINITE

@file{math.h} (C99):  @ref{Floating Point Classes}.

@comment FP_INT_DOWNWARD
@item FP_INT_DOWNWARD

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment FP_INT_TONEAREST
@item FP_INT_TONEAREST

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment FP_INT_TONEARESTFROMZERO
@item FP_INT_TONEARESTFROMZERO

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment FP_INT_TOWARDZERO
@item FP_INT_TOWARDZERO

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment FP_INT_UPWARD
@item FP_INT_UPWARD

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment FP_LLOGB0
@item long int FP_LLOGB0

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment FP_LLOGBNAN
@item long int FP_LLOGBNAN

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment FP_NAN
@item FP_NAN

@file{math.h} (C99):  @ref{Floating Point Classes}.

@comment FP_NORMAL
@item FP_NORMAL

@file{math.h} (C99):  @ref{Floating Point Classes}.

@comment FP_SUBNORMAL
@item FP_SUBNORMAL

@file{math.h} (C99):  @ref{Floating Point Classes}.

@comment FP_ZERO
@item FP_ZERO

@file{math.h} (C99):  @ref{Floating Point Classes}.

@comment FTW
@item struct FTW

@file{ftw.h} (XPG4.2):  @ref{Working with Directory Trees}.

@comment F_DUPFD
@item int F_DUPFD

@file{fcntl.h} (POSIX.1):  @ref{Duplicating Descriptors}.

@comment F_GETFD
@item int F_GETFD

@file{fcntl.h} (POSIX.1):  @ref{Descriptor Flags}.

@comment F_GETFL
@item int F_GETFL

@file{fcntl.h} (POSIX.1):  @ref{Getting File Status Flags}.

@comment F_GETLK
@item int F_GETLK

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment F_GETOWN
@item int F_GETOWN

@file{fcntl.h} (BSD):  @ref{Interrupt Input}.

@comment F_OFD_SETLK
@item int F_OFD_SETLK

@file{fcntl.h} (POSIX.1):  @ref{Open File Description Locks}.

@comment F_OFD_SETLKW
@item int F_OFD_SETLKW

@file{fcntl.h} (POSIX.1):  @ref{Open File Description Locks}.

@comment F_OK
@item int F_OK

@file{unistd.h} (POSIX.1):  @ref{Testing File Access}.

@comment F_RDLCK
@item F_RDLCK

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment F_SETFD
@item int F_SETFD

@file{fcntl.h} (POSIX.1):  @ref{Descriptor Flags}.

@comment F_SETFL
@item int F_SETFL

@file{fcntl.h} (POSIX.1):  @ref{Getting File Status Flags}.

@comment F_SETLK
@item int F_SETLK

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment F_SETLKW
@item int F_SETLKW

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment F_SETOWN
@item int F_SETOWN

@file{fcntl.h} (BSD):  @ref{Interrupt Input}.

@comment F_UNLCK
@item F_UNLCK

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment F_WRLCK
@item F_WRLCK

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment GLOB_ABORTED
@item GLOB_ABORTED

@file{glob.h} (POSIX.2):  @ref{Calling Glob}.

@comment GLOB_ALTDIRFUNC
@item GLOB_ALTDIRFUNC

@file{glob.h} (GNU):  @ref{More Flags for Globbing}.

@comment GLOB_APPEND
@item GLOB_APPEND

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_BRACE
@item GLOB_BRACE

@file{glob.h} (GNU):  @ref{More Flags for Globbing}.

@comment GLOB_DOOFFS
@item GLOB_DOOFFS

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_ERR
@item GLOB_ERR

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_MAGCHAR
@item GLOB_MAGCHAR

@file{glob.h} (GNU):  @ref{More Flags for Globbing}.

@comment GLOB_MARK
@item GLOB_MARK

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_NOCHECK
@item GLOB_NOCHECK

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_NOESCAPE
@item GLOB_NOESCAPE

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_NOMAGIC
@item GLOB_NOMAGIC

@file{glob.h} (GNU):  @ref{More Flags for Globbing}.

@comment GLOB_NOMATCH
@item GLOB_NOMATCH

@file{glob.h} (POSIX.2):  @ref{Calling Glob}.

@comment GLOB_NOSORT
@item GLOB_NOSORT

@file{glob.h} (POSIX.2):  @ref{Flags for Globbing}.

@comment GLOB_NOSPACE
@item GLOB_NOSPACE

@file{glob.h} (POSIX.2):  @ref{Calling Glob}.

@comment GLOB_ONLYDIR
@item GLOB_ONLYDIR

@file{glob.h} (GNU):  @ref{More Flags for Globbing}.

@comment GLOB_PERIOD
@item GLOB_PERIOD

@file{glob.h} (GNU):  @ref{More Flags for Globbing}.

@comment GLOB_TILDE
@item GLOB_TILDE

@file{glob.h} (GNU):  @ref{More Flags for Globbing}.

@comment GLOB_TILDE_CHECK
@item GLOB_TILDE_CHECK

@file{glob.h} (GNU):  @ref{More Flags for Globbing}.

@comment HOST_NOT_FOUND
@item HOST_NOT_FOUND

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment HUGE_VAL
@item double HUGE_VAL

@file{math.h} (ISO):  @ref{Math Error Reporting}.

@comment HUGE_VALF
@item float HUGE_VALF

@file{math.h} (ISO):  @ref{Math Error Reporting}.

@comment HUGE_VALL
@item long double HUGE_VALL

@file{math.h} (ISO):  @ref{Math Error Reporting}.

@comment HUGE_VAL_FN
@item _FloatN HUGE_VAL_FN

@file{math.h} (TS 18661-3:2015):  @ref{Math Error Reporting}.

@comment HUGE_VAL_FNx
@item _FloatNx HUGE_VAL_FNx

@file{math.h} (TS 18661-3:2015):  @ref{Math Error Reporting}.

@comment HUPCL
@item tcflag_t HUPCL

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment I
@item const float complex I

@file{complex.h} (C99):  @ref{Complex Numbers}.

@comment ICANON
@item tcflag_t ICANON

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment ICRNL
@item tcflag_t ICRNL

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment IEXTEN
@item tcflag_t IEXTEN

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment IFNAMSIZ
@item size_t IFNAMSIZ

@file{net/if.h} (???):  @ref{Interface Naming}.

@comment IFTODT
@item int IFTODT (mode_t @var{mode})

@file{dirent.h} (BSD):  @ref{Directory Entries}.

@comment IGNBRK
@item tcflag_t IGNBRK

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment IGNCR
@item tcflag_t IGNCR

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment IGNPAR
@item tcflag_t IGNPAR

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment IMAXBEL
@item tcflag_t IMAXBEL

@file{termios.h} (BSD):  @ref{Input Modes}.

@comment INADDR_ANY
@item uint32_t INADDR_ANY

@file{netinet/in.h} (BSD):  @ref{Host Address Data Type}.

@comment INADDR_BROADCAST
@item uint32_t INADDR_BROADCAST

@file{netinet/in.h} (BSD):  @ref{Host Address Data Type}.

@comment INADDR_LOOPBACK
@item uint32_t INADDR_LOOPBACK

@file{netinet/in.h} (BSD):  @ref{Host Address Data Type}.

@comment INADDR_NONE
@item uint32_t INADDR_NONE

@file{netinet/in.h} (BSD):  @ref{Host Address Data Type}.

@comment INFINITY
@item float INFINITY

@file{math.h} (ISO):  @ref{Infinity and NaN}.

@comment INIT_PROCESS
@item INIT_PROCESS

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment INLCR
@item tcflag_t INLCR

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment INPCK
@item tcflag_t INPCK

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment INTPTR_WIDTH
@item INTPTR_WIDTH

@file{stdint.h} (ISO):  @ref{Width of Type}.

@comment INT_MAX
@item INT_MAX

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment INT_MIN
@item INT_MIN

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment INT_WIDTH
@item INT_WIDTH

@file{limits.h} (ISO):  @ref{Width of Type}.

@comment IPPORT_RESERVED
@item int IPPORT_RESERVED

@file{netinet/in.h} (BSD):  @ref{Ports}.

@comment IPPORT_USERRESERVED
@item int IPPORT_USERRESERVED

@file{netinet/in.h} (BSD):  @ref{Ports}.

@comment ISIG
@item tcflag_t ISIG

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment ISTRIP
@item tcflag_t ISTRIP

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment ITIMER_PROF
@item ITIMER_PROF

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment ITIMER_REAL
@item ITIMER_REAL

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment ITIMER_VIRTUAL
@item ITIMER_VIRTUAL

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment IXANY
@item tcflag_t IXANY

@file{termios.h} (BSD):  @ref{Input Modes}.

@comment IXOFF
@item tcflag_t IXOFF

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment IXON
@item tcflag_t IXON

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment LANG
@item LANG

@file{locale.h} (ISO):  @ref{Locale Categories}.

@comment LC_ALL
@item LC_ALL

@file{locale.h} (ISO):  @ref{Locale Categories}.

@comment LC_COLLATE
@item LC_COLLATE

@file{locale.h} (ISO):  @ref{Locale Categories}.

@comment LC_CTYPE
@item LC_CTYPE

@file{locale.h} (ISO):  @ref{Locale Categories}.

@comment LC_MESSAGES
@item LC_MESSAGES

@file{locale.h} (XOPEN):  @ref{Locale Categories}.

@comment LC_MONETARY
@item LC_MONETARY

@file{locale.h} (ISO):  @ref{Locale Categories}.

@comment LC_NUMERIC
@item LC_NUMERIC

@file{locale.h} (ISO):  @ref{Locale Categories}.

@comment LC_TIME
@item LC_TIME

@file{locale.h} (ISO):  @ref{Locale Categories}.

@comment LDBL_DIG
@item LDBL_DIG

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment LDBL_EPSILON
@item LDBL_EPSILON

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment LDBL_MANT_DIG
@item LDBL_MANT_DIG

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment LDBL_MAX
@item LDBL_MAX

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment LDBL_MAX_10_EXP
@item LDBL_MAX_10_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment LDBL_MAX_EXP
@item LDBL_MAX_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment LDBL_MIN
@item LDBL_MIN

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment LDBL_MIN_10_EXP
@item LDBL_MIN_10_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment LDBL_MIN_EXP
@item LDBL_MIN_EXP

@file{float.h} (C90):  @ref{Floating Point Parameters}.

@comment LINE_MAX
@item int LINE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Limits}.

@comment LINK_MAX
@item int LINK_MAX

@file{limits.h} @emph{optional} (POSIX.1):  @ref{Limits for Files}.

@comment LLONG_MAX
@item LLONG_MAX

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment LLONG_MIN
@item LLONG_MIN

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment LLONG_WIDTH
@item LLONG_WIDTH

@file{limits.h} (ISO):  @ref{Width of Type}.

@comment LOGIN_PROCESS
@item LOGIN_PROCESS

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment LONG_LONG_MAX
@item LONG_LONG_MAX

@file{limits.h} (GNU):  @ref{Range of Type}.

@comment LONG_LONG_MIN
@item LONG_LONG_MIN

@file{limits.h} (GNU):  @ref{Range of Type}.

@comment LONG_MAX
@item LONG_MAX

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment LONG_MIN
@item LONG_MIN

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment LONG_WIDTH
@item LONG_WIDTH

@file{limits.h} (ISO):  @ref{Width of Type}.

@comment L_INCR
@item L_INCR

@file{sys/file.h} (BSD):  @ref{File Positioning}.

@comment L_SET
@item L_SET

@file{sys/file.h} (BSD):  @ref{File Positioning}.

@comment L_XTND
@item L_XTND

@file{sys/file.h} (BSD):  @ref{File Positioning}.

@comment L_ctermid
@item int L_ctermid

@file{stdio.h} (POSIX.1):  @ref{Identifying the Terminal}.

@comment L_cuserid
@item int L_cuserid

@file{stdio.h} (POSIX.1):  @ref{Who Logged In}.

@comment L_tmpnam
@item int L_tmpnam

@file{stdio.h} (ISO):  @ref{Temporary Files}.

@comment MADV_HUGEPAGE
@item MADV_HUGEPAGE

@file{sys/mman.h} (Linux):  @ref{Memory-mapped I/O}.

@comment MAP_HUGETLB
@item MAP_HUGETLB

@file{sys/mman.h} (Linux):  @ref{Memory-mapped I/O}.

@comment MAXNAMLEN
@item int MAXNAMLEN

@file{dirent.h} (BSD):  @ref{Limits for Files}.

@comment MAXSYMLINKS
@item int MAXSYMLINKS

@file{sys/param.h} (BSD):  @ref{Symbolic Links}.

@comment MAX_CANON
@item int MAX_CANON

@file{limits.h} (POSIX.1):  @ref{Limits for Files}.

@comment MAX_INPUT
@item int MAX_INPUT

@file{limits.h} (POSIX.1):  @ref{Limits for Files}.

@comment MB_CUR_MAX
@item int MB_CUR_MAX

@file{stdlib.h} (ISO):  @ref{Selecting the Conversion}.

@comment MB_LEN_MAX
@item int MB_LEN_MAX

@file{limits.h} (ISO):  @ref{Selecting the Conversion}.

@comment MDMBUF
@item tcflag_t MDMBUF

@file{termios.h} (BSD):  @ref{Control Modes}.

@comment MFD_ALLOW_SEALING
@item MFD_ALLOW_SEALING

@file{sys/mman.h} (Linux):  @ref{Memory-mapped I/O}.

@comment MFD_CLOEXEC
@item MFD_CLOEXEC

@file{sys/mman.h} (Linux):  @ref{Memory-mapped I/O}.

@comment MFD_HUGETLB
@item MFD_HUGETLB

@file{sys/mman.h} (Linux):  @ref{Memory-mapped I/O}.

@comment MLOCK_ONFAULT
@item MLOCK_ONFAULT

@file{sys/mman.h} (Linux):  @ref{Page Lock Functions}.

@comment MSG_DONTROUTE
@item int MSG_DONTROUTE

@file{sys/socket.h} (BSD):  @ref{Socket Data Options}.

@comment MSG_OOB
@item int MSG_OOB

@file{sys/socket.h} (BSD):  @ref{Socket Data Options}.

@comment MSG_PEEK
@item int MSG_PEEK

@file{sys/socket.h} (BSD):  @ref{Socket Data Options}.

@comment NAME_MAX
@item int NAME_MAX

@file{limits.h} (POSIX.1):  @ref{Limits for Files}.

@comment NAN
@item float NAN

@file{math.h} (GNU):  @ref{Infinity and NaN}.

@comment NCCS
@item int NCCS

@file{termios.h} (POSIX.1):  @ref{Mode Data Types}.

@comment NEW_TIME
@item NEW_TIME

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment NGROUPS_MAX
@item int NGROUPS_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment NOFLSH
@item tcflag_t NOFLSH

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment NOKERNINFO
@item tcflag_t NOKERNINFO

@file{termios.h} @emph{optional} (BSD):  @ref{Local Modes}.

@comment NO_ADDRESS
@item NO_ADDRESS

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment NO_RECOVERY
@item NO_RECOVERY

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment NSIG
@item int NSIG

@file{signal.h} (BSD):  @ref{Standard Signals}.

@comment NULL
@item void * NULL

@file{stddef.h} (ISO):  @ref{Null Pointer Constant}.

@comment OLD_TIME
@item OLD_TIME

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment ONCE_FLAG_INIT
@item ONCE_FLAG_INIT

@file{threads.h} (C11):  @ref{Call Once}.

@comment ONLCR
@item tcflag_t ONLCR

@file{termios.h} (POSIX.1):  @ref{Output Modes}.

@comment ONOEOT
@item tcflag_t ONOEOT

@file{termios.h} @emph{optional} (BSD):  @ref{Output Modes}.

@comment OPEN_MAX
@item int OPEN_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment OPOST
@item tcflag_t OPOST

@file{termios.h} (POSIX.1):  @ref{Output Modes}.

@comment OPTION_ALIAS
@item OPTION_ALIAS

@file{argp.h} (GNU):  @ref{Argp Option Flags}.

@comment OPTION_ARG_OPTIONAL
@item OPTION_ARG_OPTIONAL

@file{argp.h} (GNU):  @ref{Argp Option Flags}.

@comment OPTION_DOC
@item OPTION_DOC

@file{argp.h} (GNU):  @ref{Argp Option Flags}.

@comment OPTION_HIDDEN
@item OPTION_HIDDEN

@file{argp.h} (GNU):  @ref{Argp Option Flags}.

@comment OPTION_NO_USAGE
@item OPTION_NO_USAGE

@file{argp.h} (GNU):  @ref{Argp Option Flags}.

@comment OXTABS
@item tcflag_t OXTABS

@file{termios.h} @emph{optional} (BSD):  @ref{Output Modes}.

@comment O_ACCMODE
@item int O_ACCMODE

@file{fcntl.h} (POSIX.1):  @ref{Access Modes}.

@comment O_APPEND
@item int O_APPEND

@file{fcntl.h} (POSIX.1):  @ref{Operating Modes}.

@comment O_ASYNC
@item int O_ASYNC

@file{fcntl.h} (BSD):  @ref{Operating Modes}.

@comment O_CREAT
@item int O_CREAT

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@comment O_DIRECTORY
@item int O_DIRECTORY

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@comment O_EXCL
@item int O_EXCL

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@comment O_EXEC
@item int O_EXEC

@file{fcntl.h} @emph{optional} (GNU):  @ref{Access Modes}.

@comment O_EXLOCK
@item int O_EXLOCK

@file{fcntl.h} @emph{optional} (BSD):  @ref{Open-time Flags}.

@comment O_FSYNC
@item int O_FSYNC

@file{fcntl.h} (BSD):  @ref{Operating Modes}.

@comment O_IGNORE_CTTY
@item int O_IGNORE_CTTY

@file{fcntl.h} @emph{optional} (GNU):  @ref{Open-time Flags}.

@comment O_NDELAY
@item int O_NDELAY

@file{fcntl.h} (BSD):  @ref{Operating Modes}.

@comment O_NOATIME
@item int O_NOATIME

@file{fcntl.h} (GNU):  @ref{Operating Modes}.

@comment O_NOCTTY
@item int O_NOCTTY

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@comment O_NOFOLLOW
@item int O_NOFOLLOW

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@comment O_NOLINK
@item int O_NOLINK

@file{fcntl.h} @emph{optional} (GNU):  @ref{Open-time Flags}.

@comment O_NONBLOCK
@item int O_NONBLOCK

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@file{fcntl.h} (POSIX.1):  @ref{Operating Modes}.

@comment O_NOTRANS
@item int O_NOTRANS

@file{fcntl.h} @emph{optional} (GNU):  @ref{Open-time Flags}.

@comment O_PATH
@item int O_PATH

@file{fcntl.h} (Linux):  @ref{Access Modes}.

@comment O_RDONLY
@item int O_RDONLY

@file{fcntl.h} (POSIX.1):  @ref{Access Modes}.

@comment O_RDWR
@item int O_RDWR

@file{fcntl.h} (POSIX.1):  @ref{Access Modes}.

@comment O_READ
@item int O_READ

@file{fcntl.h} @emph{optional} (GNU):  @ref{Access Modes}.

@comment O_SHLOCK
@item int O_SHLOCK

@file{fcntl.h} @emph{optional} (BSD):  @ref{Open-time Flags}.

@comment O_SYNC
@item int O_SYNC

@file{fcntl.h} (BSD):  @ref{Operating Modes}.

@comment O_TMPFILE
@item int O_TMPFILE

@file{fcntl.h} (GNU):  @ref{Open-time Flags}.

@comment O_TRUNC
@item int O_TRUNC

@file{fcntl.h} (POSIX.1):  @ref{Open-time Flags}.

@comment O_WRITE
@item int O_WRITE

@file{fcntl.h} @emph{optional} (GNU):  @ref{Access Modes}.

@comment O_WRONLY
@item int O_WRONLY

@file{fcntl.h} (POSIX.1):  @ref{Access Modes}.

@comment PARENB
@item tcflag_t PARENB

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment PARMRK
@item tcflag_t PARMRK

@file{termios.h} (POSIX.1):  @ref{Input Modes}.

@comment PARODD
@item tcflag_t PARODD

@file{termios.h} (POSIX.1):  @ref{Control Modes}.

@comment PATH_MAX
@item int PATH_MAX

@file{limits.h} (POSIX.1):  @ref{Limits for Files}.

@comment PA_CHAR
@item PA_CHAR

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_DOUBLE
@item PA_DOUBLE

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_LONG
@item PA_FLAG_LONG

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_LONG_DOUBLE
@item PA_FLAG_LONG_DOUBLE

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_LONG_LONG
@item PA_FLAG_LONG_LONG

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_MASK
@item int PA_FLAG_MASK

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_PTR
@item PA_FLAG_PTR

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLAG_SHORT
@item PA_FLAG_SHORT

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_FLOAT
@item PA_FLOAT

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_INT
@item PA_INT

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_LAST
@item PA_LAST

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_POINTER
@item PA_POINTER

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PA_STRING
@item PA_STRING

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment PENDIN
@item tcflag_t PENDIN

@file{termios.h} (BSD):  @ref{Local Modes}.

@comment PF_FILE
@item int PF_FILE

@file{sys/socket.h} (GNU):  @ref{Local Namespace Details}.

@comment PF_INET
@item int PF_INET

@file{sys/socket.h} (BSD):  @ref{Internet Namespace}.

@comment PF_INET6
@item int PF_INET6

@file{sys/socket.h} (X/Open):  @ref{Internet Namespace}.

@comment PF_LOCAL
@item int PF_LOCAL

@file{sys/socket.h} (POSIX):  @ref{Local Namespace Details}.

@comment PF_UNIX
@item int PF_UNIX

@file{sys/socket.h} (BSD):  @ref{Local Namespace Details}.

@comment PIPE_BUF
@item int PIPE_BUF

@file{limits.h} (POSIX.1):  @ref{Limits for Files}.

@comment PKEY_DISABLE_ACCESS
@item PKEY_DISABLE_ACCESS

@file{sys/mman.h} (Linux):  @ref{Memory Protection}.

@comment PKEY_DISABLE_WRITE
@item PKEY_DISABLE_WRITE

@file{sys/mman.h} (Linux):  @ref{Memory Protection}.

@comment POSIX_REC_INCR_XFER_SIZE
@item POSIX_REC_INCR_XFER_SIZE

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment POSIX_REC_MAX_XFER_SIZE
@item POSIX_REC_MAX_XFER_SIZE

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment POSIX_REC_MIN_XFER_SIZE
@item POSIX_REC_MIN_XFER_SIZE

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment POSIX_REC_XFER_ALIGN
@item POSIX_REC_XFER_ALIGN

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment PRIO_MAX
@item PRIO_MAX

@file{sys/resource.h} (BSD):  @ref{Traditional Scheduling Functions}.

@comment PRIO_MIN
@item PRIO_MIN

@file{sys/resource.h} (BSD):  @ref{Traditional Scheduling Functions}.

@comment PRIO_PGRP
@item PRIO_PGRP

@file{sys/resource.h} (BSD):  @ref{Traditional Scheduling Functions}.

@comment PRIO_PROCESS
@item PRIO_PROCESS

@file{sys/resource.h} (BSD):  @ref{Traditional Scheduling Functions}.

@comment PRIO_USER
@item PRIO_USER

@file{sys/resource.h} (BSD):  @ref{Traditional Scheduling Functions}.

@comment PROT_EXEC
@item PROT_EXEC

@file{sys/mman.h} (POSIX):  @ref{Memory Protection}.

@comment PROT_NONE
@item PROT_NONE

@file{sys/mman.h} (POSIX):  @ref{Memory Protection}.

@comment PROT_READ
@item PROT_READ

@file{sys/mman.h} (POSIX):  @ref{Memory Protection}.

@comment PROT_WRITE
@item PROT_WRITE

@file{sys/mman.h} (POSIX):  @ref{Memory Protection}.

@comment PTRDIFF_WIDTH
@item PTRDIFF_WIDTH

@file{stdint.h} (ISO):  @ref{Width of Type}.

@comment P_tmpdir
@item char * P_tmpdir

@file{stdio.h} (SVID):  @ref{Temporary Files}.

@comment RAND_MAX
@item int RAND_MAX

@file{stdlib.h} (ISO):  @ref{ISO Random}.

@comment REG_BADBR
@item REG_BADBR

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_BADPAT
@item REG_BADPAT

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_BADRPT
@item REG_BADRPT

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_EBRACE
@item REG_EBRACE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_EBRACK
@item REG_EBRACK

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_ECOLLATE
@item REG_ECOLLATE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_ECTYPE
@item REG_ECTYPE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_EESCAPE
@item REG_EESCAPE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_EPAREN
@item REG_EPAREN

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_ERANGE
@item REG_ERANGE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_ESPACE
@item REG_ESPACE

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@file{regex.h} (POSIX.2):  @ref{Matching POSIX Regexps}.

@comment REG_ESUBREG
@item REG_ESUBREG

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment REG_EXTENDED
@item REG_EXTENDED

@file{regex.h} (POSIX.2):  @ref{Flags for POSIX Regexps}.

@comment REG_ICASE
@item REG_ICASE

@file{regex.h} (POSIX.2):  @ref{Flags for POSIX Regexps}.

@comment REG_NEWLINE
@item REG_NEWLINE

@file{regex.h} (POSIX.2):  @ref{Flags for POSIX Regexps}.

@comment REG_NOMATCH
@item REG_NOMATCH

@file{regex.h} (POSIX.2):  @ref{Matching POSIX Regexps}.

@comment REG_NOSUB
@item REG_NOSUB

@file{regex.h} (POSIX.2):  @ref{Flags for POSIX Regexps}.

@comment REG_NOTBOL
@item REG_NOTBOL

@file{regex.h} (POSIX.2):  @ref{Matching POSIX Regexps}.

@comment REG_NOTEOL
@item REG_NOTEOL

@file{regex.h} (POSIX.2):  @ref{Matching POSIX Regexps}.

@comment RE_DUP_MAX
@item int RE_DUP_MAX

@file{limits.h} (POSIX.2):  @ref{General Limits}.

@comment RLIMIT_AS
@item RLIMIT_AS

@file{sys/resource.h} (Unix98):  @ref{Limits on Resources}.

@comment RLIMIT_CORE
@item RLIMIT_CORE

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_CPU
@item RLIMIT_CPU

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_DATA
@item RLIMIT_DATA

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_FSIZE
@item RLIMIT_FSIZE

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_MEMLOCK
@item RLIMIT_MEMLOCK

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_NOFILE
@item RLIMIT_NOFILE

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_NPROC
@item RLIMIT_NPROC

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_RSS
@item RLIMIT_RSS

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIMIT_STACK
@item RLIMIT_STACK

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIM_INFINITY
@item rlim_t RLIM_INFINITY

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RLIM_NLIMITS
@item RLIM_NLIMITS

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment RUN_LVL
@item RUN_LVL

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment RUSAGE_CHILDREN
@item RUSAGE_CHILDREN

@file{sys/resource.h} (BSD):  @ref{Resource Usage}.

@comment RUSAGE_SELF
@item RUSAGE_SELF

@file{sys/resource.h} (BSD):  @ref{Resource Usage}.

@comment R_OK
@item int R_OK

@file{unistd.h} (POSIX.1):  @ref{Testing File Access}.

@comment SA_NOCLDSTOP
@item int SA_NOCLDSTOP

@file{signal.h} (POSIX.1):  @ref{Flags for Sigaction}.

@comment SA_ONSTACK
@item int SA_ONSTACK

@file{signal.h} (BSD):  @ref{Flags for Sigaction}.

@comment SA_RESTART
@item int SA_RESTART

@file{signal.h} (BSD):  @ref{Flags for Sigaction}.

@comment SCHAR_MAX
@item SCHAR_MAX

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment SCHAR_MIN
@item SCHAR_MIN

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment SCHAR_WIDTH
@item SCHAR_WIDTH

@file{limits.h} (ISO):  @ref{Width of Type}.

@comment SEEK_CUR
@item int SEEK_CUR

@file{stdio.h} (ISO):  @ref{File Positioning}.

@comment SEEK_END
@item int SEEK_END

@file{stdio.h} (ISO):  @ref{File Positioning}.

@comment SEEK_SET
@item int SEEK_SET

@file{stdio.h} (ISO):  @ref{File Positioning}.

@comment SHRT_MAX
@item SHRT_MAX

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment SHRT_MIN
@item SHRT_MIN

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment SHRT_WIDTH
@item SHRT_WIDTH

@file{limits.h} (ISO):  @ref{Width of Type}.

@comment SIGABRT
@item int SIGABRT

@file{signal.h} (ISO):  @ref{Program Error Signals}.

@comment SIGALRM
@item int SIGALRM

@file{signal.h} (POSIX.1):  @ref{Alarm Signals}.

@comment SIGBUS
@item int SIGBUS

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment SIGCHLD
@item int SIGCHLD

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment SIGCLD
@item int SIGCLD

@file{signal.h} (SVID):  @ref{Job Control Signals}.

@comment SIGCONT
@item int SIGCONT

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment SIGEMT
@item int SIGEMT

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment SIGFPE
@item int SIGFPE

@file{signal.h} (ISO):  @ref{Program Error Signals}.

@comment SIGHUP
@item int SIGHUP

@file{signal.h} (POSIX.1):  @ref{Termination Signals}.

@comment SIGILL
@item int SIGILL

@file{signal.h} (ISO):  @ref{Program Error Signals}.

@comment SIGINFO
@item int SIGINFO

@file{signal.h} (BSD):  @ref{Miscellaneous Signals}.

@comment SIGINT
@item int SIGINT

@file{signal.h} (ISO):  @ref{Termination Signals}.

@comment SIGIO
@item int SIGIO

@file{signal.h} (BSD):  @ref{Asynchronous I/O Signals}.

@comment SIGIOT
@item int SIGIOT

@file{signal.h} (Unix):  @ref{Program Error Signals}.

@comment SIGKILL
@item int SIGKILL

@file{signal.h} (POSIX.1):  @ref{Termination Signals}.

@comment SIGLOST
@item int SIGLOST

@file{signal.h} (GNU):  @ref{Operation Error Signals}.

@comment SIGPIPE
@item int SIGPIPE

@file{signal.h} (POSIX.1):  @ref{Operation Error Signals}.

@comment SIGPOLL
@item int SIGPOLL

@file{signal.h} (SVID):  @ref{Asynchronous I/O Signals}.

@comment SIGPROF
@item int SIGPROF

@file{signal.h} (BSD):  @ref{Alarm Signals}.

@comment SIGQUIT
@item int SIGQUIT

@file{signal.h} (POSIX.1):  @ref{Termination Signals}.

@comment SIGSEGV
@item int SIGSEGV

@file{signal.h} (ISO):  @ref{Program Error Signals}.

@comment SIGSTOP
@item int SIGSTOP

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment SIGSYS
@item int SIGSYS

@file{signal.h} (Unix):  @ref{Program Error Signals}.

@comment SIGTERM
@item int SIGTERM

@file{signal.h} (ISO):  @ref{Termination Signals}.

@comment SIGTRAP
@item int SIGTRAP

@file{signal.h} (BSD):  @ref{Program Error Signals}.

@comment SIGTSTP
@item int SIGTSTP

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment SIGTTIN
@item int SIGTTIN

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment SIGTTOU
@item int SIGTTOU

@file{signal.h} (POSIX.1):  @ref{Job Control Signals}.

@comment SIGURG
@item int SIGURG

@file{signal.h} (BSD):  @ref{Asynchronous I/O Signals}.

@comment SIGUSR1
@item int SIGUSR1

@file{signal.h} (POSIX.1):  @ref{Miscellaneous Signals}.

@comment SIGUSR2
@item int SIGUSR2

@file{signal.h} (POSIX.1):  @ref{Miscellaneous Signals}.

@comment SIGVTALRM
@item int SIGVTALRM

@file{signal.h} (BSD):  @ref{Alarm Signals}.

@comment SIGWINCH
@item int SIGWINCH

@file{signal.h} (BSD):  @ref{Miscellaneous Signals}.

@comment SIGXCPU
@item int SIGXCPU

@file{signal.h} (BSD):  @ref{Operation Error Signals}.

@comment SIGXFSZ
@item int SIGXFSZ

@file{signal.h} (BSD):  @ref{Operation Error Signals}.

@comment SIG_ATOMIC_WIDTH
@item SIG_ATOMIC_WIDTH

@file{stdint.h} (ISO):  @ref{Width of Type}.

@comment SIG_BLOCK
@item SIG_BLOCK

@file{signal.h} (POSIX.1):  @ref{Process Signal Mask}.

@comment SIG_ERR
@item sighandler_t SIG_ERR

@file{signal.h} (ISO):  @ref{Basic Signal Handling}.

@comment SIG_SETMASK
@item SIG_SETMASK

@file{signal.h} (POSIX.1):  @ref{Process Signal Mask}.

@comment SIG_UNBLOCK
@item SIG_UNBLOCK

@file{signal.h} (POSIX.1):  @ref{Process Signal Mask}.

@comment SIZE_WIDTH
@item SIZE_WIDTH

@file{stdint.h} (ISO):  @ref{Width of Type}.

@comment SNAN
@item double SNAN

@file{math.h} (TS 18661-1:2014):  @ref{Infinity and NaN}.

@comment SNANF
@item float SNANF

@file{math.h} (TS 18661-1:2014):  @ref{Infinity and NaN}.

@comment SNANFN
@item _FloatN SNANFN

@file{math.h} (TS 18661-3:2015):  @ref{Infinity and NaN}.

@comment SNANFNx
@item _FloatNx SNANFNx

@file{math.h} (TS 18661-3:2015):  @ref{Infinity and NaN}.

@comment SNANL
@item long double SNANL

@file{math.h} (TS 18661-1:2014):  @ref{Infinity and NaN}.

@comment SOCK_DGRAM
@item int SOCK_DGRAM

@file{sys/socket.h} (BSD):  @ref{Communication Styles}.

@comment SOCK_RAW
@item int SOCK_RAW

@file{sys/socket.h} (BSD):  @ref{Communication Styles}.

@comment SOCK_STREAM
@item int SOCK_STREAM

@file{sys/socket.h} (BSD):  @ref{Communication Styles}.

@comment SOL_SOCKET
@item int SOL_SOCKET

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_BROADCAST
@item SO_BROADCAST

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_DEBUG
@item SO_DEBUG

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_DONTROUTE
@item SO_DONTROUTE

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_ERROR
@item SO_ERROR

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_KEEPALIVE
@item SO_KEEPALIVE

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_LINGER
@item SO_LINGER

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_OOBINLINE
@item SO_OOBINLINE

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_RCVBUF
@item SO_RCVBUF

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_REUSEADDR
@item SO_REUSEADDR

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_SNDBUF
@item SO_SNDBUF

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SO_STYLE
@item SO_STYLE

@file{sys/socket.h} (GNU):  @ref{Socket-Level Options}.

@comment SO_TYPE
@item SO_TYPE

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment SSIZE_MAX
@item ssize_t SSIZE_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment STDERR_FILENO
@item STDERR_FILENO

@file{unistd.h} (POSIX.1):  @ref{Descriptors and Streams}.

@comment STDIN_FILENO
@item STDIN_FILENO

@file{unistd.h} (POSIX.1):  @ref{Descriptors and Streams}.

@comment STDOUT_FILENO
@item STDOUT_FILENO

@file{unistd.h} (POSIX.1):  @ref{Descriptors and Streams}.

@comment STREAM_MAX
@item int STREAM_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment SUN_LEN
@item int SUN_LEN (@emph{struct sockaddr_un *} @var{ptr})

@file{sys/un.h} (BSD):  @ref{Local Namespace Details}.

@comment SYMLINK_MAX
@item SYMLINK_MAX

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment S_IEXEC
@item S_IEXEC

@file{sys/stat.h} (BSD):  @ref{Permission Bits}.

@comment S_IFBLK
@item S_IFBLK

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFCHR
@item S_IFCHR

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFDIR
@item S_IFDIR

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFIFO
@item S_IFIFO

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFLNK
@item S_IFLNK

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFMT
@item int S_IFMT

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFREG
@item S_IFREG

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IFSOCK
@item S_IFSOCK

@file{sys/stat.h} (BSD):  @ref{Testing File Type}.

@comment S_IREAD
@item S_IREAD

@file{sys/stat.h} (BSD):  @ref{Permission Bits}.

@comment S_IRGRP
@item S_IRGRP

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IROTH
@item S_IROTH

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IRUSR
@item S_IRUSR

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IRWXG
@item S_IRWXG

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IRWXO
@item S_IRWXO

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IRWXU
@item S_IRWXU

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_ISBLK
@item int S_ISBLK (mode_t @var{m})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_ISCHR
@item int S_ISCHR (mode_t @var{m})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_ISDIR
@item int S_ISDIR (mode_t @var{m})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_ISFIFO
@item int S_ISFIFO (mode_t @var{m})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_ISGID
@item S_ISGID

@file{sys/stat.h} (POSIX):  @ref{Permission Bits}.

@comment S_ISLNK
@item int S_ISLNK (mode_t @var{m})

@file{sys/stat.h} (GNU):  @ref{Testing File Type}.

@comment S_ISREG
@item int S_ISREG (mode_t @var{m})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_ISSOCK
@item int S_ISSOCK (mode_t @var{m})

@file{sys/stat.h} (GNU):  @ref{Testing File Type}.

@comment S_ISUID
@item S_ISUID

@file{sys/stat.h} (POSIX):  @ref{Permission Bits}.

@comment S_ISVTX
@item S_ISVTX

@file{sys/stat.h} (BSD):  @ref{Permission Bits}.

@comment S_IWGRP
@item S_IWGRP

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IWOTH
@item S_IWOTH

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IWRITE
@item S_IWRITE

@file{sys/stat.h} (BSD):  @ref{Permission Bits}.

@comment S_IWUSR
@item S_IWUSR

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IXGRP
@item S_IXGRP

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IXOTH
@item S_IXOTH

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_IXUSR
@item S_IXUSR

@file{sys/stat.h} (POSIX.1):  @ref{Permission Bits}.

@comment S_TYPEISMQ
@item int S_TYPEISMQ (struct stat *@var{s})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_TYPEISSEM
@item int S_TYPEISSEM (struct stat *@var{s})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment S_TYPEISSHM
@item int S_TYPEISSHM (struct stat *@var{s})

@file{sys/stat.h} (POSIX):  @ref{Testing File Type}.

@comment TCSADRAIN
@item TCSADRAIN

@file{termios.h} (POSIX.1):  @ref{Mode Functions}.

@comment TCSAFLUSH
@item TCSAFLUSH

@file{termios.h} (POSIX.1):  @ref{Mode Functions}.

@comment TCSANOW
@item TCSANOW

@file{termios.h} (POSIX.1):  @ref{Mode Functions}.

@comment TCSASOFT
@item TCSASOFT

@file{termios.h} (BSD):  @ref{Mode Functions}.

@comment TEMP_FAILURE_RETRY
@item TEMP_FAILURE_RETRY (@var{expression})

@file{unistd.h} (GNU):  @ref{Interrupted Primitives}.

@comment TMP_MAX
@item int TMP_MAX

@file{stdio.h} (ISO):  @ref{Temporary Files}.

@comment TOSTOP
@item tcflag_t TOSTOP

@file{termios.h} (POSIX.1):  @ref{Local Modes}.

@comment TRY_AGAIN
@item TRY_AGAIN

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment TSS_DTOR_ITERATIONS
@item TSS_DTOR_ITERATIONS

@file{threads.h} (C11):  @ref{ISO C Thread-local Storage}.

@comment TZNAME_MAX
@item int TZNAME_MAX

@file{limits.h} (POSIX.1):  @ref{General Limits}.

@comment UCHAR_MAX
@item UCHAR_MAX

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment UCHAR_WIDTH
@item UCHAR_WIDTH

@file{limits.h} (ISO):  @ref{Width of Type}.

@comment UINTPTR_WIDTH
@item UINTPTR_WIDTH

@file{stdint.h} (ISO):  @ref{Width of Type}.

@comment UINT_MAX
@item UINT_MAX

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment UINT_WIDTH
@item UINT_WIDTH

@file{limits.h} (ISO):  @ref{Width of Type}.

@comment ULLONG_MAX
@item ULLONG_MAX

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment ULLONG_WIDTH
@item ULLONG_WIDTH

@file{limits.h} (ISO):  @ref{Width of Type}.

@comment ULONG_LONG_MAX
@item ULONG_LONG_MAX

@file{limits.h} (GNU):  @ref{Range of Type}.

@comment ULONG_MAX
@item ULONG_MAX

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment ULONG_WIDTH
@item ULONG_WIDTH

@file{limits.h} (ISO):  @ref{Width of Type}.

@comment USER_PROCESS
@item USER_PROCESS

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment USHRT_MAX
@item USHRT_MAX

@file{limits.h} (ISO):  @ref{Range of Type}.

@comment USHRT_WIDTH
@item USHRT_WIDTH

@file{limits.h} (ISO):  @ref{Width of Type}.

@comment VDISCARD
@item int VDISCARD

@file{termios.h} (BSD):  @ref{Other Special}.

@comment VDSUSP
@item int VDSUSP

@file{termios.h} (BSD):  @ref{Signal Characters}.

@comment VEOF
@item int VEOF

@file{termios.h} (POSIX.1):  @ref{Editing Characters}.

@comment VEOL
@item int VEOL

@file{termios.h} (POSIX.1):  @ref{Editing Characters}.

@comment VEOL2
@item int VEOL2

@file{termios.h} (BSD):  @ref{Editing Characters}.

@comment VERASE
@item int VERASE

@file{termios.h} (POSIX.1):  @ref{Editing Characters}.

@comment VINTR
@item int VINTR

@file{termios.h} (POSIX.1):  @ref{Signal Characters}.

@comment VKILL
@item int VKILL

@file{termios.h} (POSIX.1):  @ref{Editing Characters}.

@comment VLNEXT
@item int VLNEXT

@file{termios.h} (BSD):  @ref{Other Special}.

@comment VMIN
@item int VMIN

@file{termios.h} (POSIX.1):  @ref{Noncanonical Input}.

@comment VQUIT
@item int VQUIT

@file{termios.h} (POSIX.1):  @ref{Signal Characters}.

@comment VREPRINT
@item int VREPRINT

@file{termios.h} (BSD):  @ref{Editing Characters}.

@comment VSTART
@item int VSTART

@file{termios.h} (POSIX.1):  @ref{Start/Stop Characters}.

@comment VSTATUS
@item int VSTATUS

@file{termios.h} (BSD):  @ref{Other Special}.

@comment VSTOP
@item int VSTOP

@file{termios.h} (POSIX.1):  @ref{Start/Stop Characters}.

@comment VSUSP
@item int VSUSP

@file{termios.h} (POSIX.1):  @ref{Signal Characters}.

@comment VTIME
@item int VTIME

@file{termios.h} (POSIX.1):  @ref{Noncanonical Input}.

@comment VWERASE
@item int VWERASE

@file{termios.h} (BSD):  @ref{Editing Characters}.

@comment WCHAR_MAX
@item WCHAR_MAX

@file{limits.h} (GNU):  @ref{Range of Type}.

@comment WCHAR_MAX
@item wint_t WCHAR_MAX

@file{wchar.h} (ISO):  @ref{Extended Char Intro}.

@comment WCHAR_MIN
@item wint_t WCHAR_MIN

@file{wchar.h} (ISO):  @ref{Extended Char Intro}.

@comment WCHAR_WIDTH
@item WCHAR_WIDTH

@file{stdint.h} (ISO):  @ref{Width of Type}.

@comment WCOREDUMP
@item int WCOREDUMP (int @var{status})

@file{sys/wait.h} (BSD):  @ref{Process Completion Status}.

@comment WEOF
@item int WEOF

@file{wchar.h} (ISO):  @ref{EOF and Errors}.

@comment WEOF
@item wint_t WEOF

@file{wchar.h} (ISO):  @ref{Extended Char Intro}.

@comment WEXITSTATUS
@item int WEXITSTATUS (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment WIFEXITED
@item int WIFEXITED (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment WIFSIGNALED
@item int WIFSIGNALED (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment WIFSTOPPED
@item int WIFSTOPPED (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment WINT_WIDTH
@item WINT_WIDTH

@file{stdint.h} (ISO):  @ref{Width of Type}.

@comment WRDE_APPEND
@item WRDE_APPEND

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment WRDE_BADCHAR
@item WRDE_BADCHAR

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment WRDE_BADVAL
@item WRDE_BADVAL

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment WRDE_CMDSUB
@item WRDE_CMDSUB

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment WRDE_DOOFFS
@item WRDE_DOOFFS

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment WRDE_NOCMD
@item WRDE_NOCMD

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment WRDE_NOSPACE
@item WRDE_NOSPACE

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment WRDE_REUSE
@item WRDE_REUSE

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment WRDE_SHOWERR
@item WRDE_SHOWERR

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment WRDE_SYNTAX
@item WRDE_SYNTAX

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment WRDE_UNDEF
@item WRDE_UNDEF

@file{wordexp.h} (POSIX.2):  @ref{Flags for Wordexp}.

@comment WSTOPSIG
@item int WSTOPSIG (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment WTERMSIG
@item int WTERMSIG (int @var{status})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion Status}.

@comment W_OK
@item int W_OK

@file{unistd.h} (POSIX.1):  @ref{Testing File Access}.

@comment X_OK
@item int X_OK

@file{unistd.h} (POSIX.1):  @ref{Testing File Access}.

@comment _ATFILE_SOURCE
@item _ATFILE_SOURCE

@emph{no header} (GNU):  @ref{Feature Test Macros}.

@comment _CS_LFS64_CFLAGS
@item _CS_LFS64_CFLAGS

@file{unistd.h} (Unix98):  @ref{String Parameters}.

@comment _CS_LFS64_LDFLAGS
@item _CS_LFS64_LDFLAGS

@file{unistd.h} (Unix98):  @ref{String Parameters}.

@comment _CS_LFS64_LIBS
@item _CS_LFS64_LIBS

@file{unistd.h} (Unix98):  @ref{String Parameters}.

@comment _CS_LFS64_LINTFLAGS
@item _CS_LFS64_LINTFLAGS

@file{unistd.h} (Unix98):  @ref{String Parameters}.

@comment _CS_LFS_CFLAGS
@item _CS_LFS_CFLAGS

@file{unistd.h} (Unix98):  @ref{String Parameters}.

@comment _CS_LFS_LDFLAGS
@item _CS_LFS_LDFLAGS

@file{unistd.h} (Unix98):  @ref{String Parameters}.

@comment _CS_LFS_LIBS
@item _CS_LFS_LIBS

@file{unistd.h} (Unix98):  @ref{String Parameters}.

@comment _CS_LFS_LINTFLAGS
@item _CS_LFS_LINTFLAGS

@file{unistd.h} (Unix98):  @ref{String Parameters}.

@comment _CS_PATH
@item _CS_PATH

@file{unistd.h} (POSIX.2):  @ref{String Parameters}.

@comment _Complex_I
@item const float complex _Complex_I

@file{complex.h} (C99):  @ref{Complex Numbers}.

@comment _DEFAULT_SOURCE
@item _DEFAULT_SOURCE

@emph{no header} (GNU):  @ref{Feature Test Macros}.

@comment _DYNAMIC_STACK_SIZE_SOURCE
@item _DYNAMIC_STACK_SIZE_SOURCE

@emph{no header} (GNU):  @ref{Feature Test Macros}.

@comment _Exit
@item void _Exit (int @var{status})

@file{stdlib.h} (ISO):  @ref{Termination Internals}.

@comment _FILE_OFFSET_BITS
@item _FILE_OFFSET_BITS

@emph{no header} (X/Open):  @ref{Feature Test Macros}.

@comment _FORTIFY_SOURCE
@item _FORTIFY_SOURCE

@emph{no header} (GNU):  @ref{Feature Test Macros}.

@comment _Fork
@item pid_t _Fork (void)

@file{unistd.h} (GNU):  @ref{Creating a Process}.

@comment _GNU_SOURCE
@item _GNU_SOURCE

@emph{no header} (GNU):  @ref{Feature Test Macros}.

@comment _IOFBF
@item int _IOFBF

@file{stdio.h} (ISO):  @ref{Controlling Buffering}.

@comment _IOLBF
@item int _IOLBF

@file{stdio.h} (ISO):  @ref{Controlling Buffering}.

@comment _IONBF
@item int _IONBF

@file{stdio.h} (ISO):  @ref{Controlling Buffering}.

@comment _ISOC11_SOURCE
@item _ISOC11_SOURCE

@emph{no header} (C11):  @ref{Feature Test Macros}.

@comment _ISOC2X_SOURCE
@item _ISOC2X_SOURCE

@emph{no header} (C2X):  @ref{Feature Test Macros}.

@comment _ISOC99_SOURCE
@item _ISOC99_SOURCE

@emph{no header} (GNU):  @ref{Feature Test Macros}.

@comment _LARGEFILE64_SOURCE
@item _LARGEFILE64_SOURCE

@emph{no header} (X/Open):  @ref{Feature Test Macros}.

@comment _LARGEFILE_SOURCE
@item _LARGEFILE_SOURCE

@emph{no header} (X/Open):  @ref{Feature Test Macros}.

@comment _PC_ASYNC_IO
@item _PC_ASYNC_IO

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_CHOWN_RESTRICTED
@item _PC_CHOWN_RESTRICTED

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_FILESIZEBITS
@item _PC_FILESIZEBITS

@file{unistd.h} (LFS):  @ref{Pathconf}.

@comment _PC_LINK_MAX
@item _PC_LINK_MAX

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_MAX_CANON
@item _PC_MAX_CANON

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_MAX_INPUT
@item _PC_MAX_INPUT

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_NAME_MAX
@item _PC_NAME_MAX

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_NO_TRUNC
@item _PC_NO_TRUNC

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_PATH_MAX
@item _PC_PATH_MAX

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_PIPE_BUF
@item _PC_PIPE_BUF

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_PRIO_IO
@item _PC_PRIO_IO

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_REC_INCR_XFER_SIZE
@item _PC_REC_INCR_XFER_SIZE

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_REC_MAX_XFER_SIZE
@item _PC_REC_MAX_XFER_SIZE

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_REC_MIN_XFER_SIZE
@item _PC_REC_MIN_XFER_SIZE

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_REC_XFER_ALIGN
@item _PC_REC_XFER_ALIGN

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_SYNC_IO
@item _PC_SYNC_IO

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _PC_VDISABLE
@item _PC_VDISABLE

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment _POSIX2_BC_BASE_MAX
@item _POSIX2_BC_BASE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_BC_DIM_MAX
@item _POSIX2_BC_DIM_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_BC_SCALE_MAX
@item _POSIX2_BC_SCALE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_BC_STRING_MAX
@item _POSIX2_BC_STRING_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_COLL_WEIGHTS_MAX
@item _POSIX2_COLL_WEIGHTS_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_C_DEV
@item int _POSIX2_C_DEV

@file{unistd.h} (POSIX.2):  @ref{System Options}.

@comment _POSIX2_C_VERSION
@item long int _POSIX2_C_VERSION

@file{unistd.h} (POSIX.2):  @ref{Version Supported}.

@comment _POSIX2_EQUIV_CLASS_MAX
@item _POSIX2_EQUIV_CLASS_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_EXPR_NEST_MAX
@item _POSIX2_EXPR_NEST_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_FORT_DEV
@item int _POSIX2_FORT_DEV

@file{unistd.h} (POSIX.2):  @ref{System Options}.

@comment _POSIX2_FORT_RUN
@item int _POSIX2_FORT_RUN

@file{unistd.h} (POSIX.2):  @ref{System Options}.

@comment _POSIX2_LINE_MAX
@item _POSIX2_LINE_MAX

@file{limits.h} (POSIX.2):  @ref{Utility Minimums}.

@comment _POSIX2_LOCALEDEF
@item int _POSIX2_LOCALEDEF

@file{unistd.h} (POSIX.2):  @ref{System Options}.

@comment _POSIX2_RE_DUP_MAX
@item _POSIX2_RE_DUP_MAX

@file{limits.h} (POSIX.2):  @ref{Minimums}.

@comment _POSIX2_SW_DEV
@item int _POSIX2_SW_DEV

@file{unistd.h} (POSIX.2):  @ref{System Options}.

@comment _POSIX_AIO_LISTIO_MAX
@item _POSIX_AIO_LISTIO_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_AIO_MAX
@item _POSIX_AIO_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_ARG_MAX
@item _POSIX_ARG_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_CHILD_MAX
@item _POSIX_CHILD_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_CHOWN_RESTRICTED
@item int _POSIX_CHOWN_RESTRICTED

@file{unistd.h} (POSIX.1):  @ref{Options for Files}.

@comment _POSIX_C_SOURCE
@item _POSIX_C_SOURCE

@emph{no header} (POSIX.2):  @ref{Feature Test Macros}.

@comment _POSIX_JOB_CONTROL
@item int _POSIX_JOB_CONTROL

@file{unistd.h} (POSIX.1):  @ref{System Options}.

@comment _POSIX_LINK_MAX
@item _POSIX_LINK_MAX

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_MAX_CANON
@item _POSIX_MAX_CANON

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_MAX_INPUT
@item _POSIX_MAX_INPUT

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_NAME_MAX
@item _POSIX_NAME_MAX

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_NGROUPS_MAX
@item _POSIX_NGROUPS_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_NO_TRUNC
@item int _POSIX_NO_TRUNC

@file{unistd.h} (POSIX.1):  @ref{Options for Files}.

@comment _POSIX_OPEN_MAX
@item _POSIX_OPEN_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_PATH_MAX
@item _POSIX_PATH_MAX

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_PIPE_BUF
@item _POSIX_PIPE_BUF

@file{limits.h} (POSIX.1):  @ref{File Minimums}.

@comment _POSIX_SAVED_IDS
@item int _POSIX_SAVED_IDS

@file{unistd.h} (POSIX.1):  @ref{System Options}.

@comment _POSIX_SOURCE
@item _POSIX_SOURCE

@emph{no header} (POSIX.1):  @ref{Feature Test Macros}.

@comment _POSIX_SSIZE_MAX
@item _POSIX_SSIZE_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_STREAM_MAX
@item _POSIX_STREAM_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_TZNAME_MAX
@item _POSIX_TZNAME_MAX

@file{limits.h} (POSIX.1):  @ref{Minimums}.

@comment _POSIX_VDISABLE
@item unsigned char _POSIX_VDISABLE

@file{unistd.h} (POSIX.1):  @ref{Options for Files}.

@comment _POSIX_VERSION
@item long int _POSIX_VERSION

@file{unistd.h} (POSIX.1):  @ref{Version Supported}.

@comment _REENTRANT
@item _REENTRANT

@emph{no header} (Obsolete):  @ref{Feature Test Macros}.

@comment _SC_2_C_DEV
@item _SC_2_C_DEV

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_2_FORT_DEV
@item _SC_2_FORT_DEV

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_2_FORT_RUN
@item _SC_2_FORT_RUN

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_2_LOCALEDEF
@item _SC_2_LOCALEDEF

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_2_SW_DEV
@item _SC_2_SW_DEV

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_2_VERSION
@item _SC_2_VERSION

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_AIO_LISTIO_MAX
@item _SC_AIO_LISTIO_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_AIO_MAX
@item _SC_AIO_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_AIO_PRIO_DELTA_MAX
@item _SC_AIO_PRIO_DELTA_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_ARG_MAX
@item _SC_ARG_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_ASYNCHRONOUS_IO
@item _SC_ASYNCHRONOUS_IO

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_ATEXIT_MAX
@item _SC_ATEXIT_MAX

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_AVPHYS_PAGES
@item _SC_AVPHYS_PAGES

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_BC_BASE_MAX
@item _SC_BC_BASE_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_BC_DIM_MAX
@item _SC_BC_DIM_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_BC_SCALE_MAX
@item _SC_BC_SCALE_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_BC_STRING_MAX
@item _SC_BC_STRING_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_CHARCLASS_NAME_MAX
@item _SC_CHARCLASS_NAME_MAX

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_CHAR_BIT
@item _SC_CHAR_BIT

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_CHAR_MAX
@item _SC_CHAR_MAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_CHAR_MIN
@item _SC_CHAR_MIN

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_CHILD_MAX
@item _SC_CHILD_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_CLK_TCK
@item _SC_CLK_TCK

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_COLL_WEIGHTS_MAX
@item _SC_COLL_WEIGHTS_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_DELAYTIMER_MAX
@item _SC_DELAYTIMER_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_EQUIV_CLASS_MAX
@item _SC_EQUIV_CLASS_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_EXPR_NEST_MAX
@item _SC_EXPR_NEST_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_FSYNC
@item _SC_FSYNC

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_GETGR_R_SIZE_MAX
@item _SC_GETGR_R_SIZE_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_GETPW_R_SIZE_MAX
@item _SC_GETPW_R_SIZE_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_INT_MAX
@item _SC_INT_MAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_INT_MIN
@item _SC_INT_MIN

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_JOB_CONTROL
@item _SC_JOB_CONTROL

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL1_DCACHE_ASSOC
@item _SC_LEVEL1_DCACHE_ASSOC

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL1_DCACHE_LINESIZE
@item _SC_LEVEL1_DCACHE_LINESIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL1_DCACHE_SIZE
@item _SC_LEVEL1_DCACHE_SIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL1_ICACHE_ASSOC
@item _SC_LEVEL1_ICACHE_ASSOC

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL1_ICACHE_LINESIZE
@item _SC_LEVEL1_ICACHE_LINESIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL1_ICACHE_SIZE
@item _SC_LEVEL1_ICACHE_SIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL2_CACHE_ASSOC
@item _SC_LEVEL2_CACHE_ASSOC

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL2_CACHE_LINESIZE
@item _SC_LEVEL2_CACHE_LINESIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL2_CACHE_SIZE
@item _SC_LEVEL2_CACHE_SIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL3_CACHE_ASSOC
@item _SC_LEVEL3_CACHE_ASSOC

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL3_CACHE_LINESIZE
@item _SC_LEVEL3_CACHE_LINESIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL3_CACHE_SIZE
@item _SC_LEVEL3_CACHE_SIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL4_CACHE_ASSOC
@item _SC_LEVEL4_CACHE_ASSOC

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL4_CACHE_LINESIZE
@item _SC_LEVEL4_CACHE_LINESIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LEVEL4_CACHE_SIZE
@item _SC_LEVEL4_CACHE_SIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_LINE_MAX
@item _SC_LINE_MAX

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_LOGIN_NAME_MAX
@item _SC_LOGIN_NAME_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_LONG_BIT
@item _SC_LONG_BIT

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_MAPPED_FILES
@item _SC_MAPPED_FILES

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_MB_LEN_MAX
@item _SC_MB_LEN_MAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_MEMLOCK
@item _SC_MEMLOCK

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_MEMLOCK_RANGE
@item _SC_MEMLOCK_RANGE

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_MEMORY_PROTECTION
@item _SC_MEMORY_PROTECTION

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_MESSAGE_PASSING
@item _SC_MESSAGE_PASSING

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_MINSIGSTKSZ
@item _SC_MINSIGSTKSZ

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_MQ_OPEN_MAX
@item _SC_MQ_OPEN_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_MQ_PRIO_MAX
@item _SC_MQ_PRIO_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_NGROUPS_MAX
@item _SC_NGROUPS_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_NL_ARGMAX
@item _SC_NL_ARGMAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_NL_LANGMAX
@item _SC_NL_LANGMAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_NL_MSGMAX
@item _SC_NL_MSGMAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_NL_NMAX
@item _SC_NL_NMAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_NL_SETMAX
@item _SC_NL_SETMAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_NL_TEXTMAX
@item _SC_NL_TEXTMAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_NPROCESSORS_CONF
@item _SC_NPROCESSORS_CONF

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_NPROCESSORS_ONLN
@item _SC_NPROCESSORS_ONLN

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_NZERO
@item _SC_NZERO

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_OPEN_MAX
@item _SC_OPEN_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_PAGESIZE
@item _SC_PAGESIZE

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_PHYS_PAGES
@item _SC_PHYS_PAGES

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_PII
@item _SC_PII

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_PII_INTERNET
@item _SC_PII_INTERNET

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_PII_INTERNET_DGRAM
@item _SC_PII_INTERNET_DGRAM

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_PII_INTERNET_STREAM
@item _SC_PII_INTERNET_STREAM

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_PII_OSI
@item _SC_PII_OSI

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_PII_OSI_CLTS
@item _SC_PII_OSI_CLTS

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_PII_OSI_COTS
@item _SC_PII_OSI_COTS

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_PII_OSI_M
@item _SC_PII_OSI_M

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_PII_SOCKET
@item _SC_PII_SOCKET

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_PII_XTI
@item _SC_PII_XTI

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_PRIORITIZED_IO
@item _SC_PRIORITIZED_IO

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_PRIORITY_SCHEDULING
@item _SC_PRIORITY_SCHEDULING

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_REALTIME_SIGNALS
@item _SC_REALTIME_SIGNALS

@file{unistdh.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_RTSIG_MAX
@item _SC_RTSIG_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_SAVED_IDS
@item _SC_SAVED_IDS

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_SCHAR_MAX
@item _SC_SCHAR_MAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_SCHAR_MIN
@item _SC_SCHAR_MIN

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_SELECT
@item _SC_SELECT

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_SEMAPHORES
@item _SC_SEMAPHORES

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_SEM_NSEMS_MAX
@item _SC_SEM_NSEMS_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_SEM_VALUE_MAX
@item _SC_SEM_VALUE_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_SHARED_MEMORY_OBJECTS
@item _SC_SHARED_MEMORY_OBJECTS

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_SHRT_MAX
@item _SC_SHRT_MAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_SHRT_MIN
@item _SC_SHRT_MIN

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_SIGQUEUE_MAX
@item _SC_SIGQUEUE_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_SIGSTKSZ
@item _SC_SIGSTKSZ

@file{unistd.h} (GNU):  @ref{Constants for Sysconf}.

@comment _SC_SSIZE_MAX
@item _SC_SSIZE_MAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_STREAM_MAX
@item _SC_STREAM_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_SYNCHRONIZED_IO
@item _SC_SYNCHRONIZED_IO

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREADS
@item _SC_THREADS

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREAD_ATTR_STACKADDR
@item _SC_THREAD_ATTR_STACKADDR

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREAD_ATTR_STACKSIZE
@item _SC_THREAD_ATTR_STACKSIZE

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREAD_DESTRUCTOR_ITERATIONS
@item _SC_THREAD_DESTRUCTOR_ITERATIONS

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREAD_KEYS_MAX
@item _SC_THREAD_KEYS_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREAD_PRIORITY_SCHEDULING
@item _SC_THREAD_PRIORITY_SCHEDULING

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREAD_PRIO_INHERIT
@item _SC_THREAD_PRIO_INHERIT

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREAD_PRIO_PROTECT
@item _SC_THREAD_PRIO_PROTECT

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREAD_PROCESS_SHARED
@item _SC_THREAD_PROCESS_SHARED

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREAD_SAFE_FUNCTIONS
@item _SC_THREAD_SAFE_FUNCTIONS

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREAD_STACK_MIN
@item _SC_THREAD_STACK_MIN

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_THREAD_THREADS_MAX
@item _SC_THREAD_THREADS_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_TIMERS
@item _SC_TIMERS

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_TIMER_MAX
@item _SC_TIMER_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_TTY_NAME_MAX
@item _SC_TTY_NAME_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_TZNAME_MAX
@item _SC_TZNAME_MAX

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@comment _SC_T_IOV_MAX
@item _SC_T_IOV_MAX

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_UCHAR_MAX
@item _SC_UCHAR_MAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_UINT_MAX
@item _SC_UINT_MAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_UIO_MAXIOV
@item _SC_UIO_MAXIOV

@file{unistd.h} (POSIX.1g):  @ref{Constants for Sysconf}.

@comment _SC_ULONG_MAX
@item _SC_ULONG_MAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_USHRT_MAX
@item _SC_USHRT_MAX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_VERSION
@item _SC_VERSION

@file{unistd.h} (POSIX.1):  @ref{Constants for Sysconf}.

@file{unistd.h} (POSIX.2):  @ref{Constants for Sysconf}.

@comment _SC_WORD_BIT
@item _SC_WORD_BIT

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_CRYPT
@item _SC_XOPEN_CRYPT

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_ENH_I18N
@item _SC_XOPEN_ENH_I18N

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_LEGACY
@item _SC_XOPEN_LEGACY

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_REALTIME
@item _SC_XOPEN_REALTIME

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_REALTIME_THREADS
@item _SC_XOPEN_REALTIME_THREADS

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_SHM
@item _SC_XOPEN_SHM

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_UNIX
@item _SC_XOPEN_UNIX

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_VERSION
@item _SC_XOPEN_VERSION

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_XCU_VERSION
@item _SC_XOPEN_XCU_VERSION

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_XPG2
@item _SC_XOPEN_XPG2

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_XPG3
@item _SC_XOPEN_XPG3

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _SC_XOPEN_XPG4
@item _SC_XOPEN_XPG4

@file{unistd.h} (X/Open):  @ref{Constants for Sysconf}.

@comment _THREAD_SAFE
@item _THREAD_SAFE

@emph{no header} (Obsolete):  @ref{Feature Test Macros}.

@comment _XOPEN_SOURCE
@item _XOPEN_SOURCE

@emph{no header} (X/Open):  @ref{Feature Test Macros}.

@comment _XOPEN_SOURCE_EXTENDED
@item _XOPEN_SOURCE_EXTENDED

@emph{no header} (X/Open):  @ref{Feature Test Macros}.

@comment __STDC_WANT_IEC_60559_BFP_EXT__
@item __STDC_WANT_IEC_60559_BFP_EXT__

@emph{no header} (ISO):  @ref{Feature Test Macros}.

@comment __STDC_WANT_IEC_60559_EXT__
@item __STDC_WANT_IEC_60559_EXT__

@emph{no header} (ISO):  @ref{Feature Test Macros}.

@comment __STDC_WANT_IEC_60559_FUNCS_EXT__
@item __STDC_WANT_IEC_60559_FUNCS_EXT__

@emph{no header} (ISO):  @ref{Feature Test Macros}.

@comment __STDC_WANT_IEC_60559_TYPES_EXT__
@item __STDC_WANT_IEC_60559_TYPES_EXT__

@emph{no header} (ISO):  @ref{Feature Test Macros}.

@comment __STDC_WANT_LIB_EXT2__
@item __STDC_WANT_LIB_EXT2__

@emph{no header} (ISO):  @ref{Feature Test Macros}.

@comment __fbufsize
@item size_t __fbufsize (FILE *@var{stream})

@file{stdio_ext.h} (GNU):  @ref{Controlling Buffering}.

@comment __flbf
@item int __flbf (FILE *@var{stream})

@file{stdio_ext.h} (GNU):  @ref{Controlling Buffering}.

@comment __fpending
@item size_t __fpending (FILE *@var{stream})

@file{stdio_ext.h} (GNU):  @ref{Controlling Buffering}.

@comment __fpurge
@item void __fpurge (FILE *@var{stream})

@file{stdio_ext.h} (GNU):  @ref{Flushing Buffers}.

@comment __freadable
@item int __freadable (FILE *@var{stream})

@file{stdio_ext.h} (GNU):  @ref{Opening Streams}.

@comment __freading
@item int __freading (FILE *@var{stream})

@file{stdio_ext.h} (GNU):  @ref{Opening Streams}.

@comment __fsetlocking
@item int __fsetlocking (FILE *@var{stream}, int @var{type})

@file{stdio_ext.h} (GNU):  @ref{Streams and Threads}.

@comment __ftw64_func_t
@item __ftw64_func_t

@file{ftw.h} (GNU):  @ref{Working with Directory Trees}.

@comment __ftw_func_t
@item __ftw_func_t

@file{ftw.h} (GNU):  @ref{Working with Directory Trees}.

@comment __fwritable
@item int __fwritable (FILE *@var{stream})

@file{stdio_ext.h} (GNU):  @ref{Opening Streams}.

@comment __fwriting
@item int __fwriting (FILE *@var{stream})

@file{stdio_ext.h} (GNU):  @ref{Opening Streams}.

@comment __gconv_end_fct
@item void (*__gconv_end_fct) (struct gconv_step *)

@file{gconv.h} (GNU):  @ref{glibc iconv Implementation}.

@comment __gconv_fct
@item int (*__gconv_fct) (struct __gconv_step *, struct __gconv_step_data *, const char **, const char *, size_t *, int)

@file{gconv.h} (GNU):  @ref{glibc iconv Implementation}.

@comment __gconv_init_fct
@item int (*__gconv_init_fct) (struct __gconv_step *)

@file{gconv.h} (GNU):  @ref{glibc iconv Implementation}.

@comment __gconv_step
@item struct __gconv_step

@file{gconv.h} (GNU):  @ref{glibc iconv Implementation}.

@comment __gconv_step_data
@item struct __gconv_step_data

@file{gconv.h} (GNU):  @ref{glibc iconv Implementation}.

@comment __libc_single_threaded
@item char __libc_single_threaded

@file{sys/single_threaded.h} (GNU):  @ref{Single-Threaded}.

@comment __nftw64_func_t
@item __nftw64_func_t

@file{ftw.h} (GNU):  @ref{Working with Directory Trees}.

@comment __nftw_func_t
@item __nftw_func_t

@file{ftw.h} (GNU):  @ref{Working with Directory Trees}.

@comment __va_copy
@item void __va_copy (va_list @var{dest}, va_list @var{src})

@file{stdarg.h} (GNU):  @ref{Argument Macros}.

@comment _exit
@item void _exit (int @var{status})

@file{unistd.h} (POSIX.1):  @ref{Termination Internals}.

@comment _flushlbf
@item void _flushlbf (void)

@file{stdio_ext.h} (GNU):  @ref{Flushing Buffers}.

@comment _tolower
@item int _tolower (int @var{c})

@file{ctype.h} (SVID):  @ref{Case Conversion}.

@comment _toupper
@item int _toupper (int @var{c})

@file{ctype.h} (SVID):  @ref{Case Conversion}.

@comment a64l
@item long int a64l (const char *@var{string})

@file{stdlib.h} (XPG):  @ref{Encode Binary Data}.

@comment abort
@item void abort (void)

@file{stdlib.h} (ISO):  @ref{Aborting a Program}.

@comment abs
@item int abs (int @var{number})

@file{stdlib.h} (ISO):  @ref{Absolute Value}.

@comment accept
@item int accept (int @var{socket}, struct sockaddr *@var{addr}, socklen_t *@var{length_ptr})

@file{sys/socket.h} (BSD):  @ref{Accepting Connections}.

@comment access
@item int access (const char *@var{filename}, int @var{how})

@file{unistd.h} (POSIX.1):  @ref{Testing File Access}.

@comment acos
@item double acos (double @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment acosf
@item float acosf (float @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment acosfN
@item _FloatN acosfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment acosfNx
@item _FloatNx acosfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment acosh
@item double acosh (double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment acoshf
@item float acoshf (float @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment acoshfN
@item _FloatN acoshfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment acoshfNx
@item _FloatNx acoshfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment acoshl
@item long double acoshl (long double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment acosl
@item long double acosl (long double @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment addmntent
@item int addmntent (FILE *@var{stream}, const struct mntent *@var{mnt})

@file{mntent.h} (BSD):  @ref{mtab}.

@comment adjtime
@item int adjtime (const struct timeval *@var{delta}, struct timeval *@var{olddelta})

@file{sys/time.h} (BSD):  @ref{Setting and Adjusting the Time}.

@comment adjtimex
@item int adjtimex (struct timex *@var{timex})

@file{sys/timex.h} (GNU):  @ref{Setting and Adjusting the Time}.

@comment aio_cancel
@item int aio_cancel (int @var{fildes}, struct aiocb *@var{aiocbp})

@file{aio.h} (POSIX.1b):  @ref{Cancel AIO Operations}.

@comment aio_cancel64
@item int aio_cancel64 (int @var{fildes}, struct aiocb64 *@var{aiocbp})

@file{aio.h} (Unix98):  @ref{Cancel AIO Operations}.

@comment aio_error
@item int aio_error (const struct aiocb *@var{aiocbp})

@file{aio.h} (POSIX.1b):  @ref{Status of AIO Operations}.

@comment aio_error64
@item int aio_error64 (const struct aiocb64 *@var{aiocbp})

@file{aio.h} (Unix98):  @ref{Status of AIO Operations}.

@comment aio_fsync
@item int aio_fsync (int @var{op}, struct aiocb *@var{aiocbp})

@file{aio.h} (POSIX.1b):  @ref{Synchronizing AIO Operations}.

@comment aio_fsync64
@item int aio_fsync64 (int @var{op}, struct aiocb64 *@var{aiocbp})

@file{aio.h} (Unix98):  @ref{Synchronizing AIO Operations}.

@comment aio_init
@item void aio_init (const struct aioinit *@var{init})

@file{aio.h} (GNU):  @ref{Configuration of AIO}.

@comment aio_read
@item int aio_read (struct aiocb *@var{aiocbp})

@file{aio.h} (POSIX.1b):  @ref{Asynchronous Reads/Writes}.

@comment aio_read64
@item int aio_read64 (struct aiocb64 *@var{aiocbp})

@file{aio.h} (Unix98):  @ref{Asynchronous Reads/Writes}.

@comment aio_return
@item ssize_t aio_return (struct aiocb *@var{aiocbp})

@file{aio.h} (POSIX.1b):  @ref{Status of AIO Operations}.

@comment aio_return64
@item ssize_t aio_return64 (struct aiocb64 *@var{aiocbp})

@file{aio.h} (Unix98):  @ref{Status of AIO Operations}.

@comment aio_suspend
@item int aio_suspend (const struct aiocb *const @var{list}[], int @var{nent}, const struct timespec *@var{timeout})

@file{aio.h} (POSIX.1b):  @ref{Synchronizing AIO Operations}.

@comment aio_suspend64
@item int aio_suspend64 (const struct aiocb64 *const @var{list}[], int @var{nent}, const struct timespec *@var{timeout})

@file{aio.h} (Unix98):  @ref{Synchronizing AIO Operations}.

@comment aio_write
@item int aio_write (struct aiocb *@var{aiocbp})

@file{aio.h} (POSIX.1b):  @ref{Asynchronous Reads/Writes}.

@comment aio_write64
@item int aio_write64 (struct aiocb64 *@var{aiocbp})

@file{aio.h} (Unix98):  @ref{Asynchronous Reads/Writes}.

@comment aiocb
@item struct aiocb

@file{aio.h} (POSIX.1b):  @ref{Asynchronous I/O}.

@comment aiocb64
@item struct aiocb64

@file{aio.h} (POSIX.1b):  @ref{Asynchronous I/O}.

@comment aioinit
@item struct aioinit

@file{aio.h} (GNU):  @ref{Configuration of AIO}.

@comment alarm
@item unsigned int alarm (unsigned int @var{seconds})

@file{unistd.h} (POSIX.1):  @ref{Setting an Alarm}.

@comment aligned_alloc
@item void * aligned_alloc (size_t @var{alignment}, size_t @var{size})

@file{stdlib.h} (???):  @ref{Aligned Memory Blocks}.

@comment alloca
@item void * alloca (size_t @var{size})

@file{stdlib.h} (GNU):  @ref{Variable Size Automatic}.

@file{stdlib.h} (BSD):  @ref{Variable Size Automatic}.

@comment alphasort
@item int alphasort (const struct dirent **@var{a}, const struct dirent **@var{b})

@file{dirent.h} (BSD):  @ref{Scanning Directory Content}.

@file{dirent.h} (SVID):  @ref{Scanning Directory Content}.

@comment alphasort64
@item int alphasort64 (const struct dirent64 **@var{a}, const struct dirent **@var{b})

@file{dirent.h} (GNU):  @ref{Scanning Directory Content}.

@comment argp
@item struct argp

@file{argp.h} (GNU):  @ref{Argp Parsers}.

@comment argp_child
@item struct argp_child

@file{argp.h} (GNU):  @ref{Argp Children}.

@comment argp_err_exit_status
@item error_t argp_err_exit_status

@file{argp.h} (GNU):  @ref{Argp Global Variables}.

@comment argp_error
@item void argp_error (const struct argp_state *@var{state}, const char *@var{fmt}, @dots{})

@file{argp.h} (GNU):  @ref{Argp Helper Functions}.

@comment argp_failure
@item void argp_failure (const struct argp_state *@var{state}, int @var{status}, int @var{errnum}, const char *@var{fmt}, @dots{})

@file{argp.h} (GNU):  @ref{Argp Helper Functions}.

@comment argp_help
@item void argp_help (const struct argp *@var{argp}, FILE *@var{stream}, unsigned @var{flags}, char *@var{name})

@file{argp.h} (GNU):  @ref{Argp Help}.

@comment argp_option
@item struct argp_option

@file{argp.h} (GNU):  @ref{Argp Option Vectors}.

@comment argp_parse
@item error_t argp_parse (const struct argp *@var{argp}, int @var{argc}, char **@var{argv}, unsigned @var{flags}, int *@var{arg_index}, void *@var{input})

@file{argp.h} (GNU):  @ref{Argp}.

@comment argp_program_bug_address
@item const char * argp_program_bug_address

@file{argp.h} (GNU):  @ref{Argp Global Variables}.

@comment argp_program_version
@item const char * argp_program_version

@file{argp.h} (GNU):  @ref{Argp Global Variables}.

@comment argp_program_version_hook
@item argp_program_version_hook

@file{argp.h} (GNU):  @ref{Argp Global Variables}.

@comment argp_state
@item struct argp_state

@file{argp.h} (GNU):  @ref{Argp Parsing State}.

@comment argp_state_help
@item void argp_state_help (const struct argp_state *@var{state}, FILE *@var{stream}, unsigned @var{flags})

@file{argp.h} (GNU):  @ref{Argp Helper Functions}.

@comment argp_usage
@item void argp_usage (const struct argp_state *@var{state})

@file{argp.h} (GNU):  @ref{Argp Helper Functions}.

@comment argz_add
@item error_t argz_add (char **@var{argz}, size_t *@var{argz_len}, const char *@var{str})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment argz_add_sep
@item error_t argz_add_sep (char **@var{argz}, size_t *@var{argz_len}, const char *@var{str}, int @var{delim})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment argz_append
@item error_t argz_append (char **@var{argz}, size_t *@var{argz_len}, const char *@var{buf}, size_t @var{buf_len})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment argz_count
@item size_t argz_count (const char *@var{argz}, size_t @var{argz_len})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment argz_create
@item error_t argz_create (char *const @var{argv}[], char **@var{argz}, size_t *@var{argz_len})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment argz_create_sep
@item error_t argz_create_sep (const char *@var{string}, int @var{sep}, char **@var{argz}, size_t *@var{argz_len})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment argz_delete
@item void argz_delete (char **@var{argz}, size_t *@var{argz_len}, char *@var{entry})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment argz_extract
@item void argz_extract (const char *@var{argz}, size_t @var{argz_len}, char **@var{argv})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment argz_insert
@item error_t argz_insert (char **@var{argz}, size_t *@var{argz_len}, char *@var{before}, const char *@var{entry})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment argz_next
@item char * argz_next (const char *@var{argz}, size_t @var{argz_len}, const char *@var{entry})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment argz_replace
@item error_t argz_replace (@w{char **@var{argz}, size_t *@var{argz_len}}, @w{const char *@var{str}, const char *@var{with}}, @w{unsigned *@var{replace_count}})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment argz_stringify
@item void argz_stringify (char *@var{argz}, size_t @var{len}, int @var{sep})

@file{argz.h} (GNU):  @ref{Argz Functions}.

@comment asctime
@item char * asctime (const struct tm *@var{brokentime})

@file{time.h} (ISO):  @ref{Formatting Calendar Time}.

@comment asctime_r
@item char * asctime_r (const struct tm *@var{brokentime}, char *@var{buffer})

@file{time.h} (POSIX.1c):  @ref{Formatting Calendar Time}.

@comment asin
@item double asin (double @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment asinf
@item float asinf (float @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment asinfN
@item _FloatN asinfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment asinfNx
@item _FloatNx asinfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment asinh
@item double asinh (double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment asinhf
@item float asinhf (float @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment asinhfN
@item _FloatN asinhfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment asinhfNx
@item _FloatNx asinhfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment asinhl
@item long double asinhl (long double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment asinl
@item long double asinl (long double @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment asprintf
@item int asprintf (char **@var{ptr}, const char *@var{template}, @dots{})

@file{stdio.h} (GNU):  @ref{Dynamic Output}.

@comment assert
@item void assert (int @var{expression})

@file{assert.h} (ISO):  @ref{Consistency Checking}.

@comment assert_perror
@item void assert_perror (int @var{errnum})

@file{assert.h} (GNU):  @ref{Consistency Checking}.

@comment atan
@item double atan (double @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment atan2
@item double atan2 (double @var{y}, double @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment atan2f
@item float atan2f (float @var{y}, float @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment atan2fN
@item _FloatN atan2fN (_Float@var{N} @var{y}, _Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment atan2fNx
@item _FloatNx atan2fNx (_Float@var{N}x @var{y}, _Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment atan2l
@item long double atan2l (long double @var{y}, long double @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment atanf
@item float atanf (float @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment atanfN
@item _FloatN atanfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment atanfNx
@item _FloatNx atanfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment atanh
@item double atanh (double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment atanhf
@item float atanhf (float @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment atanhfN
@item _FloatN atanhfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment atanhfNx
@item _FloatNx atanhfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment atanhl
@item long double atanhl (long double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment atanl
@item long double atanl (long double @var{x})

@file{math.h} (ISO):  @ref{Inverse Trig Functions}.

@comment atexit
@item int atexit (void (*@var{function}) (void))

@file{stdlib.h} (ISO):  @ref{Cleanups on Exit}.

@comment atof
@item double atof (const char *@var{string})

@file{stdlib.h} (ISO):  @ref{Parsing of Floats}.

@comment atoi
@item int atoi (const char *@var{string})

@file{stdlib.h} (ISO):  @ref{Parsing of Integers}.

@comment atol
@item long int atol (const char *@var{string})

@file{stdlib.h} (ISO):  @ref{Parsing of Integers}.

@comment atoll
@item long long int atoll (const char *@var{string})

@file{stdlib.h} (ISO):  @ref{Parsing of Integers}.

@comment backtrace
@item int backtrace (void **@var{buffer}, int @var{size})

@file{execinfo.h} (GNU):  @ref{Backtraces}.

@comment backtrace_symbols
@item char ** backtrace_symbols (void *const *@var{buffer}, int @var{size})

@file{execinfo.h} (GNU):  @ref{Backtraces}.

@comment backtrace_symbols_fd
@item void backtrace_symbols_fd (void *const *@var{buffer}, int @var{size}, int @var{fd})

@file{execinfo.h} (GNU):  @ref{Backtraces}.

@comment basename
@item char * basename (char *@var{path})

@file{libgen.h} (XPG):  @ref{Finding Tokens in a String}.

@comment basename
@item char * basename (const char *@var{filename})

@file{string.h} (GNU):  @ref{Finding Tokens in a String}.

@comment bcmp
@item int bcmp (const void *@var{a1}, const void *@var{a2}, size_t @var{size})

@file{string.h} (BSD):  @ref{String/Array Comparison}.

@comment bcopy
@item void bcopy (const void *@var{from}, void *@var{to}, size_t @var{size})

@file{string.h} (BSD):  @ref{Copying Strings and Arrays}.

@comment bind
@item int bind (int @var{socket}, struct sockaddr *@var{addr}, socklen_t @var{length})

@file{sys/socket.h} (BSD):  @ref{Setting Address}.

@comment bind_textdomain_codeset
@item char * bind_textdomain_codeset (const char *@var{domainname}, const char *@var{codeset})

@file{libintl.h} (GNU):  @ref{Charset conversion in gettext}.

@comment bindtextdomain
@item char * bindtextdomain (const char *@var{domainname}, const char *@var{dirname})

@file{libintl.h} (GNU):  @ref{Locating gettext catalog}.

@comment blkcnt64_t
@item blkcnt64_t

@file{sys/types.h} (Unix98):  @ref{Attribute Meanings}.

@comment blkcnt_t
@item blkcnt_t

@file{sys/types.h} (Unix98):  @ref{Attribute Meanings}.

@comment brk
@item int brk (void *@var{addr})

@file{unistd.h} (BSD):  @ref{Resizing the Data Segment}.

@comment bsearch
@item void * bsearch (const void *@var{key}, const void *@var{array}, size_t @var{count}, size_t @var{size}, comparison_fn_t @var{compare})

@file{stdlib.h} (ISO):  @ref{Array Search Function}.

@comment btowc
@item wint_t btowc (int @var{c})

@file{wchar.h} (ISO):  @ref{Converting a Character}.

@comment bzero
@item void bzero (void *@var{block}, size_t @var{size})

@file{string.h} (BSD):  @ref{Copying Strings and Arrays}.

@comment cabs
@item double cabs (complex double @var{z})

@file{complex.h} (ISO):  @ref{Absolute Value}.

@comment cabsf
@item float cabsf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Absolute Value}.

@comment cabsfN
@item _FloatN cabsfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Absolute Value}.

@comment cabsfNx
@item _FloatNx cabsfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Absolute Value}.

@comment cabsl
@item long double cabsl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Absolute Value}.

@comment cacos
@item complex double cacos (complex double @var{z})

@file{complex.h} (ISO):  @ref{Inverse Trig Functions}.

@comment cacosf
@item complex float cacosf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Inverse Trig Functions}.

@comment cacosfN
@item complex _FloatN cacosfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment cacosfNx
@item complex _FloatNx cacosfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment cacosh
@item complex double cacosh (complex double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment cacoshf
@item complex float cacoshf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment cacoshfN
@item complex _FloatN cacoshfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment cacoshfNx
@item complex _FloatNx cacoshfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment cacoshl
@item complex long double cacoshl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment cacosl
@item complex long double cacosl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Inverse Trig Functions}.

@comment call_once
@item void call_once (once_flag *@var{flag}, void (*@var{func}) (void))

@file{threads.h} (C11):  @ref{Call Once}.

@comment calloc
@item void * calloc (size_t @var{count}, size_t @var{eltsize})

@file{malloc.h} (ISO):  @ref{Allocating Cleared Space}.

@file{stdlib.h} (ISO):  @ref{Allocating Cleared Space}.

@comment canonicalize
@item int canonicalize (double *@var{cx}, const double *@var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment canonicalize_file_name
@item char * canonicalize_file_name (const char *@var{name})

@file{stdlib.h} (GNU):  @ref{Symbolic Links}.

@comment canonicalizef
@item int canonicalizef (float *@var{cx}, const float *@var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment canonicalizefN
@item int canonicalizefN (_Float@var{N} *@var{cx}, const _Float@var{N} *@var{x})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment canonicalizefNx
@item int canonicalizefNx (_Float@var{N}x *@var{cx}, const _Float@var{N}x *@var{x})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment canonicalizel
@item int canonicalizel (long double *@var{cx}, const long double *@var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment carg
@item double carg (complex double @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment cargf
@item float cargf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment cargfN
@item _FloatN cargfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Operations on Complex}.

@comment cargfNx
@item _FloatNx cargfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Operations on Complex}.

@comment cargl
@item long double cargl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment casin
@item complex double casin (complex double @var{z})

@file{complex.h} (ISO):  @ref{Inverse Trig Functions}.

@comment casinf
@item complex float casinf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Inverse Trig Functions}.

@comment casinfN
@item complex _FloatN casinfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment casinfNx
@item complex _FloatNx casinfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment casinh
@item complex double casinh (complex double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment casinhf
@item complex float casinhf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment casinhfN
@item complex _FloatN casinhfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment casinhfNx
@item complex _FloatNx casinhfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment casinhl
@item complex long double casinhl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment casinl
@item complex long double casinl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Inverse Trig Functions}.

@comment catan
@item complex double catan (complex double @var{z})

@file{complex.h} (ISO):  @ref{Inverse Trig Functions}.

@comment catanf
@item complex float catanf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Inverse Trig Functions}.

@comment catanfN
@item complex _FloatN catanfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment catanfNx
@item complex _FloatNx catanfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Inverse Trig Functions}.

@comment catanh
@item complex double catanh (complex double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment catanhf
@item complex float catanhf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment catanhfN
@item complex _FloatN catanhfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment catanhfNx
@item complex _FloatNx catanhfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment catanhl
@item complex long double catanhl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment catanl
@item complex long double catanl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Inverse Trig Functions}.

@comment catopen
@item nl_catd catopen (const char *@var{cat_name}, int @var{flag})

@file{nl_types.h} (X/Open):  @ref{The catgets Functions}.

@comment cbrt
@item double cbrt (double @var{x})

@file{math.h} (BSD):  @ref{Exponents and Logarithms}.

@comment cbrtf
@item float cbrtf (float @var{x})

@file{math.h} (BSD):  @ref{Exponents and Logarithms}.

@comment cbrtfN
@item _FloatN cbrtfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment cbrtfNx
@item _FloatNx cbrtfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment cbrtl
@item long double cbrtl (long double @var{x})

@file{math.h} (BSD):  @ref{Exponents and Logarithms}.

@comment cc_t
@item cc_t

@file{termios.h} (POSIX.1):  @ref{Mode Data Types}.

@comment ccos
@item complex double ccos (complex double @var{z})

@file{complex.h} (ISO):  @ref{Trig Functions}.

@comment ccosf
@item complex float ccosf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Trig Functions}.

@comment ccosfN
@item complex _FloatN ccosfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment ccosfNx
@item complex _FloatNx ccosfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment ccosh
@item complex double ccosh (complex double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment ccoshf
@item complex float ccoshf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment ccoshfN
@item complex _FloatN ccoshfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment ccoshfNx
@item complex _FloatNx ccoshfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment ccoshl
@item complex long double ccoshl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment ccosl
@item complex long double ccosl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Trig Functions}.

@comment ceil
@item double ceil (double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment ceilf
@item float ceilf (float @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment ceilfN
@item _FloatN ceilfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment ceilfNx
@item _FloatNx ceilfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment ceill
@item long double ceill (long double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment cexp
@item complex double cexp (complex double @var{z})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment cexpf
@item complex float cexpf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment cexpfN
@item complex _FloatN cexpfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment cexpfNx
@item complex _FloatNx cexpfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment cexpl
@item complex long double cexpl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment cfgetispeed
@item speed_t cfgetispeed (const struct termios *@var{termios-p})

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment cfgetospeed
@item speed_t cfgetospeed (const struct termios *@var{termios-p})

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment cfmakeraw
@item void cfmakeraw (struct termios *@var{termios-p})

@file{termios.h} (BSD):  @ref{Noncanonical Input}.

@comment cfsetispeed
@item int cfsetispeed (struct termios *@var{termios-p}, speed_t @var{speed})

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment cfsetospeed
@item int cfsetospeed (struct termios *@var{termios-p}, speed_t @var{speed})

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment cfsetspeed
@item int cfsetspeed (struct termios *@var{termios-p}, speed_t @var{speed})

@file{termios.h} (BSD):  @ref{Line Speed}.

@comment chdir
@item int chdir (const char *@var{filename})

@file{unistd.h} (POSIX.1):  @ref{Working Directory}.

@comment chmod
@item int chmod (const char *@var{filename}, mode_t @var{mode})

@file{sys/stat.h} (POSIX.1):  @ref{Setting Permissions}.

@comment chown
@item int chown (const char *@var{filename}, uid_t @var{owner}, gid_t @var{group})

@file{unistd.h} (POSIX.1):  @ref{File Owner}.

@comment cimag
@item double cimag (complex double @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment cimagf
@item float cimagf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment cimagfN
@item _FloatN cimagfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Operations on Complex}.

@comment cimagfNx
@item _FloatNx cimagfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Operations on Complex}.

@comment cimagl
@item long double cimagl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment clearenv
@item int clearenv (void)

@file{stdlib.h} (GNU):  @ref{Environment Access}.

@comment clearerr
@item void clearerr (FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Error Recovery}.

@comment clearerr_unlocked
@item void clearerr_unlocked (FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{Error Recovery}.

@comment clock
@item clock_t clock (void)

@file{time.h} (ISO):  @ref{CPU Time}.

@comment clock_getres
@item int clock_getres (clockid_t @var{clock}, struct timespec *@var{res})

@file{time.h} (POSIX.1):  @ref{Getting the Time}.

@comment clock_gettime
@item int clock_gettime (clockid_t @var{clock}, struct timespec *@var{ts})

@file{time.h} (POSIX.1):  @ref{Getting the Time}.

@comment clock_settime
@item int clock_settime (clockid_t @var{clock}, const struct timespec *@var{ts})

@file{time.h} (POSIX):  @ref{Setting and Adjusting the Time}.

@comment clock_t
@item clock_t

@file{time.h} (ISO):  @ref{Time Types}.

@comment clockid_t
@item clockid_t

@file{time.h} (POSIX.1):  @ref{Getting the Time}.

@comment clog
@item complex double clog (complex double @var{z})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment clog10
@item complex double clog10 (complex double @var{z})

@file{complex.h} (GNU):  @ref{Exponents and Logarithms}.

@comment clog10f
@item complex float clog10f (complex float @var{z})

@file{complex.h} (GNU):  @ref{Exponents and Logarithms}.

@comment clog10fN
@item complex _FloatN clog10fN (complex _Float@var{N} @var{z})

@file{complex.h} (GNU):  @ref{Exponents and Logarithms}.

@comment clog10fNx
@item complex _FloatNx clog10fNx (complex _Float@var{N}x @var{z})

@file{complex.h} (GNU):  @ref{Exponents and Logarithms}.

@comment clog10l
@item complex long double clog10l (complex long double @var{z})

@file{complex.h} (GNU):  @ref{Exponents and Logarithms}.

@comment clogf
@item complex float clogf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment clogfN
@item complex _FloatN clogfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment clogfNx
@item complex _FloatNx clogfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment clogl
@item complex long double clogl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment close
@item int close (int @var{filedes})

@file{unistd.h} (POSIX.1):  @ref{Opening and Closing Files}.

@comment close_range
@item int close_range (unsigned int @var{lowfd}, unsigned int @var{maxfd}, int @var{flags})

@file{unistd.h} (Linux):  @ref{Opening and Closing Files}.

@comment closedir
@item int closedir (DIR *@var{dirstream})

@file{dirent.h} (POSIX.1):  @ref{Reading/Closing Directory}.

@comment closefrom
@item void closefrom (int @var{lowfd})

@file{unistd.h} (GNU):  @ref{Opening and Closing Files}.

@comment closelog
@item void closelog (void)

@file{syslog.h} (BSD):  @ref{closelog}.

@comment cnd_broadcast
@item int cnd_broadcast (cnd_t *@var{cond})

@file{threads.h} (C11):  @ref{ISO C Condition Variables}.

@comment cnd_destroy
@item void cnd_destroy (cnd_t *@var{cond})

@file{threads.h} (C11):  @ref{ISO C Condition Variables}.

@comment cnd_init
@item int cnd_init (cnd_t *@var{cond})

@file{threads.h} (C11):  @ref{ISO C Condition Variables}.

@comment cnd_signal
@item int cnd_signal (cnd_t *@var{cond})

@file{threads.h} (C11):  @ref{ISO C Condition Variables}.

@comment cnd_t
@item cnd_t

@file{threads.h} (C11):  @ref{ISO C Condition Variables}.

@comment cnd_timedwait
@item int cnd_timedwait (cnd_t *restrict @var{cond}, mtx_t *restrict @var{mutex}, const struct timespec *restrict @var{time_point})

@file{threads.h} (C11):  @ref{ISO C Condition Variables}.

@comment cnd_wait
@item int cnd_wait (cnd_t *@var{cond}, mtx_t *@var{mutex})

@file{threads.h} (C11):  @ref{ISO C Condition Variables}.

@comment confstr
@item size_t confstr (int @var{parameter}, char *@var{buf}, size_t @var{len})

@file{unistd.h} (POSIX.2):  @ref{String Parameters}.

@comment conj
@item complex double conj (complex double @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment conjf
@item complex float conjf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment conjfN
@item complex _FloatN conjfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Operations on Complex}.

@comment conjfNx
@item complex _FloatNx conjfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Operations on Complex}.

@comment conjl
@item complex long double conjl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment connect
@item int connect (int @var{socket}, struct sockaddr *@var{addr}, socklen_t @var{length})

@file{sys/socket.h} (BSD):  @ref{Connecting}.

@comment cookie_close_function_t
@item cookie_close_function_t

@file{stdio.h} (GNU):  @ref{Hook Functions}.

@comment cookie_io_functions_t
@item cookie_io_functions_t

@file{stdio.h} (GNU):  @ref{Streams and Cookies}.

@comment cookie_read_function_t
@item cookie_read_function_t

@file{stdio.h} (GNU):  @ref{Hook Functions}.

@comment cookie_seek_function_t
@item cookie_seek_function_t

@file{stdio.h} (GNU):  @ref{Hook Functions}.

@comment cookie_write_function_t
@item cookie_write_function_t

@file{stdio.h} (GNU):  @ref{Hook Functions}.

@comment copy_file_range
@item ssize_t copy_file_range (int @var{inputfd}, off64_t *@var{inputpos}, int @var{outputfd}, off64_t *@var{outputpos}, ssize_t @var{length}, unsigned int @var{flags})

@file{unistd.h} (GNU):  @ref{Copying File Data}.

@comment copysign
@item double copysign (double @var{x}, double @var{y})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment copysignf
@item float copysignf (float @var{x}, float @var{y})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment copysignfN
@item _FloatN copysignfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment copysignfNx
@item _FloatNx copysignfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment copysignl
@item long double copysignl (long double @var{x}, long double @var{y})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment cos
@item double cos (double @var{x})

@file{math.h} (ISO):  @ref{Trig Functions}.

@comment cosf
@item float cosf (float @var{x})

@file{math.h} (ISO):  @ref{Trig Functions}.

@comment cosfN
@item _FloatN cosfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment cosfNx
@item _FloatNx cosfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment cosh
@item double cosh (double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment coshf
@item float coshf (float @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment coshfN
@item _FloatN coshfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment coshfNx
@item _FloatNx coshfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment coshl
@item long double coshl (long double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment cosl
@item long double cosl (long double @var{x})

@file{math.h} (ISO):  @ref{Trig Functions}.

@comment cpow
@item complex double cpow (complex double @var{base}, complex double @var{power})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment cpowf
@item complex float cpowf (complex float @var{base}, complex float @var{power})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment cpowfN
@item complex _FloatN cpowfN (complex _Float@var{N} @var{base}, complex _Float@var{N} @var{power})

@file{complex.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment cpowfNx
@item complex _FloatNx cpowfNx (complex _Float@var{N}x @var{base}, complex _Float@var{N}x @var{power})

@file{complex.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment cpowl
@item complex long double cpowl (complex long double @var{base}, complex long double @var{power})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment cproj
@item complex double cproj (complex double @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment cprojf
@item complex float cprojf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment cprojfN
@item complex _FloatN cprojfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Operations on Complex}.

@comment cprojfNx
@item complex _FloatNx cprojfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Operations on Complex}.

@comment cprojl
@item complex long double cprojl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment cpu_set_t
@item cpu_set_t

@file{sched.h} (GNU):  @ref{CPU Affinity}.

@comment creal
@item double creal (complex double @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment crealf
@item float crealf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment crealfN
@item _FloatN crealfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Operations on Complex}.

@comment crealfNx
@item _FloatNx crealfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Operations on Complex}.

@comment creall
@item long double creall (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Operations on Complex}.

@comment creat
@item int creat (const char *@var{filename}, mode_t @var{mode})

@file{fcntl.h} (POSIX.1):  @ref{Opening and Closing Files}.

@comment creat64
@item int creat64 (const char *@var{filename}, mode_t @var{mode})

@file{fcntl.h} (Unix98):  @ref{Opening and Closing Files}.

@comment crypt
@item char * crypt (const char *@var{phrase}, const char *@var{salt})

@file{unistd.h} (X/Open):  @ref{Passphrase Storage}.

@file{crypt.h} (GNU):  @ref{Passphrase Storage}.

@comment crypt_r
@item char * crypt_r (const char *@var{phrase}, const char *@var{salt}, struct crypt_data *@var{data})

@file{crypt.h} (GNU):  @ref{Passphrase Storage}.

@comment csin
@item complex double csin (complex double @var{z})

@file{complex.h} (ISO):  @ref{Trig Functions}.

@comment csinf
@item complex float csinf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Trig Functions}.

@comment csinfN
@item complex _FloatN csinfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment csinfNx
@item complex _FloatNx csinfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment csinh
@item complex double csinh (complex double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment csinhf
@item complex float csinhf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment csinhfN
@item complex _FloatN csinhfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment csinhfNx
@item complex _FloatNx csinhfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment csinhl
@item complex long double csinhl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment csinl
@item complex long double csinl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Trig Functions}.

@comment csqrt
@item complex double csqrt (complex double @var{z})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment csqrtf
@item complex float csqrtf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment csqrtfN
@item complex _FloatN csqrtfN (_Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment csqrtfNx
@item complex _FloatNx csqrtfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment csqrtl
@item complex long double csqrtl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Exponents and Logarithms}.

@comment ctan
@item complex double ctan (complex double @var{z})

@file{complex.h} (ISO):  @ref{Trig Functions}.

@comment ctanf
@item complex float ctanf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Trig Functions}.

@comment ctanfN
@item complex _FloatN ctanfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment ctanfNx
@item complex _FloatNx ctanfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment ctanh
@item complex double ctanh (complex double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment ctanhf
@item complex float ctanhf (complex float @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment ctanhfN
@item complex _FloatN ctanhfN (complex _Float@var{N} @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment ctanhfNx
@item complex _FloatNx ctanhfNx (complex _Float@var{N}x @var{z})

@file{complex.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment ctanhl
@item complex long double ctanhl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Hyperbolic Functions}.

@comment ctanl
@item complex long double ctanl (complex long double @var{z})

@file{complex.h} (ISO):  @ref{Trig Functions}.

@comment ctermid
@item char * ctermid (char *@var{string})

@file{stdio.h} (POSIX.1):  @ref{Identifying the Terminal}.

@comment ctime
@item char * ctime (const time_t *@var{time})

@file{time.h} (ISO):  @ref{Formatting Calendar Time}.

@comment ctime_r
@item char * ctime_r (const time_t *@var{time}, char *@var{buffer})

@file{time.h} (POSIX.1c):  @ref{Formatting Calendar Time}.

@comment cuserid
@item char * cuserid (char *@var{string})

@file{stdio.h} (POSIX.1):  @ref{Who Logged In}.

@comment daddl
@item double daddl (long double @var{x}, long double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment daylight
@item int daylight

@file{time.h} (SVID):  @ref{Time Zone Functions}.

@comment dcgettext
@item char * dcgettext (const char *@var{domainname}, const char *@var{msgid}, int @var{category})

@file{libintl.h} (GNU):  @ref{Translation with gettext}.

@comment dcngettext
@item char * dcngettext (const char *@var{domain}, const char *@var{msgid1}, const char *@var{msgid2}, unsigned long int @var{n}, int @var{category})

@file{libintl.h} (GNU):  @ref{Advanced gettext functions}.

@comment ddivl
@item double ddivl (long double @var{x}, long double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment dev_t
@item dev_t

@file{sys/types.h} (POSIX.1):  @ref{Attribute Meanings}.

@comment dgettext
@item char * dgettext (const char *@var{domainname}, const char *@var{msgid})

@file{libintl.h} (GNU):  @ref{Translation with gettext}.

@comment difftime
@item double difftime (time_t @var{end}, time_t @var{begin})

@file{time.h} (ISO):  @ref{Calculating Elapsed Time}.

@comment dirent
@item struct dirent

@file{dirent.h} (POSIX.1):  @ref{Directory Entries}.

@comment dirfd
@item int dirfd (DIR *@var{dirstream})

@file{dirent.h} (GNU):  @ref{Opening a Directory}.

@comment dirname
@item char * dirname (char *@var{path})

@file{libgen.h} (XPG):  @ref{Finding Tokens in a String}.

@comment div
@item div_t div (int @var{numerator}, int @var{denominator})

@file{stdlib.h} (ISO):  @ref{Integer Division}.

@comment div_t
@item div_t

@file{stdlib.h} (ISO):  @ref{Integer Division}.

@comment dmull
@item double dmull (long double @var{x}, long double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment dngettext
@item char * dngettext (const char *@var{domain}, const char *@var{msgid1}, const char *@var{msgid2}, unsigned long int @var{n})

@file{libintl.h} (GNU):  @ref{Advanced gettext functions}.

@comment drand48
@item double drand48 (void)

@file{stdlib.h} (SVID):  @ref{SVID Random}.

@comment drand48_r
@item int drand48_r (struct drand48_data *@var{buffer}, double *@var{result})

@file{stdlib.h} (GNU):  @ref{SVID Random}.

@comment drem
@item double drem (double @var{numerator}, double @var{denominator})

@file{math.h} (BSD):  @ref{Remainder Functions}.

@comment dremf
@item float dremf (float @var{numerator}, float @var{denominator})

@file{math.h} (BSD):  @ref{Remainder Functions}.

@comment dreml
@item long double dreml (long double @var{numerator}, long double @var{denominator})

@file{math.h} (BSD):  @ref{Remainder Functions}.

@comment dsubl
@item double dsubl (long double @var{x}, long double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment dup
@item int dup (int @var{old})

@file{unistd.h} (POSIX.1):  @ref{Duplicating Descriptors}.

@comment dup2
@item int dup2 (int @var{old}, int @var{new})

@file{unistd.h} (POSIX.1):  @ref{Duplicating Descriptors}.

@comment ecvt
@item char * ecvt (double @var{value}, int @var{ndigit}, int *@var{decpt}, int *@var{neg})

@file{stdlib.h} (SVID):  @ref{System V Number Conversion}.

@file{stdlib.h} (Unix98):  @ref{System V Number Conversion}.

@comment ecvt_r
@item int ecvt_r (double @var{value}, int @var{ndigit}, int *@var{decpt}, int *@var{neg}, char *@var{buf}, size_t @var{len})

@file{stdlib.h} (GNU):  @ref{System V Number Conversion}.

@comment endfsent
@item void endfsent (void)

@file{fstab.h} (BSD):  @ref{fstab}.

@comment endgrent
@item void endgrent (void)

@file{grp.h} (SVID):  @ref{Scanning All Groups}.

@file{grp.h} (BSD):  @ref{Scanning All Groups}.

@comment endhostent
@item void endhostent (void)

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment endmntent
@item int endmntent (FILE *@var{stream})

@file{mntent.h} (BSD):  @ref{mtab}.

@comment endnetent
@item void endnetent (void)

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment endnetgrent
@item void endnetgrent (void)

@file{netdb.h} (BSD):  @ref{Lookup Netgroup}.

@comment endprotoent
@item void endprotoent (void)

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment endpwent
@item void endpwent (void)

@file{pwd.h} (SVID):  @ref{Scanning All Users}.

@file{pwd.h} (BSD):  @ref{Scanning All Users}.

@comment endservent
@item void endservent (void)

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment endutent
@item void endutent (void)

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@comment endutxent
@item void endutxent (void)

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment environ
@item char ** environ

@file{unistd.h} (POSIX.1):  @ref{Environment Access}.

@comment envz_add
@item error_t envz_add (char **@var{envz}, size_t *@var{envz_len}, const char *@var{name}, const char *@var{value})

@file{envz.h} (GNU):  @ref{Envz Functions}.

@comment envz_entry
@item char * envz_entry (const char *@var{envz}, size_t @var{envz_len}, const char *@var{name})

@file{envz.h} (GNU):  @ref{Envz Functions}.

@comment envz_get
@item char * envz_get (const char *@var{envz}, size_t @var{envz_len}, const char *@var{name})

@file{envz.h} (GNU):  @ref{Envz Functions}.

@comment envz_merge
@item error_t envz_merge (char **@var{envz}, size_t *@var{envz_len}, const char *@var{envz2}, size_t @var{envz2_len}, int @var{override})

@file{envz.h} (GNU):  @ref{Envz Functions}.

@comment envz_remove
@item void envz_remove (char **@var{envz}, size_t *@var{envz_len}, const char *@var{name})

@file{envz.h} (GNU):  @ref{Envz Functions}.

@comment envz_strip
@item void envz_strip (char **@var{envz}, size_t *@var{envz_len})

@file{envz.h} (GNU):  @ref{Envz Functions}.

@comment erand48
@item double erand48 (unsigned short int @var{xsubi}[3])

@file{stdlib.h} (SVID):  @ref{SVID Random}.

@comment erand48_r
@item int erand48_r (unsigned short int @var{xsubi}[3], struct drand48_data *@var{buffer}, double *@var{result})

@file{stdlib.h} (GNU):  @ref{SVID Random}.

@comment erf
@item double erf (double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment erfc
@item double erfc (double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment erfcf
@item float erfcf (float @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment erfcfN
@item _FloatN erfcfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Special Functions}.

@comment erfcfNx
@item _FloatNx erfcfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Special Functions}.

@comment erfcl
@item long double erfcl (long double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment erff
@item float erff (float @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment erffN
@item _FloatN erffN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Special Functions}.

@comment erffNx
@item _FloatNx erffNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Special Functions}.

@comment erfl
@item long double erfl (long double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment err
@item void err (int @var{status}, const char *@var{format}, @dots{})

@file{err.h} (BSD):  @ref{Error Messages}.

@comment errno
@item volatile int errno

@file{errno.h} (ISO):  @ref{Checking for Errors}.

@comment error
@item void error (int @var{status}, int @var{errnum}, const char *@var{format}, @dots{})

@file{error.h} (GNU):  @ref{Error Messages}.

@comment error_at_line
@item void error_at_line (int @var{status}, int @var{errnum}, const char *@var{fname}, unsigned int @var{lineno}, const char *@var{format}, @dots{})

@file{error.h} (GNU):  @ref{Error Messages}.

@comment error_message_count
@item unsigned int error_message_count

@file{error.h} (GNU):  @ref{Error Messages}.

@comment error_one_per_line
@item int error_one_per_line

@file{error.h} (GNU):  @ref{Error Messages}.

@comment error_print_progname
@item void (*error_print_progname) (void)

@file{error.h} (GNU):  @ref{Error Messages}.

@comment errx
@item void errx (int @var{status}, const char *@var{format}, @dots{})

@file{err.h} (BSD):  @ref{Error Messages}.

@comment execl
@item int execl (const char *@var{filename}, const char *@var{arg0}, @dots{})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment execle
@item int execle (const char *@var{filename}, const char *@var{arg0}, @dots{}, char *const @var{env}@t{[]})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment execlp
@item int execlp (const char *@var{filename}, const char *@var{arg0}, @dots{})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment execv
@item int execv (const char *@var{filename}, char *const @var{argv}@t{[]})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment execve
@item int execve (const char *@var{filename}, char *const @var{argv}@t{[]}, char *const @var{env}@t{[]})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment execvp
@item int execvp (const char *@var{filename}, char *const @var{argv}@t{[]})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment exit
@item void exit (int @var{status})

@file{stdlib.h} (ISO):  @ref{Normal Termination}.

@comment exit_status
@item struct exit_status

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@comment exp
@item double exp (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment exp10
@item double exp10 (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment exp10f
@item float exp10f (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment exp10fN
@item _FloatN exp10fN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-4:2015):  @ref{Exponents and Logarithms}.

@comment exp10fNx
@item _FloatNx exp10fNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-4:2015):  @ref{Exponents and Logarithms}.

@comment exp10l
@item long double exp10l (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment exp2
@item double exp2 (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment exp2f
@item float exp2f (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment exp2fN
@item _FloatN exp2fN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment exp2fNx
@item _FloatNx exp2fNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment exp2l
@item long double exp2l (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment expf
@item float expf (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment expfN
@item _FloatN expfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment expfNx
@item _FloatNx expfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment expl
@item long double expl (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment explicit_bzero
@item void explicit_bzero (void *@var{block}, size_t @var{len})

@file{string.h} (BSD):  @ref{Erasing Sensitive Data}.

@comment expm1
@item double expm1 (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment expm1f
@item float expm1f (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment expm1fN
@item _FloatN expm1fN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment expm1fNx
@item _FloatNx expm1fNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment expm1l
@item long double expm1l (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment fMaddfN
@item _FloatM fMaddfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMaddfNx
@item _FloatM fMaddfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMdivfN
@item _FloatM fMdivfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMdivfNx
@item _FloatM fMdivfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMmulfN
@item _FloatM fMmulfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMmulfNx
@item _FloatM fMmulfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMsubfN
@item _FloatM fMsubfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMsubfNx
@item _FloatM fMsubfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMxaddfN
@item _FloatMx fMxaddfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMxaddfNx
@item _FloatMx fMxaddfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMxdivfN
@item _FloatMx fMxdivfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMxdivfNx
@item _FloatMx fMxdivfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMxmulfN
@item _FloatMx fMxmulfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMxmulfNx
@item _FloatMx fMxmulfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMxsubfN
@item _FloatMx fMxsubfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fMxsubfNx
@item _FloatMx fMxsubfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fabs
@item double fabs (double @var{number})

@file{math.h} (ISO):  @ref{Absolute Value}.

@comment fabsf
@item float fabsf (float @var{number})

@file{math.h} (ISO):  @ref{Absolute Value}.

@comment fabsfN
@item _FloatN fabsfN (_Float@var{N} @var{number})

@file{math.h} (TS 18661-3:2015):  @ref{Absolute Value}.

@comment fabsfNx
@item _FloatNx fabsfNx (_Float@var{N}x @var{number})

@file{math.h} (TS 18661-3:2015):  @ref{Absolute Value}.

@comment fabsl
@item long double fabsl (long double @var{number})

@file{math.h} (ISO):  @ref{Absolute Value}.

@comment fadd
@item float fadd (double @var{x}, double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment faddl
@item float faddl (long double @var{x}, long double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment fchdir
@item int fchdir (int @var{filedes})

@file{unistd.h} (XPG):  @ref{Working Directory}.

@comment fchmod
@item int fchmod (int @var{filedes}, mode_t @var{mode})

@file{sys/stat.h} (BSD):  @ref{Setting Permissions}.

@comment fchown
@item int fchown (int @var{filedes}, uid_t @var{owner}, gid_t @var{group})

@file{unistd.h} (BSD):  @ref{File Owner}.

@comment fclose
@item int fclose (FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Closing Streams}.

@comment fcloseall
@item int fcloseall (void)

@file{stdio.h} (GNU):  @ref{Closing Streams}.

@comment fcntl
@item int fcntl (int @var{filedes}, int @var{command}, @dots{})

@file{fcntl.h} (POSIX.1):  @ref{Control Operations}.

@comment fcvt
@item char * fcvt (double @var{value}, int @var{ndigit}, int *@var{decpt}, int *@var{neg})

@file{stdlib.h} (SVID):  @ref{System V Number Conversion}.

@file{stdlib.h} (Unix98):  @ref{System V Number Conversion}.

@comment fcvt_r
@item int fcvt_r (double @var{value}, int @var{ndigit}, int *@var{decpt}, int *@var{neg}, char *@var{buf}, size_t @var{len})

@file{stdlib.h} (SVID):  @ref{System V Number Conversion}.

@file{stdlib.h} (Unix98):  @ref{System V Number Conversion}.

@comment fd_set
@item fd_set

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment fdatasync
@item int fdatasync (int @var{fildes})

@file{unistd.h} (POSIX):  @ref{Synchronizing I/O}.

@comment fdim
@item double fdim (double @var{x}, double @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fdimf
@item float fdimf (float @var{x}, float @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fdimfN
@item _FloatN fdimfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fdimfNx
@item _FloatNx fdimfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fdiml
@item long double fdiml (long double @var{x}, long double @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fdiv
@item float fdiv (double @var{x}, double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment fdivl
@item float fdivl (long double @var{x}, long double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment fdopen
@item FILE * fdopen (int @var{filedes}, const char *@var{opentype})

@file{stdio.h} (POSIX.1):  @ref{Descriptors and Streams}.

@comment fdopendir
@item DIR * fdopendir (int @var{fd})

@file{dirent.h} (GNU):  @ref{Opening a Directory}.

@comment feclearexcept
@item int feclearexcept (int @var{excepts})

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment fedisableexcept
@item int fedisableexcept (int @var{excepts})

@file{fenv.h} (GNU):  @ref{Control Functions}.

@comment feenableexcept
@item int feenableexcept (int @var{excepts})

@file{fenv.h} (GNU):  @ref{Control Functions}.

@comment fegetenv
@item int fegetenv (fenv_t *@var{envp})

@file{fenv.h} (ISO):  @ref{Control Functions}.

@comment fegetexcept
@item int fegetexcept (void)

@file{fenv.h} (GNU):  @ref{Control Functions}.

@comment fegetexceptflag
@item int fegetexceptflag (fexcept_t *@var{flagp}, int @var{excepts})

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment fegetmode
@item int fegetmode (femode_t *@var{modep})

@file{fenv.h} (ISO):  @ref{Control Functions}.

@comment fegetround
@item int fegetround (void)

@file{fenv.h} (ISO):  @ref{Rounding}.

@comment feholdexcept
@item int feholdexcept (fenv_t *@var{envp})

@file{fenv.h} (ISO):  @ref{Control Functions}.

@comment feof
@item int feof (FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{EOF and Errors}.

@comment feof_unlocked
@item int feof_unlocked (FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{EOF and Errors}.

@comment feraiseexcept
@item int feraiseexcept (int @var{excepts})

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment ferror
@item int ferror (FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{EOF and Errors}.

@comment ferror_unlocked
@item int ferror_unlocked (FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{EOF and Errors}.

@comment fesetenv
@item int fesetenv (const fenv_t *@var{envp})

@file{fenv.h} (ISO):  @ref{Control Functions}.

@comment fesetexcept
@item int fesetexcept (int @var{excepts})

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment fesetexceptflag
@item int fesetexceptflag (const fexcept_t *@var{flagp}, int @var{excepts})

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment fesetmode
@item int fesetmode (const femode_t *@var{modep})

@file{fenv.h} (ISO):  @ref{Control Functions}.

@comment fesetround
@item int fesetround (int @var{round})

@file{fenv.h} (ISO):  @ref{Rounding}.

@comment fetestexcept
@item int fetestexcept (int @var{excepts})

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment fetestexceptflag
@item int fetestexceptflag (const fexcept_t *@var{flagp}, int @var{excepts})

@file{fenv.h} (ISO):  @ref{Status bit operations}.

@comment feupdateenv
@item int feupdateenv (const fenv_t *@var{envp})

@file{fenv.h} (ISO):  @ref{Control Functions}.

@comment fexecve
@item int fexecve (int @var{fd}, char *const @var{argv}@t{[]}, char *const @var{env}@t{[]})

@file{unistd.h} (POSIX.1):  @ref{Executing a File}.

@comment fflush
@item int fflush (FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Flushing Buffers}.

@comment fflush_unlocked
@item int fflush_unlocked (FILE *@var{stream})

@file{stdio.h} (POSIX):  @ref{Flushing Buffers}.

@comment fgetc
@item int fgetc (FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Character Input}.

@comment fgetc_unlocked
@item int fgetc_unlocked (FILE *@var{stream})

@file{stdio.h} (POSIX):  @ref{Character Input}.

@comment fgetgrent
@item struct group * fgetgrent (FILE *@var{stream})

@file{grp.h} (SVID):  @ref{Scanning All Groups}.

@comment fgetgrent_r
@item int fgetgrent_r (FILE *@var{stream}, struct group *@var{result_buf}, char *@var{buffer}, size_t @var{buflen}, struct group **@var{result})

@file{grp.h} (GNU):  @ref{Scanning All Groups}.

@comment fgetpos
@item int fgetpos (FILE *@var{stream}, fpos_t *@var{position})

@file{stdio.h} (ISO):  @ref{Portable Positioning}.

@comment fgetpos64
@item int fgetpos64 (FILE *@var{stream}, fpos64_t *@var{position})

@file{stdio.h} (Unix98):  @ref{Portable Positioning}.

@comment fgetpwent
@item struct passwd * fgetpwent (FILE *@var{stream})

@file{pwd.h} (SVID):  @ref{Scanning All Users}.

@comment fgetpwent_r
@item int fgetpwent_r (FILE *@var{stream}, struct passwd *@var{result_buf}, char *@var{buffer}, size_t @var{buflen}, struct passwd **@var{result})

@file{pwd.h} (GNU):  @ref{Scanning All Users}.

@comment fgets
@item char * fgets (char *@var{s}, int @var{count}, FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Line Input}.

@comment fgets_unlocked
@item char * fgets_unlocked (char *@var{s}, int @var{count}, FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{Line Input}.

@comment fgetwc
@item wint_t fgetwc (FILE *@var{stream})

@file{wchar.h} (ISO):  @ref{Character Input}.

@comment fgetwc_unlocked
@item wint_t fgetwc_unlocked (FILE *@var{stream})

@file{wchar.h} (GNU):  @ref{Character Input}.

@comment fgetws
@item wchar_t * fgetws (wchar_t *@var{ws}, int @var{count}, FILE *@var{stream})

@file{wchar.h} (ISO):  @ref{Line Input}.

@comment fgetws_unlocked
@item wchar_t * fgetws_unlocked (wchar_t *@var{ws}, int @var{count}, FILE *@var{stream})

@file{wchar.h} (GNU):  @ref{Line Input}.

@comment fileno
@item int fileno (FILE *@var{stream})

@file{stdio.h} (POSIX.1):  @ref{Descriptors and Streams}.

@comment fileno_unlocked
@item int fileno_unlocked (FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{Descriptors and Streams}.

@comment finite
@item int finite (double @var{x})

@file{math.h} (BSD):  @ref{Floating Point Classes}.

@comment finitef
@item int finitef (float @var{x})

@file{math.h} (BSD):  @ref{Floating Point Classes}.

@comment finitel
@item int finitel (long double @var{x})

@file{math.h} (BSD):  @ref{Floating Point Classes}.

@comment flock
@item struct flock

@file{fcntl.h} (POSIX.1):  @ref{File Locks}.

@comment flockfile
@item void flockfile (FILE *@var{stream})

@file{stdio.h} (POSIX):  @ref{Streams and Threads}.

@comment floor
@item double floor (double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment floorf
@item float floorf (float @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment floorfN
@item _FloatN floorfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment floorfNx
@item _FloatNx floorfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment floorl
@item long double floorl (long double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment fma
@item double fma (double @var{x}, double @var{y}, double @var{z})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fmaf
@item float fmaf (float @var{x}, float @var{y}, float @var{z})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fmafN
@item _FloatN fmafN (_Float@var{N} @var{x}, _Float@var{N} @var{y}, _Float@var{N} @var{z})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fmafNx
@item _FloatNx fmafNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y}, _Float@var{N}x @var{z})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fmal
@item long double fmal (long double @var{x}, long double @var{y}, long double @var{z})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fmax
@item double fmax (double @var{x}, double @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fmaxf
@item float fmaxf (float @var{x}, float @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fmaxfN
@item _FloatN fmaxfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fmaxfNx
@item _FloatNx fmaxfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fmaxl
@item long double fmaxl (long double @var{x}, long double @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fmaxmag
@item double fmaxmag (double @var{x}, double @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fmaxmagf
@item float fmaxmagf (float @var{x}, float @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fmaxmagfN
@item _FloatN fmaxmagfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fmaxmagfNx
@item _FloatNx fmaxmagfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fmaxmagl
@item long double fmaxmagl (long double @var{x}, long double @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fmemopen
@item FILE * fmemopen (void *@var{buf}, size_t @var{size}, const char *@var{opentype})

@file{stdio.h} (GNU):  @ref{String Streams}.

@comment fmin
@item double fmin (double @var{x}, double @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fminf
@item float fminf (float @var{x}, float @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fminfN
@item _FloatN fminfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fminfNx
@item _FloatNx fminfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fminl
@item long double fminl (long double @var{x}, long double @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fminmag
@item double fminmag (double @var{x}, double @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fminmagf
@item float fminmagf (float @var{x}, float @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fminmagfN
@item _FloatN fminmagfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fminmagfNx
@item _FloatNx fminmagfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Misc FP Arithmetic}.

@comment fminmagl
@item long double fminmagl (long double @var{x}, long double @var{y})

@file{math.h} (ISO):  @ref{Misc FP Arithmetic}.

@comment fmod
@item double fmod (double @var{numerator}, double @var{denominator})

@file{math.h} (ISO):  @ref{Remainder Functions}.

@comment fmodf
@item float fmodf (float @var{numerator}, float @var{denominator})

@file{math.h} (ISO):  @ref{Remainder Functions}.

@comment fmodfN
@item _FloatN fmodfN (_Float@var{N} @var{numerator}, _Float@var{N} @var{denominator})

@file{math.h} (TS 18661-3:2015):  @ref{Remainder Functions}.

@comment fmodfNx
@item _FloatNx fmodfNx (_Float@var{N}x @var{numerator}, _Float@var{N}x @var{denominator})

@file{math.h} (TS 18661-3:2015):  @ref{Remainder Functions}.

@comment fmodl
@item long double fmodl (long double @var{numerator}, long double @var{denominator})

@file{math.h} (ISO):  @ref{Remainder Functions}.

@comment fmtmsg
@item int fmtmsg (long int @var{classification}, const char *@var{label}, int @var{severity}, const char *@var{text}, const char *@var{action}, const char *@var{tag})

@file{fmtmsg.h} (XPG):  @ref{Printing Formatted Messages}.

@comment fmul
@item float fmul (double @var{x}, double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment fmull
@item float fmull (long double @var{x}, long double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment fnmatch
@item int fnmatch (const char *@var{pattern}, const char *@var{string}, int @var{flags})

@file{fnmatch.h} (POSIX.2):  @ref{Wildcard Matching}.

@comment fopen
@item FILE * fopen (const char *@var{filename}, const char *@var{opentype})

@file{stdio.h} (ISO):  @ref{Opening Streams}.

@comment fopen64
@item FILE * fopen64 (const char *@var{filename}, const char *@var{opentype})

@file{stdio.h} (Unix98):  @ref{Opening Streams}.

@comment fopencookie
@item FILE * fopencookie (void *@var{cookie}, const char *@var{opentype}, cookie_io_functions_t @var{io-functions})

@file{stdio.h} (GNU):  @ref{Streams and Cookies}.

@comment fork
@item pid_t fork (void)

@file{unistd.h} (POSIX.1):  @ref{Creating a Process}.

@comment forkpty
@item int forkpty (int *@var{amaster}, char *@var{name}, const struct termios *@var{termp}, const struct winsize *@var{winp})

@file{pty.h} (BSD):  @ref{Pseudo-Terminal Pairs}.

@comment fpathconf
@item long int fpathconf (int @var{filedes}, int @var{parameter})

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment fpclassify
@item int fpclassify (@emph{float-type} @var{x})

@file{math.h} (ISO):  @ref{Floating Point Classes}.

@comment fpos64_t
@item fpos64_t

@file{stdio.h} (Unix98):  @ref{Portable Positioning}.

@comment fpos_t
@item fpos_t

@file{stdio.h} (ISO):  @ref{Portable Positioning}.

@comment fprintf
@item int fprintf (FILE *@var{stream}, const char *@var{template}, @dots{})

@file{stdio.h} (ISO):  @ref{Formatted Output Functions}.

@comment fputc
@item int fputc (int @var{c}, FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Simple Output}.

@comment fputc_unlocked
@item int fputc_unlocked (int @var{c}, FILE *@var{stream})

@file{stdio.h} (POSIX):  @ref{Simple Output}.

@comment fputs
@item int fputs (const char *@var{s}, FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Simple Output}.

@comment fputs_unlocked
@item int fputs_unlocked (const char *@var{s}, FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{Simple Output}.

@comment fputwc
@item wint_t fputwc (wchar_t @var{wc}, FILE *@var{stream})

@file{wchar.h} (ISO):  @ref{Simple Output}.

@comment fputwc_unlocked
@item wint_t fputwc_unlocked (wchar_t @var{wc}, FILE *@var{stream})

@file{wchar.h} (POSIX):  @ref{Simple Output}.

@comment fputws
@item int fputws (const wchar_t *@var{ws}, FILE *@var{stream})

@file{wchar.h} (ISO):  @ref{Simple Output}.

@comment fputws_unlocked
@item int fputws_unlocked (const wchar_t *@var{ws}, FILE *@var{stream})

@file{wchar.h} (GNU):  @ref{Simple Output}.

@comment fread
@item size_t fread (void *@var{data}, size_t @var{size}, size_t @var{count}, FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Block Input/Output}.

@comment fread_unlocked
@item size_t fread_unlocked (void *@var{data}, size_t @var{size}, size_t @var{count}, FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{Block Input/Output}.

@comment free
@item void free (void *@var{ptr})

@file{malloc.h} (ISO):  @ref{Freeing after Malloc}.

@file{stdlib.h} (ISO):  @ref{Freeing after Malloc}.

@comment freopen
@item FILE * freopen (const char *@var{filename}, const char *@var{opentype}, FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Opening Streams}.

@comment freopen64
@item FILE * freopen64 (const char *@var{filename}, const char *@var{opentype}, FILE *@var{stream})

@file{stdio.h} (Unix98):  @ref{Opening Streams}.

@comment frexp
@item double frexp (double @var{value}, int *@var{exponent})

@file{math.h} (ISO):  @ref{Normalization Functions}.

@comment frexpf
@item float frexpf (float @var{value}, int *@var{exponent})

@file{math.h} (ISO):  @ref{Normalization Functions}.

@comment frexpfN
@item _FloatN frexpfN (_Float@var{N} @var{value}, int *@var{exponent})

@file{math.h} (TS 18661-3:2015):  @ref{Normalization Functions}.

@comment frexpfNx
@item _FloatNx frexpfNx (_Float@var{N}x @var{value}, int *@var{exponent})

@file{math.h} (TS 18661-3:2015):  @ref{Normalization Functions}.

@comment frexpl
@item long double frexpl (long double @var{value}, int *@var{exponent})

@file{math.h} (ISO):  @ref{Normalization Functions}.

@comment fromfp
@item intmax_t fromfp (double @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment fromfpf
@item intmax_t fromfpf (float @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment fromfpfN
@item intmax_t fromfpfN (_Float@var{N} @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment fromfpfNx
@item intmax_t fromfpfNx (_Float@var{N}x @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment fromfpl
@item intmax_t fromfpl (long double @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment fromfpx
@item intmax_t fromfpx (double @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment fromfpxf
@item intmax_t fromfpxf (float @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment fromfpxfN
@item intmax_t fromfpxfN (_Float@var{N} @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment fromfpxfNx
@item intmax_t fromfpxfNx (_Float@var{N}x @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment fromfpxl
@item intmax_t fromfpxl (long double @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment fscanf
@item int fscanf (FILE *@var{stream}, const char *@var{template}, @dots{})

@file{stdio.h} (ISO):  @ref{Formatted Input Functions}.

@comment fseek
@item int fseek (FILE *@var{stream}, long int @var{offset}, int @var{whence})

@file{stdio.h} (ISO):  @ref{File Positioning}.

@comment fseeko
@item int fseeko (FILE *@var{stream}, off_t @var{offset}, int @var{whence})

@file{stdio.h} (Unix98):  @ref{File Positioning}.

@comment fseeko64
@item int fseeko64 (FILE *@var{stream}, off64_t @var{offset}, int @var{whence})

@file{stdio.h} (Unix98):  @ref{File Positioning}.

@comment fsetpos
@item int fsetpos (FILE *@var{stream}, const fpos_t *@var{position})

@file{stdio.h} (ISO):  @ref{Portable Positioning}.

@comment fsetpos64
@item int fsetpos64 (FILE *@var{stream}, const fpos64_t *@var{position})

@file{stdio.h} (Unix98):  @ref{Portable Positioning}.

@comment fstab
@item struct fstab

@file{fstab.h} (BSD):  @ref{fstab}.

@comment fstat
@item int fstat (int @var{filedes}, struct stat *@var{buf})

@file{sys/stat.h} (POSIX.1):  @ref{Reading Attributes}.

@comment fstat64
@item int fstat64 (int @var{filedes}, struct stat64 *@var{buf})

@file{sys/stat.h} (Unix98):  @ref{Reading Attributes}.

@comment fsub
@item float fsub (double @var{x}, double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment fsubl
@item float fsubl (long double @var{x}, long double @var{y})

@file{math.h} (TS 18661-1:2014):  @ref{Misc FP Arithmetic}.

@comment fsync
@item int fsync (int @var{fildes})

@file{unistd.h} (POSIX):  @ref{Synchronizing I/O}.

@comment ftell
@item long int ftell (FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{File Positioning}.

@comment ftello
@item off_t ftello (FILE *@var{stream})

@file{stdio.h} (Unix98):  @ref{File Positioning}.

@comment ftello64
@item off64_t ftello64 (FILE *@var{stream})

@file{stdio.h} (Unix98):  @ref{File Positioning}.

@comment ftruncate
@item int ftruncate (int @var{fd}, off_t @var{length})

@file{unistd.h} (POSIX):  @ref{File Size}.

@comment ftruncate64
@item int ftruncate64 (int @var{id}, off64_t @var{length})

@file{unistd.h} (Unix98):  @ref{File Size}.

@comment ftrylockfile
@item int ftrylockfile (FILE *@var{stream})

@file{stdio.h} (POSIX):  @ref{Streams and Threads}.

@comment ftw
@item int ftw (const char *@var{filename}, __ftw_func_t @var{func}, int @var{descriptors})

@file{ftw.h} (SVID):  @ref{Working with Directory Trees}.

@comment ftw64
@item int ftw64 (const char *@var{filename}, __ftw64_func_t @var{func}, int @var{descriptors})

@file{ftw.h} (Unix98):  @ref{Working with Directory Trees}.

@comment funlockfile
@item void funlockfile (FILE *@var{stream})

@file{stdio.h} (POSIX):  @ref{Streams and Threads}.

@comment futimes
@item int futimes (int @var{fd}, const struct timeval @var{tvp}@t{[2]})

@file{sys/time.h} (BSD):  @ref{File Times}.

@comment fwide
@item int fwide (FILE *@var{stream}, int @var{mode})

@file{wchar.h} (ISO):  @ref{Streams and I18N}.

@comment fwprintf
@item int fwprintf (FILE *@var{stream}, const wchar_t *@var{template}, @dots{})

@file{wchar.h} (ISO):  @ref{Formatted Output Functions}.

@comment fwrite
@item size_t fwrite (const void *@var{data}, size_t @var{size}, size_t @var{count}, FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Block Input/Output}.

@comment fwrite_unlocked
@item size_t fwrite_unlocked (const void *@var{data}, size_t @var{size}, size_t @var{count}, FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{Block Input/Output}.

@comment fwscanf
@item int fwscanf (FILE *@var{stream}, const wchar_t *@var{template}, @dots{})

@file{wchar.h} (ISO):  @ref{Formatted Input Functions}.

@comment gamma
@item double gamma (double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment gammaf
@item float gammaf (float @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment gammal
@item long double gammal (long double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment gcvt
@item char * gcvt (double @var{value}, int @var{ndigit}, char *@var{buf})

@file{stdlib.h} (SVID):  @ref{System V Number Conversion}.

@file{stdlib.h} (Unix98):  @ref{System V Number Conversion}.

@comment get_avphys_pages
@item long int get_avphys_pages (void)

@file{sys/sysinfo.h} (GNU):  @ref{Query Memory Parameters}.

@comment get_current_dir_name
@item char * get_current_dir_name (void)

@file{unistd.h} (GNU):  @ref{Working Directory}.

@comment get_nprocs
@item int get_nprocs (void)

@file{sys/sysinfo.h} (GNU):  @ref{Processor Resources}.

@comment get_nprocs_conf
@item int get_nprocs_conf (void)

@file{sys/sysinfo.h} (GNU):  @ref{Processor Resources}.

@comment get_phys_pages
@item long int get_phys_pages (void)

@file{sys/sysinfo.h} (GNU):  @ref{Query Memory Parameters}.

@comment getauxval
@item unsigned long int getauxval (unsigned long int @var{type})

@file{sys/auxv.h} (???):  @ref{Auxiliary Vector}.

@comment getc
@item int getc (FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Character Input}.

@comment getc_unlocked
@item int getc_unlocked (FILE *@var{stream})

@file{stdio.h} (POSIX):  @ref{Character Input}.

@comment getchar
@item int getchar (void)

@file{stdio.h} (ISO):  @ref{Character Input}.

@comment getchar_unlocked
@item int getchar_unlocked (void)

@file{stdio.h} (POSIX):  @ref{Character Input}.

@comment getcontext
@item int getcontext (ucontext_t *@var{ucp})

@file{ucontext.h} (SVID):  @ref{System V contexts}.

@comment getcpu
@item int getcpu (unsigned int *cpu, unsigned int *node)

@file{<sched.h>} (Linux):  @ref{CPU Affinity}.

@comment getcwd
@item char * getcwd (char *@var{buffer}, size_t @var{size})

@file{unistd.h} (POSIX.1):  @ref{Working Directory}.

@comment getdate
@item struct tm * getdate (const char *@var{string})

@file{time.h} (Unix98):  @ref{General Time String Parsing}.

@comment getdate_err
@item getdate_err

@file{time.h} (Unix98):  @ref{General Time String Parsing}.

@comment getdate_r
@item int getdate_r (const char *@var{string}, struct tm *@var{tp})

@file{time.h} (GNU):  @ref{General Time String Parsing}.

@comment getdelim
@item ssize_t getdelim (char **@var{lineptr}, size_t *@var{n}, int @var{delimiter}, FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{Line Input}.

@comment getdents64
@item ssize_t getdents64 (int @var{fd}, void *@var{buffer}, size_t @var{length})

@file{dirent.h} (Linux):  @ref{Low-level Directory Access}.

@comment getdomainnname
@item int getdomainnname (char *@var{name}, size_t @var{length})

@file{unistd.h} (???):  @ref{Host Identification}.

@comment getegid
@item gid_t getegid (void)

@file{unistd.h} (POSIX.1):  @ref{Reading Persona}.

@comment getentropy
@item int getentropy (void *@var{buffer}, size_t @var{length})

@file{sys/random.h} (GNU):  @ref{Unpredictable Bytes}.

@comment getenv
@item char * getenv (const char *@var{name})

@file{stdlib.h} (ISO):  @ref{Environment Access}.

@comment geteuid
@item uid_t geteuid (void)

@file{unistd.h} (POSIX.1):  @ref{Reading Persona}.

@comment getfsent
@item struct fstab * getfsent (void)

@file{fstab.h} (BSD):  @ref{fstab}.

@comment getfsfile
@item struct fstab * getfsfile (const char *@var{name})

@file{fstab.h} (BSD):  @ref{fstab}.

@comment getfsspec
@item struct fstab * getfsspec (const char *@var{name})

@file{fstab.h} (BSD):  @ref{fstab}.

@comment getgid
@item gid_t getgid (void)

@file{unistd.h} (POSIX.1):  @ref{Reading Persona}.

@comment getgrent
@item struct group * getgrent (void)

@file{grp.h} (SVID):  @ref{Scanning All Groups}.

@file{grp.h} (BSD):  @ref{Scanning All Groups}.

@comment getgrent_r
@item int getgrent_r (struct group *@var{result_buf}, char *@var{buffer}, size_t @var{buflen}, struct group **@var{result})

@file{grp.h} (GNU):  @ref{Scanning All Groups}.

@comment getgrgid
@item struct group * getgrgid (gid_t @var{gid})

@file{grp.h} (POSIX.1):  @ref{Lookup Group}.

@comment getgrgid_r
@item int getgrgid_r (gid_t @var{gid}, struct group *@var{result_buf}, char *@var{buffer}, size_t @var{buflen}, struct group **@var{result})

@file{grp.h} (POSIX.1c):  @ref{Lookup Group}.

@comment getgrnam
@item struct group * getgrnam (const char *@var{name})

@file{grp.h} (SVID):  @ref{Lookup Group}.

@file{grp.h} (BSD):  @ref{Lookup Group}.

@comment getgrnam_r
@item int getgrnam_r (const char *@var{name}, struct group *@var{result_buf}, char *@var{buffer}, size_t @var{buflen}, struct group **@var{result})

@file{grp.h} (POSIX.1c):  @ref{Lookup Group}.

@comment getgrouplist
@item int getgrouplist (const char *@var{user}, gid_t @var{group}, gid_t *@var{groups}, int *@var{ngroups})

@file{grp.h} (BSD):  @ref{Setting Groups}.

@comment getgroups
@item int getgroups (int @var{count}, gid_t *@var{groups})

@file{unistd.h} (POSIX.1):  @ref{Reading Persona}.

@comment gethostbyaddr
@item struct hostent * gethostbyaddr (const void *@var{addr}, socklen_t @var{length}, int @var{format})

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment gethostbyaddr_r
@item int gethostbyaddr_r (const void *@var{addr}, socklen_t @var{length}, int @var{format}, struct hostent *restrict @var{result_buf}, char *restrict @var{buf}, size_t @var{buflen}, struct hostent **restrict @var{result}, int *restrict @var{h_errnop})

@file{netdb.h} (GNU):  @ref{Host Names}.

@comment gethostbyname
@item struct hostent * gethostbyname (const char *@var{name})

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment gethostbyname2
@item struct hostent * gethostbyname2 (const char *@var{name}, int @var{af})

@file{netdb.h} (IPv6 Basic API):  @ref{Host Names}.

@comment gethostbyname2_r
@item int gethostbyname2_r (const char *@var{name}, int @var{af}, struct hostent *restrict @var{result_buf}, char *restrict @var{buf}, size_t @var{buflen}, struct hostent **restrict @var{result}, int *restrict @var{h_errnop})

@file{netdb.h} (GNU):  @ref{Host Names}.

@comment gethostbyname_r
@item int gethostbyname_r (const char *restrict @var{name}, struct hostent *restrict @var{result_buf}, char *restrict @var{buf}, size_t @var{buflen}, struct hostent **restrict @var{result}, int *restrict @var{h_errnop})

@file{netdb.h} (GNU):  @ref{Host Names}.

@comment gethostent
@item struct hostent * gethostent (void)

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment gethostid
@item long int gethostid (void)

@file{unistd.h} (BSD):  @ref{Host Identification}.

@comment gethostname
@item int gethostname (char *@var{name}, size_t @var{size})

@file{unistd.h} (BSD):  @ref{Host Identification}.

@comment getitimer
@item int getitimer (int @var{which}, struct itimerval *@var{old})

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment getline
@item ssize_t getline (char **@var{lineptr}, size_t *@var{n}, FILE *@var{stream})

@file{stdio.h} (GNU):  @ref{Line Input}.

@comment getloadavg
@item int getloadavg (double @var{loadavg}[], int @var{nelem})

@file{stdlib.h} (BSD):  @ref{Processor Resources}.

@comment getlogin
@item char * getlogin (void)

@file{unistd.h} (POSIX.1):  @ref{Who Logged In}.

@comment getmntent
@item struct mntent * getmntent (FILE *@var{stream})

@file{mntent.h} (BSD):  @ref{mtab}.

@comment getmntent_r
@item struct mntent * getmntent_r (FILE *@var{stream}, struct mntent *@var{result}, char *@var{buffer}, int @var{bufsize})

@file{mntent.h} (BSD):  @ref{mtab}.

@comment getnetbyaddr
@item struct netent * getnetbyaddr (uint32_t @var{net}, int @var{type})

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment getnetbyname
@item struct netent * getnetbyname (const char *@var{name})

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment getnetent
@item struct netent * getnetent (void)

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment getnetgrent
@item int getnetgrent (char **@var{hostp}, char **@var{userp}, char **@var{domainp})

@file{netdb.h} (BSD):  @ref{Lookup Netgroup}.

@comment getnetgrent_r
@item int getnetgrent_r (char **@var{hostp}, char **@var{userp}, char **@var{domainp}, char *@var{buffer}, size_t @var{buflen})

@file{netdb.h} (GNU):  @ref{Lookup Netgroup}.

@comment getopt
@item int getopt (int @var{argc}, char *const *@var{argv}, const char *@var{options})

@file{unistd.h} (POSIX.2):  @ref{Using Getopt}.

@comment getopt_long
@item int getopt_long (int @var{argc}, char *const *@var{argv}, const char *@var{shortopts}, const struct option *@var{longopts}, int *@var{indexptr})

@file{getopt.h} (GNU):  @ref{Getopt Long Options}.

@comment getopt_long_only
@item int getopt_long_only (int @var{argc}, char *const *@var{argv}, const char *@var{shortopts}, const struct option *@var{longopts}, int *@var{indexptr})

@file{getopt.h} (GNU):  @ref{Getopt Long Options}.

@comment getpagesize
@item int getpagesize (void)

@file{unistd.h} (BSD):  @ref{Query Memory Parameters}.

@comment getpass
@item char * getpass (const char *@var{prompt})

@file{unistd.h} (BSD):  @ref{getpass}.

@comment getpayload
@item double getpayload (const double *@var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment getpayloadf
@item float getpayloadf (const float *@var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment getpayloadfN
@item _FloatN getpayloadfN (const _Float@var{N} *@var{x})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment getpayloadfNx
@item _FloatNx getpayloadfNx (const _Float@var{N}x *@var{x})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment getpayloadl
@item long double getpayloadl (const long double *@var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment getpeername
@item int getpeername (int @var{socket}, struct sockaddr *@var{addr}, socklen_t *@var{length-ptr})

@file{sys/socket.h} (BSD):  @ref{Who is Connected}.

@comment getpgid
@item int getpgid (pid_t @var{pid})

@file{unistd.h} (POSIX.1):  @ref{Process Group Functions}.

@comment getpgrp
@item pid_t getpgrp (void)

@file{unistd.h} (POSIX.1):  @ref{Process Group Functions}.

@comment getpid
@item pid_t getpid (void)

@file{unistd.h} (POSIX.1):  @ref{Process Identification}.

@comment getppid
@item pid_t getppid (void)

@file{unistd.h} (POSIX.1):  @ref{Process Identification}.

@comment getpriority
@item int getpriority (int @var{class}, int @var{id})

@file{sys/resource.h} (BSD):  @ref{Traditional Scheduling Functions}.

@file{sys/resource.h} (POSIX):  @ref{Traditional Scheduling Functions}.

@comment getprotobyname
@item struct protoent * getprotobyname (const char *@var{name})

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment getprotobynumber
@item struct protoent * getprotobynumber (int @var{protocol})

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment getprotoent
@item struct protoent * getprotoent (void)

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment getpt
@item int getpt (void)

@file{stdlib.h} (GNU):  @ref{Allocation}.

@comment getpwent
@item struct passwd * getpwent (void)

@file{pwd.h} (POSIX.1):  @ref{Scanning All Users}.

@comment getpwent_r
@item int getpwent_r (struct passwd *@var{result_buf}, char *@var{buffer}, size_t @var{buflen}, struct passwd **@var{result})

@file{pwd.h} (GNU):  @ref{Scanning All Users}.

@comment getpwnam
@item struct passwd * getpwnam (const char *@var{name})

@file{pwd.h} (POSIX.1):  @ref{Lookup User}.

@comment getpwnam_r
@item int getpwnam_r (const char *@var{name}, struct passwd *@var{result_buf}, char *@var{buffer}, size_t @var{buflen}, struct passwd **@var{result})

@file{pwd.h} (POSIX.1c):  @ref{Lookup User}.

@comment getpwuid
@item struct passwd * getpwuid (uid_t @var{uid})

@file{pwd.h} (POSIX.1):  @ref{Lookup User}.

@comment getpwuid_r
@item int getpwuid_r (uid_t @var{uid}, struct passwd *@var{result_buf}, char *@var{buffer}, size_t @var{buflen}, struct passwd **@var{result})

@file{pwd.h} (POSIX.1c):  @ref{Lookup User}.

@comment getrandom
@item ssize_t getrandom (void *@var{buffer}, size_t @var{length}, unsigned int @var{flags})

@file{sys/random.h} (GNU):  @ref{Unpredictable Bytes}.

@comment getrlimit
@item int getrlimit (int @var{resource}, struct rlimit *@var{rlp})

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment getrlimit64
@item int getrlimit64 (int @var{resource}, struct rlimit64 *@var{rlp})

@file{sys/resource.h} (Unix98):  @ref{Limits on Resources}.

@comment getrusage
@item int getrusage (int @var{processes}, struct rusage *@var{rusage})

@file{sys/resource.h} (BSD):  @ref{Resource Usage}.

@comment gets
@item char * gets (char *@var{s})

@file{stdio.h} (ISO):  @ref{Line Input}.

@comment getservbyname
@item struct servent * getservbyname (const char *@var{name}, const char *@var{proto})

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment getservbyport
@item struct servent * getservbyport (int @var{port}, const char *@var{proto})

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment getservent
@item struct servent * getservent (void)

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment getsid
@item pid_t getsid (pid_t @var{pid})

@file{unistd.h} (SVID):  @ref{Process Group Functions}.

@comment getsockname
@item int getsockname (int @var{socket}, struct sockaddr *@var{addr}, socklen_t *@var{length-ptr})

@file{sys/socket.h} (BSD):  @ref{Reading Address}.

@comment getsockopt
@item int getsockopt (int @var{socket}, int @var{level}, int @var{optname}, void *@var{optval}, socklen_t *@var{optlen-ptr})

@file{sys/socket.h} (BSD):  @ref{Socket Option Functions}.

@comment getsubopt
@item int getsubopt (char **@var{optionp}, char *const *@var{tokens}, char **@var{valuep})

@file{stdlib.h} (???):  @ref{Suboptions}.

@comment gettext
@item char * gettext (const char *@var{msgid})

@file{libintl.h} (GNU):  @ref{Translation with gettext}.

@comment gettid
@item pid_t gettid (void)

@file{unistd.h} (Linux):  @ref{Process Identification}.

@comment gettimeofday
@item int gettimeofday (struct timeval *@var{tp}, void *@var{tzp})

@file{sys/time.h} (BSD):  @ref{Getting the Time}.

@comment getuid
@item uid_t getuid (void)

@file{unistd.h} (POSIX.1):  @ref{Reading Persona}.

@comment getumask
@item mode_t getumask (void)

@file{sys/stat.h} (GNU):  @ref{Setting Permissions}.

@comment getutent
@item struct utmp * getutent (void)

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@comment getutent_r
@item int getutent_r (struct utmp *@var{buffer}, struct utmp **@var{result})

@file{utmp.h} (GNU):  @ref{Manipulating the Database}.

@comment getutid
@item struct utmp * getutid (const struct utmp *@var{id})

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@comment getutid_r
@item int getutid_r (const struct utmp *@var{id}, struct utmp *@var{buffer}, struct utmp **@var{result})

@file{utmp.h} (GNU):  @ref{Manipulating the Database}.

@comment getutline
@item struct utmp * getutline (const struct utmp *@var{line})

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@comment getutline_r
@item int getutline_r (const struct utmp *@var{line}, struct utmp *@var{buffer}, struct utmp **@var{result})

@file{utmp.h} (GNU):  @ref{Manipulating the Database}.

@comment getutmp
@item int getutmp (const struct utmpx *@var{utmpx}, struct utmp *@var{utmp})

@file{utmp.h} (GNU):  @ref{XPG Functions}.

@file{utmpx.h} (GNU):  @ref{XPG Functions}.

@comment getutmpx
@item int getutmpx (const struct utmp *@var{utmp}, struct utmpx *@var{utmpx})

@file{utmp.h} (GNU):  @ref{XPG Functions}.

@file{utmpx.h} (GNU):  @ref{XPG Functions}.

@comment getutxent
@item struct utmpx * getutxent (void)

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment getutxid
@item struct utmpx * getutxid (const struct utmpx *@var{id})

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment getutxline
@item struct utmpx * getutxline (const struct utmpx *@var{line})

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment getw
@item int getw (FILE *@var{stream})

@file{stdio.h} (SVID):  @ref{Character Input}.

@comment getwc
@item wint_t getwc (FILE *@var{stream})

@file{wchar.h} (ISO):  @ref{Character Input}.

@comment getwc_unlocked
@item wint_t getwc_unlocked (FILE *@var{stream})

@file{wchar.h} (GNU):  @ref{Character Input}.

@comment getwchar
@item wint_t getwchar (void)

@file{wchar.h} (ISO):  @ref{Character Input}.

@comment getwchar_unlocked
@item wint_t getwchar_unlocked (void)

@file{wchar.h} (GNU):  @ref{Character Input}.

@comment getwd
@item char * getwd (char *@var{buffer})

@file{unistd.h} (BSD):  @ref{Working Directory}.

@comment gid_t
@item gid_t

@file{sys/types.h} (POSIX.1):  @ref{Reading Persona}.

@comment glob
@item int glob (const char *@var{pattern}, int @var{flags}, int (*@var{errfunc}) (const char *@var{filename}, int @var{error-code}), glob_t *@var{vector-ptr})

@file{glob.h} (POSIX.2):  @ref{Calling Glob}.

@comment glob64
@item int glob64 (const char *@var{pattern}, int @var{flags}, int (*@var{errfunc}) (const char *@var{filename}, int @var{error-code}), glob64_t *@var{vector-ptr})

@file{glob.h} (GNU):  @ref{Calling Glob}.

@comment glob64_t
@item glob64_t

@file{glob.h} (GNU):  @ref{Calling Glob}.

@comment glob_t
@item glob_t

@file{glob.h} (POSIX.2):  @ref{Calling Glob}.

@comment globfree
@item void globfree (glob_t *@var{pglob})

@file{glob.h} (POSIX.2):  @ref{More Flags for Globbing}.

@comment globfree64
@item void globfree64 (glob64_t *@var{pglob})

@file{glob.h} (GNU):  @ref{More Flags for Globbing}.

@comment gmtime
@item struct tm * gmtime (const time_t *@var{time})

@file{time.h} (ISO):  @ref{Broken-down Time}.

@comment gmtime_r
@item struct tm * gmtime_r (const time_t *@var{time}, struct tm *@var{resultp})

@file{time.h} (POSIX.1c):  @ref{Broken-down Time}.

@comment grantpt
@item int grantpt (int @var{filedes})

@file{stdlib.h} (SVID):  @ref{Allocation}.

@file{stdlib.h} (XPG4.2):  @ref{Allocation}.

@comment group
@item struct group

@file{grp.h} (POSIX.1):  @ref{Group Data Structure}.

@comment gsignal
@item int gsignal (int @var{signum})

@file{signal.h} (SVID):  @ref{Signaling Yourself}.

@comment gtty
@item int gtty (int @var{filedes}, struct sgttyb *@var{attributes})

@file{sgtty.h} (BSD):  @ref{BSD Terminal Modes}.

@comment hasmntopt
@item char * hasmntopt (const struct mntent *@var{mnt}, const char *@var{opt})

@file{mntent.h} (BSD):  @ref{mtab}.

@comment hcreate
@item int hcreate (size_t @var{nel})

@file{search.h} (SVID):  @ref{Hash Search Function}.

@comment hcreate_r
@item int hcreate_r (size_t @var{nel}, struct hsearch_data *@var{htab})

@file{search.h} (GNU):  @ref{Hash Search Function}.

@comment hdestroy
@item void hdestroy (void)

@file{search.h} (SVID):  @ref{Hash Search Function}.

@comment hdestroy_r
@item void hdestroy_r (struct hsearch_data *@var{htab})

@file{search.h} (GNU):  @ref{Hash Search Function}.

@comment hostent
@item struct hostent

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment hsearch
@item ENTRY * hsearch (ENTRY @var{item}, ACTION @var{action})

@file{search.h} (SVID):  @ref{Hash Search Function}.

@comment hsearch_r
@item int hsearch_r (ENTRY @var{item}, ACTION @var{action}, ENTRY **@var{retval}, struct hsearch_data *@var{htab})

@file{search.h} (GNU):  @ref{Hash Search Function}.

@comment htonl
@item uint32_t htonl (uint32_t @var{hostlong})

@file{netinet/in.h} (BSD):  @ref{Byte Order}.

@comment htons
@item uint16_t htons (uint16_t @var{hostshort})

@file{netinet/in.h} (BSD):  @ref{Byte Order}.

@comment hypot
@item double hypot (double @var{x}, double @var{y})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment hypotf
@item float hypotf (float @var{x}, float @var{y})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment hypotfN
@item _FloatN hypotfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment hypotfNx
@item _FloatNx hypotfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment hypotl
@item long double hypotl (long double @var{x}, long double @var{y})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment iconv
@item size_t iconv (iconv_t @var{cd}, char **@var{inbuf}, size_t *@var{inbytesleft}, char **@var{outbuf}, size_t *@var{outbytesleft})

@file{iconv.h} (XPG2):  @ref{Generic Conversion Interface}.

@comment iconv_close
@item int iconv_close (iconv_t @var{cd})

@file{iconv.h} (XPG2):  @ref{Generic Conversion Interface}.

@comment iconv_open
@item iconv_t iconv_open (const char *@var{tocode}, const char *@var{fromcode})

@file{iconv.h} (XPG2):  @ref{Generic Conversion Interface}.

@comment iconv_t
@item iconv_t

@file{iconv.h} (XPG2):  @ref{Generic Conversion Interface}.

@comment if_freenameindex
@item void if_freenameindex (struct if_nameindex *@var{ptr})

@file{net/if.h} (IPv6 basic API):  @ref{Interface Naming}.

@comment if_indextoname
@item char * if_indextoname (unsigned int @var{ifindex}, char *@var{ifname})

@file{net/if.h} (IPv6 basic API):  @ref{Interface Naming}.

@comment if_nameindex
@item struct if_nameindex

@file{net/if.h} (IPv6 basic API):  @ref{Interface Naming}.

@comment if_nameindex
@item struct if_nameindex * if_nameindex (void)

@file{net/if.h} (IPv6 basic API):  @ref{Interface Naming}.

@comment if_nametoindex
@item unsigned int if_nametoindex (const char *@var{ifname})

@file{net/if.h} (IPv6 basic API):  @ref{Interface Naming}.

@comment ilogb
@item int ilogb (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment ilogbf
@item int ilogbf (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment ilogbfN
@item int ilogbfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment ilogbfNx
@item int ilogbfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment ilogbl
@item int ilogbl (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment imaxabs
@item intmax_t imaxabs (intmax_t @var{number})

@file{inttypes.h} (ISO):  @ref{Absolute Value}.

@comment imaxdiv
@item imaxdiv_t imaxdiv (intmax_t @var{numerator}, intmax_t @var{denominator})

@file{inttypes.h} (ISO):  @ref{Integer Division}.

@comment imaxdiv_t
@item imaxdiv_t

@file{inttypes.h} (ISO):  @ref{Integer Division}.

@comment in6_addr
@item struct in6_addr

@file{netinet/in.h} (IPv6 basic API):  @ref{Host Address Data Type}.

@comment in6addr_any
@item struct in6_addr in6addr_any

@file{netinet/in.h} (IPv6 basic API):  @ref{Host Address Data Type}.

@comment in6addr_loopback
@item struct in6_addr in6addr_loopback

@file{netinet/in.h} (IPv6 basic API):  @ref{Host Address Data Type}.

@comment in_addr
@item struct in_addr

@file{netinet/in.h} (BSD):  @ref{Host Address Data Type}.

@comment index
@item char * index (const char *@var{string}, int @var{c})

@file{string.h} (BSD):  @ref{Search Functions}.

@comment inet_addr
@item uint32_t inet_addr (const char *@var{name})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_aton
@item int inet_aton (const char *@var{name}, struct in_addr *@var{addr})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_lnaof
@item uint32_t inet_lnaof (struct in_addr @var{addr})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_makeaddr
@item struct in_addr inet_makeaddr (uint32_t @var{net}, uint32_t @var{local})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_netof
@item uint32_t inet_netof (struct in_addr @var{addr})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_network
@item uint32_t inet_network (const char *@var{name})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_ntoa
@item char * inet_ntoa (struct in_addr @var{addr})

@file{arpa/inet.h} (BSD):  @ref{Host Address Functions}.

@comment inet_ntop
@item const char * inet_ntop (int @var{af}, const void *@var{cp}, char *@var{buf}, socklen_t @var{len})

@file{arpa/inet.h} (IPv6 basic API):  @ref{Host Address Functions}.

@comment inet_pton
@item int inet_pton (int @var{af}, const char *@var{cp}, void *@var{buf})

@file{arpa/inet.h} (IPv6 basic API):  @ref{Host Address Functions}.

@comment initgroups
@item int initgroups (const char *@var{user}, gid_t @var{group})

@file{grp.h} (BSD):  @ref{Setting Groups}.

@comment initstate
@item char * initstate (unsigned int @var{seed}, char *@var{state}, size_t @var{size})

@file{stdlib.h} (BSD):  @ref{BSD Random}.

@comment initstate_r
@item int initstate_r (unsigned int @var{seed}, char *restrict @var{statebuf}, size_t @var{statelen}, struct random_data *restrict @var{buf})

@file{stdlib.h} (GNU):  @ref{BSD Random}.

@comment innetgr
@item int innetgr (const char *@var{netgroup}, const char *@var{host}, const char *@var{user}, const char *@var{domain})

@file{netdb.h} (BSD):  @ref{Netgroup Membership}.

@comment ino64_t
@item ino64_t

@file{sys/types.h} (Unix98):  @ref{Attribute Meanings}.

@comment ino_t
@item ino_t

@file{sys/types.h} (POSIX.1):  @ref{Attribute Meanings}.

@comment ioctl
@item int ioctl (int @var{filedes}, int @var{command}, @dots{})

@file{sys/ioctl.h} (BSD):  @ref{IOCTLs}.

@comment iovec
@item struct iovec

@file{sys/uio.h} (BSD):  @ref{Scatter-Gather}.

@comment isalnum
@item int isalnum (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment isalpha
@item int isalpha (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment isascii
@item int isascii (int @var{c})

@file{ctype.h} (SVID):  @ref{Classification of Characters}.

@file{ctype.h} (BSD):  @ref{Classification of Characters}.

@comment isatty
@item int isatty (int @var{filedes})

@file{unistd.h} (POSIX.1):  @ref{Is It a Terminal}.

@comment isblank
@item int isblank (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment iscanonical
@item int iscanonical (@emph{float-type} @var{x})

@file{math.h} (ISO):  @ref{Floating Point Classes}.

@comment iscntrl
@item int iscntrl (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment isdigit
@item int isdigit (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment iseqsig
@item int iseqsig (@emph{real-floating} @var{x}, @emph{real-floating} @var{y})

@file{math.h} (ISO):  @ref{FP Comparison Functions}.

@comment isfinite
@item int isfinite (@emph{float-type} @var{x})

@file{math.h} (ISO):  @ref{Floating Point Classes}.

@comment isgraph
@item int isgraph (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment isgreater
@item int isgreater (@emph{real-floating} @var{x}, @emph{real-floating} @var{y})

@file{math.h} (ISO):  @ref{FP Comparison Functions}.

@comment isgreaterequal
@item int isgreaterequal (@emph{real-floating} @var{x}, @emph{real-floating} @var{y})

@file{math.h} (ISO):  @ref{FP Comparison Functions}.

@comment isinf
@item int isinf (double @var{x})

@file{math.h} (BSD):  @ref{Floating Point Classes}.

@comment isinff
@item int isinff (float @var{x})

@file{math.h} (BSD):  @ref{Floating Point Classes}.

@comment isinfl
@item int isinfl (long double @var{x})

@file{math.h} (BSD):  @ref{Floating Point Classes}.

@comment isless
@item int isless (@emph{real-floating} @var{x}, @emph{real-floating} @var{y})

@file{math.h} (ISO):  @ref{FP Comparison Functions}.

@comment islessequal
@item int islessequal (@emph{real-floating} @var{x}, @emph{real-floating} @var{y})

@file{math.h} (ISO):  @ref{FP Comparison Functions}.

@comment islessgreater
@item int islessgreater (@emph{real-floating} @var{x}, @emph{real-floating} @var{y})

@file{math.h} (ISO):  @ref{FP Comparison Functions}.

@comment islower
@item int islower (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment isnan
@item int isnan (@emph{float-type} @var{x})

@file{math.h} (ISO):  @ref{Floating Point Classes}.

@comment isnan
@item int isnan (double @var{x})

@file{math.h} (BSD):  @ref{Floating Point Classes}.

@comment isnanf
@item int isnanf (float @var{x})

@file{math.h} (BSD):  @ref{Floating Point Classes}.

@comment isnanl
@item int isnanl (long double @var{x})

@file{math.h} (BSD):  @ref{Floating Point Classes}.

@comment isnormal
@item int isnormal (@emph{float-type} @var{x})

@file{math.h} (ISO):  @ref{Floating Point Classes}.

@comment isprint
@item int isprint (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment ispunct
@item int ispunct (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment issignaling
@item int issignaling (@emph{float-type} @var{x})

@file{math.h} (ISO):  @ref{Floating Point Classes}.

@comment isspace
@item int isspace (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment issubnormal
@item int issubnormal (@emph{float-type} @var{x})

@file{math.h} (ISO):  @ref{Floating Point Classes}.

@comment isunordered
@item int isunordered (@emph{real-floating} @var{x}, @emph{real-floating} @var{y})

@file{math.h} (ISO):  @ref{FP Comparison Functions}.

@comment isupper
@item int isupper (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment iswalnum
@item int iswalnum (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswalpha
@item int iswalpha (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswblank
@item int iswblank (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswcntrl
@item int iswcntrl (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswctype
@item int iswctype (wint_t @var{wc}, wctype_t @var{desc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswdigit
@item int iswdigit (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswgraph
@item int iswgraph (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswlower
@item int iswlower (wint_t @var{wc})

@file{ctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswprint
@item int iswprint (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswpunct
@item int iswpunct (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswspace
@item int iswspace (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswupper
@item int iswupper (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment iswxdigit
@item int iswxdigit (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment isxdigit
@item int isxdigit (int @var{c})

@file{ctype.h} (ISO):  @ref{Classification of Characters}.

@comment iszero
@item int iszero (@emph{float-type} @var{x})

@file{math.h} (ISO):  @ref{Floating Point Classes}.

@comment itimerval
@item struct itimerval

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment j0
@item double j0 (double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment j0f
@item float j0f (float @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment j0fN
@item _FloatN j0fN (_Float@var{N} @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment j0fNx
@item _FloatNx j0fNx (_Float@var{N}x @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment j0l
@item long double j0l (long double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment j1
@item double j1 (double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment j1f
@item float j1f (float @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment j1fN
@item _FloatN j1fN (_Float@var{N} @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment j1fNx
@item _FloatNx j1fNx (_Float@var{N}x @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment j1l
@item long double j1l (long double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment jmp_buf
@item jmp_buf

@file{setjmp.h} (ISO):  @ref{Non-Local Details}.

@comment jn
@item double jn (int @var{n}, double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment jnf
@item float jnf (int @var{n}, float @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment jnfN
@item _FloatN jnfN (int @var{n}, _Float@var{N} @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment jnfNx
@item _FloatNx jnfNx (int @var{n}, _Float@var{N}x @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment jnl
@item long double jnl (int @var{n}, long double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment jrand48
@item long int jrand48 (unsigned short int @var{xsubi}[3])

@file{stdlib.h} (SVID):  @ref{SVID Random}.

@comment jrand48_r
@item int jrand48_r (unsigned short int @var{xsubi}[3], struct drand48_data *@var{buffer}, long int *@var{result})

@file{stdlib.h} (GNU):  @ref{SVID Random}.

@comment kill
@item int kill (pid_t @var{pid}, int @var{signum})

@file{signal.h} (POSIX.1):  @ref{Signaling Another Process}.

@comment killpg
@item int killpg (int @var{pgid}, int @var{signum})

@file{signal.h} (BSD):  @ref{Signaling Another Process}.

@comment l64a
@item char * l64a (long int @var{n})

@file{stdlib.h} (XPG):  @ref{Encode Binary Data}.

@comment labs
@item long int labs (long int @var{number})

@file{stdlib.h} (ISO):  @ref{Absolute Value}.

@comment lcong48
@item void lcong48 (unsigned short int @var{param}[7])

@file{stdlib.h} (SVID):  @ref{SVID Random}.

@comment lcong48_r
@item int lcong48_r (unsigned short int @var{param}[7], struct drand48_data *@var{buffer})

@file{stdlib.h} (GNU):  @ref{SVID Random}.

@comment lconv
@item struct lconv

@file{locale.h} (ISO):  @ref{The Lame Way to Locale Data}.

@comment ldexp
@item double ldexp (double @var{value}, int @var{exponent})

@file{math.h} (ISO):  @ref{Normalization Functions}.

@comment ldexpf
@item float ldexpf (float @var{value}, int @var{exponent})

@file{math.h} (ISO):  @ref{Normalization Functions}.

@comment ldexpfN
@item _FloatN ldexpfN (_Float@var{N} @var{value}, int @var{exponent})

@file{math.h} (TS 18661-3:2015):  @ref{Normalization Functions}.

@comment ldexpfNx
@item _FloatNx ldexpfNx (_Float@var{N}x @var{value}, int @var{exponent})

@file{math.h} (TS 18661-3:2015):  @ref{Normalization Functions}.

@comment ldexpl
@item long double ldexpl (long double @var{value}, int @var{exponent})

@file{math.h} (ISO):  @ref{Normalization Functions}.

@comment ldiv
@item ldiv_t ldiv (long int @var{numerator}, long int @var{denominator})

@file{stdlib.h} (ISO):  @ref{Integer Division}.

@comment ldiv_t
@item ldiv_t

@file{stdlib.h} (ISO):  @ref{Integer Division}.

@comment lfind
@item void * lfind (const void *@var{key}, const void *@var{base}, size_t *@var{nmemb}, size_t @var{size}, comparison_fn_t @var{compar})

@file{search.h} (SVID):  @ref{Array Search Function}.

@comment lgamma
@item double lgamma (double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment lgamma_r
@item double lgamma_r (double @var{x}, int *@var{signp})

@file{math.h} (XPG):  @ref{Special Functions}.

@comment lgammaf
@item float lgammaf (float @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment lgammafN
@item _FloatN lgammafN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Special Functions}.

@comment lgammafN_r
@item _FloatN lgammafN_r (_Float@var{N} @var{x}, int *@var{signp})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment lgammafNx
@item _FloatNx lgammafNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Special Functions}.

@comment lgammafNx_r
@item _FloatNx lgammafNx_r (_Float@var{N}x @var{x}, int *@var{signp})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment lgammaf_r
@item float lgammaf_r (float @var{x}, int *@var{signp})

@file{math.h} (XPG):  @ref{Special Functions}.

@comment lgammal
@item long double lgammal (long double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment lgammal_r
@item long double lgammal_r (long double @var{x}, int *@var{signp})

@file{math.h} (XPG):  @ref{Special Functions}.

@comment linger
@item struct linger

@file{sys/socket.h} (BSD):  @ref{Socket-Level Options}.

@comment link
@item int link (const char *@var{oldname}, const char *@var{newname})

@file{unistd.h} (POSIX.1):  @ref{Hard Links}.

@comment linkat
@item int linkat (int oldfd, const char *@var{oldname}, int newfd, const char *@var{newname}, int flags)

@file{unistd.h} (POSIX.1):  @ref{Hard Links}.

@comment lio_listio
@item int lio_listio (int @var{mode}, struct aiocb *const @var{list}[], int @var{nent}, struct sigevent *@var{sig})

@file{aio.h} (POSIX.1b):  @ref{Asynchronous Reads/Writes}.

@comment lio_listio64
@item int lio_listio64 (int @var{mode}, struct aiocb64 *const @var{list}[], int @var{nent}, struct sigevent *@var{sig})

@file{aio.h} (Unix98):  @ref{Asynchronous Reads/Writes}.

@comment listen
@item int listen (int @var{socket}, int @var{n})

@file{sys/socket.h} (BSD):  @ref{Listening}.

@comment llabs
@item long long int llabs (long long int @var{number})

@file{stdlib.h} (ISO):  @ref{Absolute Value}.

@comment lldiv
@item lldiv_t lldiv (long long int @var{numerator}, long long int @var{denominator})

@file{stdlib.h} (ISO):  @ref{Integer Division}.

@comment lldiv_t
@item lldiv_t

@file{stdlib.h} (ISO):  @ref{Integer Division}.

@comment llogb
@item long int llogb (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment llogbf
@item long int llogbf (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment llogbfN
@item long int llogbfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment llogbfNx
@item long int llogbfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment llogbl
@item long int llogbl (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment llrint
@item long long int llrint (double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment llrintf
@item long long int llrintf (float @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment llrintfN
@item long long int llrintfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment llrintfNx
@item long long int llrintfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment llrintl
@item long long int llrintl (long double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment llround
@item long long int llround (double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment llroundf
@item long long int llroundf (float @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment llroundfN
@item long long int llroundfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment llroundfNx
@item long long int llroundfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment llroundl
@item long long int llroundl (long double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment localeconv
@item struct lconv * localeconv (void)

@file{locale.h} (ISO):  @ref{The Lame Way to Locale Data}.

@comment localtime
@item struct tm * localtime (const time_t *@var{time})

@file{time.h} (ISO):  @ref{Broken-down Time}.

@comment localtime_r
@item struct tm * localtime_r (const time_t *@var{time}, struct tm *@var{resultp})

@file{time.h} (POSIX.1c):  @ref{Broken-down Time}.

@comment log
@item double log (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment log10
@item double log10 (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment log10f
@item float log10f (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment log10fN
@item _FloatN log10fN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment log10fNx
@item _FloatNx log10fNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment log10l
@item long double log10l (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment log1p
@item double log1p (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment log1pf
@item float log1pf (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment log1pfN
@item _FloatN log1pfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment log1pfNx
@item _FloatNx log1pfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment log1pl
@item long double log1pl (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment log2
@item double log2 (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment log2f
@item float log2f (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment log2fN
@item _FloatN log2fN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment log2fNx
@item _FloatNx log2fNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment log2l
@item long double log2l (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment logb
@item double logb (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment logbf
@item float logbf (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment logbfN
@item _FloatN logbfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment logbfNx
@item _FloatNx logbfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment logbl
@item long double logbl (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment logf
@item float logf (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment logfN
@item _FloatN logfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment logfNx
@item _FloatNx logfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment login
@item void login (const struct utmp *@var{entry})

@file{utmp.h} (BSD):  @ref{Logging In and Out}.

@comment login_tty
@item int login_tty (int @var{filedes})

@file{utmp.h} (BSD):  @ref{Logging In and Out}.

@comment logl
@item long double logl (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment logout
@item int logout (const char *@var{ut_line})

@file{utmp.h} (BSD):  @ref{Logging In and Out}.

@comment logwtmp
@item void logwtmp (const char *@var{ut_line}, const char *@var{ut_name}, const char *@var{ut_host})

@file{utmp.h} (BSD):  @ref{Logging In and Out}.

@comment longjmp
@item void longjmp (jmp_buf @var{state}, int @var{value})

@file{setjmp.h} (ISO):  @ref{Non-Local Details}.

@comment lrand48
@item long int lrand48 (void)

@file{stdlib.h} (SVID):  @ref{SVID Random}.

@comment lrand48_r
@item int lrand48_r (struct drand48_data *@var{buffer}, long int *@var{result})

@file{stdlib.h} (GNU):  @ref{SVID Random}.

@comment lrint
@item long int lrint (double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment lrintf
@item long int lrintf (float @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment lrintfN
@item long int lrintfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment lrintfNx
@item long int lrintfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment lrintl
@item long int lrintl (long double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment lround
@item long int lround (double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment lroundf
@item long int lroundf (float @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment lroundfN
@item long int lroundfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment lroundfNx
@item long int lroundfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment lroundl
@item long int lroundl (long double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment lsearch
@item void * lsearch (const void *@var{key}, void *@var{base}, size_t *@var{nmemb}, size_t @var{size}, comparison_fn_t @var{compar})

@file{search.h} (SVID):  @ref{Array Search Function}.

@comment lseek
@item off_t lseek (int @var{filedes}, off_t @var{offset}, int @var{whence})

@file{unistd.h} (POSIX.1):  @ref{File Position Primitive}.

@comment lseek64
@item off64_t lseek64 (int @var{filedes}, off64_t @var{offset}, int @var{whence})

@file{unistd.h} (Unix98):  @ref{File Position Primitive}.

@comment lstat
@item int lstat (const char *@var{filename}, struct stat *@var{buf})

@file{sys/stat.h} (BSD):  @ref{Reading Attributes}.

@comment lstat64
@item int lstat64 (const char *@var{filename}, struct stat64 *@var{buf})

@file{sys/stat.h} (Unix98):  @ref{Reading Attributes}.

@comment lutimes
@item int lutimes (const char *@var{filename}, const struct timeval @var{tvp}@t{[2]})

@file{sys/time.h} (BSD):  @ref{File Times}.

@comment madvise
@item int madvise (void *@var{addr}, size_t @var{length}, int @var{advice})

@file{sys/mman.h} (POSIX):  @ref{Memory-mapped I/O}.

@comment makecontext
@item void makecontext (ucontext_t *@var{ucp}, void (*@var{func}) (void), int @var{argc}, @dots{})

@file{ucontext.h} (SVID):  @ref{System V contexts}.

@comment mallinfo2
@item struct mallinfo2

@file{malloc.h} (GNU):  @ref{Statistics of Malloc}.

@comment mallinfo2
@item struct mallinfo2 mallinfo2 (void)

@file{malloc.h} (SVID):  @ref{Statistics of Malloc}.

@comment malloc
@item void * malloc (size_t @var{size})

@file{malloc.h} (ISO):  @ref{Basic Allocation}.

@file{stdlib.h} (ISO):  @ref{Basic Allocation}.

@comment mblen
@item int mblen (const char *@var{string}, size_t @var{size})

@file{stdlib.h} (ISO):  @ref{Non-reentrant Character Conversion}.

@comment mbrlen
@item size_t mbrlen (const char *restrict @var{s}, size_t @var{n}, mbstate_t *@var{ps})

@file{wchar.h} (ISO):  @ref{Converting a Character}.

@comment mbrtowc
@item size_t mbrtowc (wchar_t *restrict @var{pwc}, const char *restrict @var{s}, size_t @var{n}, mbstate_t *restrict @var{ps})

@file{wchar.h} (ISO):  @ref{Converting a Character}.

@comment mbsinit
@item int mbsinit (const mbstate_t *@var{ps})

@file{wchar.h} (ISO):  @ref{Keeping the state}.

@comment mbsnrtowcs
@item size_t mbsnrtowcs (wchar_t *restrict @var{dst}, const char **restrict @var{src}, size_t @var{nmc}, size_t @var{len}, mbstate_t *restrict @var{ps})

@file{wchar.h} (GNU):  @ref{Converting Strings}.

@comment mbsrtowcs
@item size_t mbsrtowcs (wchar_t *restrict @var{dst}, const char **restrict @var{src}, size_t @var{len}, mbstate_t *restrict @var{ps})

@file{wchar.h} (ISO):  @ref{Converting Strings}.

@comment mbstate_t
@item mbstate_t

@file{wchar.h} (ISO):  @ref{Keeping the state}.

@comment mbstowcs
@item size_t mbstowcs (wchar_t *@var{wstring}, const char *@var{string}, size_t @var{size})

@file{stdlib.h} (ISO):  @ref{Non-reentrant String Conversion}.

@comment mbtowc
@item int mbtowc (wchar_t *restrict @var{result}, const char *restrict @var{string}, size_t @var{size})

@file{stdlib.h} (ISO):  @ref{Non-reentrant Character Conversion}.

@comment mcheck
@item int mcheck (void (*@var{abortfn}) (enum mcheck_status @var{status}))

@file{mcheck.h} (GNU):  @ref{Heap Consistency Checking}.

@comment memalign
@item void * memalign (size_t @var{boundary}, size_t @var{size})

@file{malloc.h} (BSD):  @ref{Aligned Memory Blocks}.

@comment memccpy
@item void * memccpy (void *restrict @var{to}, const void *restrict @var{from}, int @var{c}, size_t @var{size})

@file{string.h} (SVID):  @ref{Copying Strings and Arrays}.

@comment memchr
@item void * memchr (const void *@var{block}, int @var{c}, size_t @var{size})

@file{string.h} (ISO):  @ref{Search Functions}.

@comment memcmp
@item int memcmp (const void *@var{a1}, const void *@var{a2}, size_t @var{size})

@file{string.h} (ISO):  @ref{String/Array Comparison}.

@comment memcpy
@item void * memcpy (void *restrict @var{to}, const void *restrict @var{from}, size_t @var{size})

@file{string.h} (ISO):  @ref{Copying Strings and Arrays}.

@comment memfd_create
@item int memfd_create (const char *@var{name}, unsigned int @var{flags})

@file{sys/mman.h} (Linux):  @ref{Memory-mapped I/O}.

@comment memfrob
@item void * memfrob (void *@var{mem}, size_t @var{length})

@file{string.h} (GNU):  @ref{Obfuscating Data}.

@comment memmem
@item void * memmem (const void *@var{haystack}, size_t @var{haystack-len},@*const void *@var{needle}, size_t @var{needle-len})

@file{string.h} (GNU):  @ref{Search Functions}.

@comment memmove
@item void * memmove (void *@var{to}, const void *@var{from}, size_t @var{size})

@file{string.h} (ISO):  @ref{Copying Strings and Arrays}.

@comment mempcpy
@item void * mempcpy (void *restrict @var{to}, const void *restrict @var{from}, size_t @var{size})

@file{string.h} (GNU):  @ref{Copying Strings and Arrays}.

@comment memrchr
@item void * memrchr (const void *@var{block}, int @var{c}, size_t @var{size})

@file{string.h} (GNU):  @ref{Search Functions}.

@comment memset
@item void * memset (void *@var{block}, int @var{c}, size_t @var{size})

@file{string.h} (ISO):  @ref{Copying Strings and Arrays}.

@comment mkdir
@item int mkdir (const char *@var{filename}, mode_t @var{mode})

@file{sys/stat.h} (POSIX.1):  @ref{Creating Directories}.

@comment mkdtemp
@item char * mkdtemp (char *@var{template})

@file{stdlib.h} (BSD):  @ref{Temporary Files}.

@comment mkfifo
@item int mkfifo (const char *@var{filename}, mode_t @var{mode})

@file{sys/stat.h} (POSIX.1):  @ref{FIFO Special Files}.

@comment mknod
@item int mknod (const char *@var{filename}, mode_t @var{mode}, dev_t @var{dev})

@file{sys/stat.h} (BSD):  @ref{Making Special Files}.

@comment mkstemp
@item int mkstemp (char *@var{template})

@file{stdlib.h} (BSD):  @ref{Temporary Files}.

@comment mktemp
@item char * mktemp (char *@var{template})

@file{stdlib.h} (Unix):  @ref{Temporary Files}.

@comment mktime
@item time_t mktime (struct tm *@var{brokentime})

@file{time.h} (ISO):  @ref{Broken-down Time}.

@comment mlock
@item int mlock (const void *@var{addr}, size_t @var{len})

@file{sys/mman.h} (POSIX.1b):  @ref{Page Lock Functions}.

@comment mlock2
@item int mlock2 (const void *@var{addr}, size_t @var{len}, unsigned int @var{flags})

@file{sys/mman.h} (Linux):  @ref{Page Lock Functions}.

@comment mlockall
@item int mlockall (int @var{flags})

@file{sys/mman.h} (POSIX.1b):  @ref{Page Lock Functions}.

@comment mmap
@item void * mmap (void *@var{address}, size_t @var{length}, int @var{protect}, int @var{flags}, int @var{filedes}, off_t @var{offset})

@file{sys/mman.h} (POSIX):  @ref{Memory-mapped I/O}.

@comment mmap64
@item void * mmap64 (void *@var{address}, size_t @var{length}, int @var{protect}, int @var{flags}, int @var{filedes}, off64_t @var{offset})

@file{sys/mman.h} (LFS):  @ref{Memory-mapped I/O}.

@comment mntent
@item struct mntent

@file{mntent.h} (BSD):  @ref{mtab}.

@comment mode_t
@item mode_t

@file{sys/types.h} (POSIX.1):  @ref{Attribute Meanings}.

@comment modf
@item double modf (double @var{value}, double *@var{integer-part})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment modff
@item float modff (float @var{value}, float *@var{integer-part})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment modffN
@item _FloatN modffN (_Float@var{N} @var{value}, _Float@var{N} *@var{integer-part})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment modffNx
@item _FloatNx modffNx (_Float@var{N}x @var{value}, _Float@var{N}x *@var{integer-part})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment modfl
@item long double modfl (long double @var{value}, long double *@var{integer-part})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment mount
@item int mount (const char *@var{special_file}, const char *@var{dir}, const char *@var{fstype}, unsigned long int @var{options}, const void *@var{data})

@file{sys/mount.h} (SVID):  @ref{Mount-Unmount-Remount}.

@file{sys/mount.h} (BSD):  @ref{Mount-Unmount-Remount}.

@comment mprotect
@item int mprotect (void *@var{address}, size_t @var{length}, int @var{protection})

@file{sys/mman.h} (POSIX):  @ref{Memory Protection}.

@comment mrand48
@item long int mrand48 (void)

@file{stdlib.h} (SVID):  @ref{SVID Random}.

@comment mrand48_r
@item int mrand48_r (struct drand48_data *@var{buffer}, long int *@var{result})

@file{stdlib.h} (GNU):  @ref{SVID Random}.

@comment mremap
@item void * mremap (void *@var{address}, size_t @var{length}, size_t @var{new_length}, int @var{flag})

@file{sys/mman.h} (GNU):  @ref{Memory-mapped I/O}.

@comment msync
@item int msync (void *@var{address}, size_t @var{length}, int @var{flags})

@file{sys/mman.h} (POSIX):  @ref{Memory-mapped I/O}.

@comment mtrace
@item void mtrace (void)

@file{mcheck.h} (GNU):  @ref{Tracing malloc}.

@comment mtx_destroy
@item void mtx_destroy (mtx_t *@var{mutex})

@file{threads.h} (C11):  @ref{ISO C Mutexes}.

@comment mtx_init
@item int mtx_init (mtx_t *@var{mutex}, int @var{type})

@file{threads.h} (C11):  @ref{ISO C Mutexes}.

@comment mtx_lock
@item int mtx_lock (mtx_t *@var{mutex})

@file{threads.h} (C11):  @ref{ISO C Mutexes}.

@comment mtx_plain
@item mtx_plain

@file{threads.h} (C11):  @ref{ISO C Mutexes}.

@comment mtx_recursive
@item mtx_recursive

@file{threads.h} (C11):  @ref{ISO C Mutexes}.

@comment mtx_t
@item mtx_t

@file{threads.h} (C11):  @ref{ISO C Mutexes}.

@comment mtx_timed
@item mtx_timed

@file{threads.h} (C11):  @ref{ISO C Mutexes}.

@comment mtx_timedlock
@item int mtx_timedlock (mtx_t *restrict @var{mutex}, const struct timespec *restrict @var{time_point})

@file{threads.h} (C11):  @ref{ISO C Mutexes}.

@comment mtx_trylock
@item int mtx_trylock (mtx_t *@var{mutex})

@file{threads.h} (C11):  @ref{ISO C Mutexes}.

@comment mtx_unlock
@item int mtx_unlock (mtx_t *@var{mutex})

@file{threads.h} (C11):  @ref{ISO C Mutexes}.

@comment munlock
@item int munlock (const void *@var{addr}, size_t @var{len})

@file{sys/mman.h} (POSIX.1b):  @ref{Page Lock Functions}.

@comment munlockall
@item int munlockall (void)

@file{sys/mman.h} (POSIX.1b):  @ref{Page Lock Functions}.

@comment munmap
@item int munmap (void *@var{addr}, size_t @var{length})

@file{sys/mman.h} (POSIX):  @ref{Memory-mapped I/O}.

@comment muntrace
@item void muntrace (void)

@file{mcheck.h} (GNU):  @ref{Tracing malloc}.

@comment nan
@item double nan (const char *@var{tagp})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nanf
@item float nanf (const char *@var{tagp})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nanfN
@item _FloatN nanfN (const char *@var{tagp})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment nanfNx
@item _FloatNx nanfNx (const char *@var{tagp})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment nanl
@item long double nanl (const char *@var{tagp})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nanosleep
@item int nanosleep (const struct timespec *@var{requested_time}, struct timespec *@var{remaining})

@file{time.h} (POSIX.1):  @ref{Sleeping}.

@comment nearbyint
@item double nearbyint (double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment nearbyintf
@item float nearbyintf (float @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment nearbyintfN
@item _FloatN nearbyintfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment nearbyintfNx
@item _FloatNx nearbyintfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment nearbyintl
@item long double nearbyintl (long double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment netent
@item struct netent

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment nextafter
@item double nextafter (double @var{x}, double @var{y})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nextafterf
@item float nextafterf (float @var{x}, float @var{y})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nextafterfN
@item _FloatN nextafterfN (_Float@var{N} @var{x}, _Float@var{N} @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment nextafterfNx
@item _FloatNx nextafterfNx (_Float@var{N}x @var{x}, _Float@var{N}x @var{y})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment nextafterl
@item long double nextafterl (long double @var{x}, long double @var{y})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nextdown
@item double nextdown (double @var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nextdownf
@item float nextdownf (float @var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nextdownfN
@item _FloatN nextdownfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment nextdownfNx
@item _FloatNx nextdownfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment nextdownl
@item long double nextdownl (long double @var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nexttoward
@item double nexttoward (double @var{x}, long double @var{y})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nexttowardf
@item float nexttowardf (float @var{x}, long double @var{y})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nexttowardl
@item long double nexttowardl (long double @var{x}, long double @var{y})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nextup
@item double nextup (double @var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nextupf
@item float nextupf (float @var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nextupfN
@item _FloatN nextupfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment nextupfNx
@item _FloatNx nextupfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment nextupl
@item long double nextupl (long double @var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment nftw
@item int nftw (const char *@var{filename}, __nftw_func_t @var{func}, int @var{descriptors}, int @var{flag})

@file{ftw.h} (XPG4.2):  @ref{Working with Directory Trees}.

@comment nftw64
@item int nftw64 (const char *@var{filename}, __nftw64_func_t @var{func}, int @var{descriptors}, int @var{flag})

@file{ftw.h} (Unix98):  @ref{Working with Directory Trees}.

@comment ngettext
@item char * ngettext (const char *@var{msgid1}, const char *@var{msgid2}, unsigned long int @var{n})

@file{libintl.h} (GNU):  @ref{Advanced gettext functions}.

@comment nice
@item int nice (int @var{increment})

@file{unistd.h} (BSD):  @ref{Traditional Scheduling Functions}.

@comment nl_langinfo
@item char * nl_langinfo (nl_item @var{item})

@file{langinfo.h} (XOPEN):  @ref{The Elegant and Fast Way}.

@comment nlink_t
@item nlink_t

@file{sys/types.h} (POSIX.1):  @ref{Attribute Meanings}.

@comment nrand48
@item long int nrand48 (unsigned short int @var{xsubi}[3])

@file{stdlib.h} (SVID):  @ref{SVID Random}.

@comment nrand48_r
@item int nrand48_r (unsigned short int @var{xsubi}[3], struct drand48_data *@var{buffer}, long int *@var{result})

@file{stdlib.h} (GNU):  @ref{SVID Random}.

@comment ntohl
@item uint32_t ntohl (uint32_t @var{netlong})

@file{netinet/in.h} (BSD):  @ref{Byte Order}.

@comment ntohs
@item uint16_t ntohs (uint16_t @var{netshort})

@file{netinet/in.h} (BSD):  @ref{Byte Order}.

@comment ntp_adjtime
@item int ntp_adjtime (struct timex *@var{tptr})

@file{sys/timex.h} (GNU):  @ref{Setting and Adjusting the Time}.

@comment ntp_gettime
@item int ntp_gettime (struct ntptimeval *@var{tptr})

@file{sys/timex.h} (GNU):  @ref{Setting and Adjusting the Time}.

@comment obstack
@item struct obstack

@file{obstack.h} (GNU):  @ref{Creating Obstacks}.

@comment obstack_1grow
@item void obstack_1grow (struct obstack *@var{obstack-ptr}, char @var{c})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_1grow_fast
@item void obstack_1grow_fast (struct obstack *@var{obstack-ptr}, char @var{c})

@file{obstack.h} (GNU):  @ref{Extra Fast Growing}.

@comment obstack_alignment_mask
@item int obstack_alignment_mask (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Obstacks Data Alignment}.

@comment obstack_alloc
@item void * obstack_alloc (struct obstack *@var{obstack-ptr}, int @var{size})

@file{obstack.h} (GNU):  @ref{Allocation in an Obstack}.

@comment obstack_alloc_failed_handler
@item obstack_alloc_failed_handler

@file{obstack.h} (GNU):  @ref{Preparing for Obstacks}.

@comment obstack_base
@item void * obstack_base (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Status of an Obstack}.

@comment obstack_blank
@item void obstack_blank (struct obstack *@var{obstack-ptr}, int @var{size})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_blank_fast
@item void obstack_blank_fast (struct obstack *@var{obstack-ptr}, int @var{size})

@file{obstack.h} (GNU):  @ref{Extra Fast Growing}.

@comment obstack_chunk_size
@item int obstack_chunk_size (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Obstack Chunks}.

@comment obstack_copy
@item void * obstack_copy (struct obstack *@var{obstack-ptr}, void *@var{address}, int @var{size})

@file{obstack.h} (GNU):  @ref{Allocation in an Obstack}.

@comment obstack_copy0
@item void * obstack_copy0 (struct obstack *@var{obstack-ptr}, void *@var{address}, int @var{size})

@file{obstack.h} (GNU):  @ref{Allocation in an Obstack}.

@comment obstack_finish
@item void * obstack_finish (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_free
@item void obstack_free (struct obstack *@var{obstack-ptr}, void *@var{object})

@file{obstack.h} (GNU):  @ref{Freeing Obstack Objects}.

@comment obstack_grow
@item void obstack_grow (struct obstack *@var{obstack-ptr}, void *@var{data}, int @var{size})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_grow0
@item void obstack_grow0 (struct obstack *@var{obstack-ptr}, void *@var{data}, int @var{size})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_init
@item int obstack_init (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Preparing for Obstacks}.

@comment obstack_int_grow
@item void obstack_int_grow (struct obstack *@var{obstack-ptr}, int @var{data})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_int_grow_fast
@item void obstack_int_grow_fast (struct obstack *@var{obstack-ptr}, int @var{data})

@file{obstack.h} (GNU):  @ref{Extra Fast Growing}.

@comment obstack_next_free
@item void * obstack_next_free (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Status of an Obstack}.

@comment obstack_object_size
@item int obstack_object_size (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@file{obstack.h} (GNU):  @ref{Status of an Obstack}.

@comment obstack_printf
@item int obstack_printf (struct obstack *@var{obstack}, const char *@var{template}, @dots{})

@file{stdio.h} (GNU):  @ref{Dynamic Output}.

@comment obstack_ptr_grow
@item void obstack_ptr_grow (struct obstack *@var{obstack-ptr}, void *@var{data})

@file{obstack.h} (GNU):  @ref{Growing Objects}.

@comment obstack_ptr_grow_fast
@item void obstack_ptr_grow_fast (struct obstack *@var{obstack-ptr}, void *@var{data})

@file{obstack.h} (GNU):  @ref{Extra Fast Growing}.

@comment obstack_room
@item int obstack_room (struct obstack *@var{obstack-ptr})

@file{obstack.h} (GNU):  @ref{Extra Fast Growing}.

@comment obstack_vprintf
@item int obstack_vprintf (struct obstack *@var{obstack}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (GNU):  @ref{Variable Arguments Output}.

@comment off64_t
@item off64_t

@file{sys/types.h} (Unix98):  @ref{File Position Primitive}.

@comment off_t
@item off_t

@file{sys/types.h} (POSIX.1):  @ref{File Position Primitive}.

@comment offsetof
@item size_t offsetof (@var{type}, @var{member})

@file{stddef.h} (ISO):  @ref{Structure Measurement}.

@comment on_exit
@item int on_exit (void (*@var{function})(int @var{status}, void *@var{arg}), void *@var{arg})

@file{stdlib.h} (SunOS):  @ref{Cleanups on Exit}.

@comment once_flag
@item once_flag

@file{threads.h} (C11):  @ref{Call Once}.

@comment open
@item int open (const char *@var{filename}, int @var{flags}[, mode_t @var{mode}])

@file{fcntl.h} (POSIX.1):  @ref{Opening and Closing Files}.

@comment open64
@item int open64 (const char *@var{filename}, int @var{flags}[, mode_t @var{mode}])

@file{fcntl.h} (Unix98):  @ref{Opening and Closing Files}.

@comment open_memstream
@item FILE * open_memstream (char **@var{ptr}, size_t *@var{sizeloc})

@file{stdio.h} (GNU):  @ref{String Streams}.

@comment opendir
@item DIR * opendir (const char *@var{dirname})

@file{dirent.h} (POSIX.1):  @ref{Opening a Directory}.

@comment openlog
@item void openlog (const char *@var{ident}, int @var{option}, int @var{facility})

@file{syslog.h} (BSD):  @ref{openlog}.

@comment openpty
@item int openpty (int *@var{amaster}, int *@var{aslave}, char *@var{name}, const struct termios *@var{termp}, const struct winsize *@var{winp})

@file{pty.h} (BSD):  @ref{Pseudo-Terminal Pairs}.

@comment optarg
@item char * optarg

@file{unistd.h} (POSIX.2):  @ref{Using Getopt}.

@comment opterr
@item int opterr

@file{unistd.h} (POSIX.2):  @ref{Using Getopt}.

@comment optind
@item int optind

@file{unistd.h} (POSIX.2):  @ref{Using Getopt}.

@comment option
@item struct option

@file{getopt.h} (GNU):  @ref{Getopt Long Options}.

@comment optopt
@item int optopt

@file{unistd.h} (POSIX.2):  @ref{Using Getopt}.

@comment parse_printf_format
@item size_t parse_printf_format (const char *@var{template}, size_t @var{n}, int *@var{argtypes})

@file{printf.h} (GNU):  @ref{Parsing a Template String}.

@comment passwd
@item struct passwd

@file{pwd.h} (POSIX.1):  @ref{User Data Structure}.

@comment pathconf
@item long int pathconf (const char *@var{filename}, int @var{parameter})

@file{unistd.h} (POSIX.1):  @ref{Pathconf}.

@comment pause
@item int pause (void)

@file{unistd.h} (POSIX.1):  @ref{Using Pause}.

@comment pclose
@item int pclose (FILE *@var{stream})

@file{stdio.h} (POSIX.2):  @ref{Pipe to a Subprocess}.

@file{stdio.h} (SVID):  @ref{Pipe to a Subprocess}.

@file{stdio.h} (BSD):  @ref{Pipe to a Subprocess}.

@comment perror
@item void perror (const char *@var{message})

@file{stdio.h} (ISO):  @ref{Error Messages}.

@comment pid_t
@item pid_t

@file{sys/types.h} (POSIX.1):  @ref{Process Identification}.

@comment pipe
@item int pipe (int @var{filedes}@t{[2]})

@file{unistd.h} (POSIX.1):  @ref{Creating a Pipe}.

@comment pkey_alloc
@item int pkey_alloc (unsigned int @var{flags}, unsigned int @var{restrictions})

@file{sys/mman.h} (Linux):  @ref{Memory Protection}.

@comment pkey_free
@item int pkey_free (int @var{key})

@file{sys/mman.h} (Linux):  @ref{Memory Protection}.

@comment pkey_get
@item int pkey_get (int @var{key})

@file{sys/mman.h} (Linux):  @ref{Memory Protection}.

@comment pkey_mprotect
@item int pkey_mprotect (void *@var{address}, size_t @var{length}, int @var{protection}, int @var{key})

@file{sys/mman.h} (Linux):  @ref{Memory Protection}.

@comment pkey_set
@item int pkey_set (int @var{key}, unsigned int @var{rights})

@file{sys/mman.h} (Linux):  @ref{Memory Protection}.

@comment popen
@item FILE * popen (const char *@var{command}, const char *@var{mode})

@file{stdio.h} (POSIX.2):  @ref{Pipe to a Subprocess}.

@file{stdio.h} (SVID):  @ref{Pipe to a Subprocess}.

@file{stdio.h} (BSD):  @ref{Pipe to a Subprocess}.

@comment posix_memalign
@item int posix_memalign (void **@var{memptr}, size_t @var{alignment}, size_t @var{size})

@file{stdlib.h} (POSIX):  @ref{Aligned Memory Blocks}.

@comment pow
@item double pow (double @var{base}, double @var{power})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment powf
@item float powf (float @var{base}, float @var{power})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment powfN
@item _FloatN powfN (_Float@var{N} @var{base}, _Float@var{N} @var{power})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment powfNx
@item _FloatNx powfNx (_Float@var{N}x @var{base}, _Float@var{N}x @var{power})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment powl
@item long double powl (long double @var{base}, long double @var{power})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment pread
@item ssize_t pread (int @var{filedes}, void *@var{buffer}, size_t @var{size}, off_t @var{offset})

@file{unistd.h} (Unix98):  @ref{I/O Primitives}.

@comment pread64
@item ssize_t pread64 (int @var{filedes}, void *@var{buffer}, size_t @var{size}, off64_t @var{offset})

@file{unistd.h} (Unix98):  @ref{I/O Primitives}.

@comment preadv
@item ssize_t preadv (int @var{fd}, const struct iovec *@var{iov}, int @var{iovcnt}, off_t @var{offset})

@file{sys/uio.h} (BSD):  @ref{Scatter-Gather}.

@comment preadv2
@item ssize_t preadv2 (int @var{fd}, const struct iovec *@var{iov}, int @var{iovcnt}, off_t @var{offset}, int @var{flags})

@file{sys/uio.h} (GNU):  @ref{Scatter-Gather}.

@comment preadv64
@item ssize_t preadv64 (int @var{fd}, const struct iovec *@var{iov}, int @var{iovcnt}, off64_t @var{offset})

@file{unistd.h} (BSD):  @ref{Scatter-Gather}.

@comment preadv64v2
@item ssize_t preadv64v2 (int @var{fd}, const struct iovec *@var{iov}, int @var{iovcnt}, off64_t @var{offset}, int @var{flags})

@file{unistd.h} (GNU):  @ref{Scatter-Gather}.

@comment printf
@item int printf (const char *@var{template}, @dots{})

@file{stdio.h} (ISO):  @ref{Formatted Output Functions}.

@comment printf_arginfo_function
@item printf_arginfo_function

@file{printf.h} (GNU):  @ref{Defining the Output Handler}.

@comment printf_function
@item printf_function

@file{printf.h} (GNU):  @ref{Defining the Output Handler}.

@comment printf_info
@item struct printf_info

@file{printf.h} (GNU):  @ref{Conversion Specifier Options}.

@comment printf_size
@item int printf_size (FILE *@var{fp}, const struct printf_info *@var{info}, const void *const *@var{args})

@file{printf.h} (GNU):  @ref{Predefined Printf Handlers}.

@comment printf_size_info
@item int printf_size_info (const struct printf_info *@var{info}, size_t @var{n}, int *@var{argtypes})

@file{printf.h} (GNU):  @ref{Predefined Printf Handlers}.

@comment program_invocation_name
@item char * program_invocation_name

@file{errno.h} (GNU):  @ref{Error Messages}.

@comment program_invocation_short_name
@item char * program_invocation_short_name

@file{errno.h} (GNU):  @ref{Error Messages}.

@comment protoent
@item struct protoent

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment psignal
@item void psignal (int @var{signum}, const char *@var{message})

@file{signal.h} (BSD):  @ref{Signal Messages}.

@comment pthread_attr_getsigmask_np
@item int pthread_attr_getsigmask_np (const pthread_attr_t *@var{attr}, sigset_t *@var{sigmask})

@file{pthread.h} (GNU):  @ref{Initial Thread Signal Mask}.

@comment pthread_attr_setsigmask_np
@item int pthread_attr_setsigmask_np (pthread_attr_t *@var{attr}, const sigset_t *@var{sigmask})

@file{pthread.h} (GNU):  @ref{Initial Thread Signal Mask}.

@comment pthread_getattr_default_np
@item int pthread_getattr_default_np (pthread_attr_t *@var{attr})

@file{pthread.h} (GNU):  @ref{Default Thread Attributes}.

@comment pthread_getspecific
@item void *pthread_getspecific (pthread_key_t @var{key})

@file{pthread.h} (POSIX):  @ref{Thread-specific Data}.

@comment pthread_key_create
@item int pthread_key_create (pthread_key_t *@var{key}, void (*@var{destructor})(void*))

@file{pthread.h} (POSIX):  @ref{Thread-specific Data}.

@comment pthread_key_delete
@item int pthread_key_delete (pthread_key_t @var{key})

@file{pthread.h} (POSIX):  @ref{Thread-specific Data}.

@comment pthread_setattr_default_np
@item int pthread_setattr_default_np (pthread_attr_t *@var{attr})

@file{pthread.h} (GNU):  @ref{Default Thread Attributes}.

@comment pthread_setspecific
@item int pthread_setspecific (pthread_key_t @var{key}, const void *@var{value})

@file{pthread.h} (POSIX):  @ref{Thread-specific Data}.

@comment ptrdiff_t
@item ptrdiff_t

@file{stddef.h} (ISO):  @ref{Important Data Types}.

@comment ptsname
@item char * ptsname (int @var{filedes})

@file{stdlib.h} (SVID):  @ref{Allocation}.

@file{stdlib.h} (XPG4.2):  @ref{Allocation}.

@comment ptsname_r
@item int ptsname_r (int @var{filedes}, char *@var{buf}, size_t @var{len})

@file{stdlib.h} (GNU):  @ref{Allocation}.

@comment putc
@item int putc (int @var{c}, FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{Simple Output}.

@comment putc_unlocked
@item int putc_unlocked (int @var{c}, FILE *@var{stream})

@file{stdio.h} (POSIX):  @ref{Simple Output}.

@comment putchar
@item int putchar (int @var{c})

@file{stdio.h} (ISO):  @ref{Simple Output}.

@comment putchar_unlocked
@item int putchar_unlocked (int @var{c})

@file{stdio.h} (POSIX):  @ref{Simple Output}.

@comment putenv
@item int putenv (char *@var{string})

@file{stdlib.h} (SVID):  @ref{Environment Access}.

@comment putpwent
@item int putpwent (const struct passwd *@var{p}, FILE *@var{stream})

@file{pwd.h} (SVID):  @ref{Writing a User Entry}.

@comment puts
@item int puts (const char *@var{s})

@file{stdio.h} (ISO):  @ref{Simple Output}.

@comment pututline
@item struct utmp * pututline (const struct utmp *@var{utmp})

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@comment pututxline
@item struct utmpx * pututxline (const struct utmpx *@var{utmp})

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment putw
@item int putw (int @var{w}, FILE *@var{stream})

@file{stdio.h} (SVID):  @ref{Simple Output}.

@comment putwc
@item wint_t putwc (wchar_t @var{wc}, FILE *@var{stream})

@file{wchar.h} (ISO):  @ref{Simple Output}.

@comment putwc_unlocked
@item wint_t putwc_unlocked (wchar_t @var{wc}, FILE *@var{stream})

@file{wchar.h} (GNU):  @ref{Simple Output}.

@comment putwchar
@item wint_t putwchar (wchar_t @var{wc})

@file{wchar.h} (ISO):  @ref{Simple Output}.

@comment putwchar_unlocked
@item wint_t putwchar_unlocked (wchar_t @var{wc})

@file{wchar.h} (GNU):  @ref{Simple Output}.

@comment pwrite
@item ssize_t pwrite (int @var{filedes}, const void *@var{buffer}, size_t @var{size}, off_t @var{offset})

@file{unistd.h} (Unix98):  @ref{I/O Primitives}.

@comment pwrite64
@item ssize_t pwrite64 (int @var{filedes}, const void *@var{buffer}, size_t @var{size}, off64_t @var{offset})

@file{unistd.h} (Unix98):  @ref{I/O Primitives}.

@comment pwritev
@item ssize_t pwritev (int @var{fd}, const struct iovec *@var{iov}, int @var{iovcnt}, off_t @var{offset})

@file{sys/uio.h} (BSD):  @ref{Scatter-Gather}.

@comment pwritev2
@item ssize_t pwritev2 (int @var{fd}, const struct iovec *@var{iov}, int @var{iovcnt}, off_t @var{offset}, int @var{flags})

@file{sys/uio.h} (GNU):  @ref{Scatter-Gather}.

@comment pwritev64
@item ssize_t pwritev64 (int @var{fd}, const struct iovec *@var{iov}, int @var{iovcnt}, off64_t @var{offset})

@file{unistd.h} (BSD):  @ref{Scatter-Gather}.

@comment pwritev64v2
@item ssize_t pwritev64v2 (int @var{fd}, const struct iovec *@var{iov}, int @var{iovcnt}, off64_t @var{offset}, int @var{flags})

@file{unistd.h} (GNU):  @ref{Scatter-Gather}.

@comment qecvt
@item char * qecvt (long double @var{value}, int @var{ndigit}, int *@var{decpt}, int *@var{neg})

@file{stdlib.h} (GNU):  @ref{System V Number Conversion}.

@comment qecvt_r
@item int qecvt_r (long double @var{value}, int @var{ndigit}, int *@var{decpt}, int *@var{neg}, char *@var{buf}, size_t @var{len})

@file{stdlib.h} (GNU):  @ref{System V Number Conversion}.

@comment qfcvt
@item char * qfcvt (long double @var{value}, int @var{ndigit}, int *@var{decpt}, int *@var{neg})

@file{stdlib.h} (GNU):  @ref{System V Number Conversion}.

@comment qfcvt_r
@item int qfcvt_r (long double @var{value}, int @var{ndigit}, int *@var{decpt}, int *@var{neg}, char *@var{buf}, size_t @var{len})

@file{stdlib.h} (GNU):  @ref{System V Number Conversion}.

@comment qgcvt
@item char * qgcvt (long double @var{value}, int @var{ndigit}, char *@var{buf})

@file{stdlib.h} (GNU):  @ref{System V Number Conversion}.

@comment qsort
@item void qsort (void *@var{array}, size_t @var{count}, size_t @var{size}, comparison_fn_t @var{compare})

@file{stdlib.h} (ISO):  @ref{Array Sort Function}.

@comment raise
@item int raise (int @var{signum})

@file{signal.h} (ISO):  @ref{Signaling Yourself}.

@comment rand
@item int rand (void)

@file{stdlib.h} (ISO):  @ref{ISO Random}.

@comment rand_r
@item int rand_r (unsigned int *@var{seed})

@file{stdlib.h} (POSIX.1):  @ref{ISO Random}.

@comment random
@item long int random (void)

@file{stdlib.h} (BSD):  @ref{BSD Random}.

@comment random_data
@item struct random_data

@file{stdlib.h} (GNU):  @ref{BSD Random}.

@comment random_r
@item int random_r (struct random_data *restrict @var{buf}, int32_t *restrict @var{result})

@file{stdlib.h} (GNU):  @ref{BSD Random}.

@comment rawmemchr
@item void * rawmemchr (const void *@var{block}, int @var{c})

@file{string.h} (GNU):  @ref{Search Functions}.

@comment read
@item ssize_t read (int @var{filedes}, void *@var{buffer}, size_t @var{size})

@file{unistd.h} (POSIX.1):  @ref{I/O Primitives}.

@comment readdir
@item struct dirent * readdir (DIR *@var{dirstream})

@file{dirent.h} (POSIX.1):  @ref{Reading/Closing Directory}.

@comment readdir64
@item struct dirent64 * readdir64 (DIR *@var{dirstream})

@file{dirent.h} (LFS):  @ref{Reading/Closing Directory}.

@comment readdir64_r
@item int readdir64_r (DIR *@var{dirstream}, struct dirent64 *@var{entry}, struct dirent64 **@var{result})

@file{dirent.h} (LFS):  @ref{Reading/Closing Directory}.

@comment readdir_r
@item int readdir_r (DIR *@var{dirstream}, struct dirent *@var{entry}, struct dirent **@var{result})

@file{dirent.h} (GNU):  @ref{Reading/Closing Directory}.

@comment readlink
@item ssize_t readlink (const char *@var{filename}, char *@var{buffer}, size_t @var{size})

@file{unistd.h} (BSD):  @ref{Symbolic Links}.

@comment readv
@item ssize_t readv (int @var{filedes}, const struct iovec *@var{vector}, int @var{count})

@file{sys/uio.h} (BSD):  @ref{Scatter-Gather}.

@comment realloc
@item void * realloc (void *@var{ptr}, size_t @var{newsize})

@file{malloc.h} (ISO):  @ref{Changing Block Size}.

@file{stdlib.h} (ISO):  @ref{Changing Block Size}.

@comment reallocarray
@item void * reallocarray (void *@var{ptr}, size_t @var{nmemb}, size_t @var{size})

@file{malloc.h} (BSD):  @ref{Changing Block Size}.

@file{stdlib.h} (BSD):  @ref{Changing Block Size}.

@comment realpath
@item char * realpath (const char *restrict @var{name}, char *restrict @var{resolved})

@file{stdlib.h} (XPG):  @ref{Symbolic Links}.

@comment recv
@item ssize_t recv (int @var{socket}, void *@var{buffer}, size_t @var{size}, int @var{flags})

@file{sys/socket.h} (BSD):  @ref{Receiving Data}.

@comment recvfrom
@item ssize_t recvfrom (int @var{socket}, void *@var{buffer}, size_t @var{size}, int @var{flags}, struct sockaddr *@var{addr}, socklen_t *@var{length-ptr})

@file{sys/socket.h} (BSD):  @ref{Receiving Datagrams}.

@comment regcomp
@item int regcomp (regex_t *restrict @var{compiled}, const char *restrict @var{pattern}, int @var{cflags})

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment regerror
@item size_t regerror (int @var{errcode}, const regex_t *restrict @var{compiled}, char *restrict @var{buffer}, size_t @var{length})

@file{regex.h} (POSIX.2):  @ref{Regexp Cleanup}.

@comment regex_t
@item regex_t

@file{regex.h} (POSIX.2):  @ref{POSIX Regexp Compilation}.

@comment regexec
@item int regexec (const regex_t *restrict @var{compiled}, const char *restrict @var{string}, size_t @var{nmatch}, regmatch_t @var{matchptr}[restrict], int @var{eflags})

@file{regex.h} (POSIX.2):  @ref{Matching POSIX Regexps}.

@comment regfree
@item void regfree (regex_t *@var{compiled})

@file{regex.h} (POSIX.2):  @ref{Regexp Cleanup}.

@comment register_printf_function
@item int register_printf_function (int @var{spec}, printf_function @var{handler-function}, printf_arginfo_function @var{arginfo-function})

@file{printf.h} (GNU):  @ref{Registering New Conversions}.

@comment regmatch_t
@item regmatch_t

@file{regex.h} (POSIX.2):  @ref{Regexp Subexpressions}.

@comment regoff_t
@item regoff_t

@file{regex.h} (POSIX.2):  @ref{Regexp Subexpressions}.

@comment remainder
@item double remainder (double @var{numerator}, double @var{denominator})

@file{math.h} (ISO):  @ref{Remainder Functions}.

@comment remainderf
@item float remainderf (float @var{numerator}, float @var{denominator})

@file{math.h} (ISO):  @ref{Remainder Functions}.

@comment remainderfN
@item _FloatN remainderfN (_Float@var{N} @var{numerator}, _Float@var{N} @var{denominator})

@file{math.h} (TS 18661-3:2015):  @ref{Remainder Functions}.

@comment remainderfNx
@item _FloatNx remainderfNx (_Float@var{N}x @var{numerator}, _Float@var{N}x @var{denominator})

@file{math.h} (TS 18661-3:2015):  @ref{Remainder Functions}.

@comment remainderl
@item long double remainderl (long double @var{numerator}, long double @var{denominator})

@file{math.h} (ISO):  @ref{Remainder Functions}.

@comment remove
@item int remove (const char *@var{filename})

@file{stdio.h} (ISO):  @ref{Deleting Files}.

@comment rename
@item int rename (const char *@var{oldname}, const char *@var{newname})

@file{stdio.h} (ISO):  @ref{Renaming Files}.

@comment rewind
@item void rewind (FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{File Positioning}.

@comment rewinddir
@item void rewinddir (DIR *@var{dirstream})

@file{dirent.h} (POSIX.1):  @ref{Random Access Directory}.

@comment rindex
@item char * rindex (const char *@var{string}, int @var{c})

@file{string.h} (BSD):  @ref{Search Functions}.

@comment rint
@item double rint (double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment rintf
@item float rintf (float @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment rintfN
@item _FloatN rintfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment rintfNx
@item _FloatNx rintfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment rintl
@item long double rintl (long double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment rlimit
@item struct rlimit

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment rlimit64
@item struct rlimit64

@file{sys/resource.h} (Unix98):  @ref{Limits on Resources}.

@comment rmdir
@item int rmdir (const char *@var{filename})

@file{unistd.h} (POSIX.1):  @ref{Deleting Files}.

@comment round
@item double round (double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment roundeven
@item double roundeven (double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment roundevenf
@item float roundevenf (float @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment roundevenfN
@item _FloatN roundevenfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment roundevenfNx
@item _FloatNx roundevenfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment roundevenl
@item long double roundevenl (long double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment roundf
@item float roundf (float @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment roundfN
@item _FloatN roundfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment roundfNx
@item _FloatNx roundfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment roundl
@item long double roundl (long double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment rpmatch
@item int rpmatch (const char *@var{response})

@file{stdlib.h} (GNU):  @ref{Yes-or-No Questions}.

@comment rusage
@item struct rusage

@file{sys/resource.h} (BSD):  @ref{Resource Usage}.

@comment sbrk
@item void *sbrk (ptrdiff_t @var{delta})

@file{unistd.h} (BSD):  @ref{Resizing the Data Segment}.

@comment scalb
@item double scalb (double @var{value}, double @var{exponent})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment scalbf
@item float scalbf (float @var{value}, float @var{exponent})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment scalbl
@item long double scalbl (long double @var{value}, long double @var{exponent})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment scalbln
@item double scalbln (double @var{x}, long int @var{n})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment scalblnf
@item float scalblnf (float @var{x}, long int @var{n})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment scalblnfN
@item _FloatN scalblnfN (_Float@var{N} @var{x}, long int @var{n})

@file{math.h} (TS 18661-3:2015):  @ref{Normalization Functions}.

@comment scalblnfNx
@item _FloatNx scalblnfNx (_Float@var{N}x @var{x}, long int @var{n})

@file{math.h} (TS 18661-3:2015):  @ref{Normalization Functions}.

@comment scalblnl
@item long double scalblnl (long double @var{x}, long int @var{n})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment scalbn
@item double scalbn (double @var{x}, int @var{n})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment scalbnf
@item float scalbnf (float @var{x}, int @var{n})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment scalbnfN
@item _FloatN scalbnfN (_Float@var{N} @var{x}, int @var{n})

@file{math.h} (TS 18661-3:2015):  @ref{Normalization Functions}.

@comment scalbnfNx
@item _FloatNx scalbnfNx (_Float@var{N}x @var{x}, int @var{n})

@file{math.h} (TS 18661-3:2015):  @ref{Normalization Functions}.

@comment scalbnl
@item long double scalbnl (long double @var{x}, int @var{n})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment scandir
@item int scandir (const char *@var{dir}, struct dirent ***@var{namelist}, int (*@var{selector}) (const struct dirent *), int (*@var{cmp}) (const struct dirent **, const struct dirent **))

@file{dirent.h} (BSD):  @ref{Scanning Directory Content}.

@file{dirent.h} (SVID):  @ref{Scanning Directory Content}.

@comment scandir64
@item int scandir64 (const char *@var{dir}, struct dirent64 ***@var{namelist}, int (*@var{selector}) (const struct dirent64 *), int (*@var{cmp}) (const struct dirent64 **, const struct dirent64 **))

@file{dirent.h} (GNU):  @ref{Scanning Directory Content}.

@comment scanf
@item int scanf (const char *@var{template}, @dots{})

@file{stdio.h} (ISO):  @ref{Formatted Input Functions}.

@comment sched_get_priority_max
@item int sched_get_priority_max (int @var{policy})

@file{sched.h} (POSIX):  @ref{Basic Scheduling Functions}.

@comment sched_get_priority_min
@item int sched_get_priority_min (int @var{policy})

@file{sched.h} (POSIX):  @ref{Basic Scheduling Functions}.

@comment sched_getaffinity
@item int sched_getaffinity (pid_t @var{pid}, size_t @var{cpusetsize}, cpu_set_t *@var{cpuset})

@file{sched.h} (GNU):  @ref{CPU Affinity}.

@comment sched_getparam
@item int sched_getparam (pid_t @var{pid}, struct sched_param *@var{param})

@file{sched.h} (POSIX):  @ref{Basic Scheduling Functions}.

@comment sched_getscheduler
@item int sched_getscheduler (pid_t @var{pid})

@file{sched.h} (POSIX):  @ref{Basic Scheduling Functions}.

@comment sched_param
@item struct sched_param

@file{sched.h} (POSIX):  @ref{Basic Scheduling Functions}.

@comment sched_rr_get_interval
@item int sched_rr_get_interval (pid_t @var{pid}, struct timespec *@var{interval})

@file{sched.h} (POSIX):  @ref{Basic Scheduling Functions}.

@comment sched_setaffinity
@item int sched_setaffinity (pid_t @var{pid}, size_t @var{cpusetsize}, const cpu_set_t *@var{cpuset})

@file{sched.h} (GNU):  @ref{CPU Affinity}.

@comment sched_setparam
@item int sched_setparam (pid_t @var{pid}, const struct sched_param *@var{param})

@file{sched.h} (POSIX):  @ref{Basic Scheduling Functions}.

@comment sched_setscheduler
@item int sched_setscheduler (pid_t @var{pid}, int @var{policy}, const struct sched_param *@var{param})

@file{sched.h} (POSIX):  @ref{Basic Scheduling Functions}.

@comment sched_yield
@item int sched_yield (void)

@file{sched.h} (POSIX):  @ref{Basic Scheduling Functions}.

@comment secure_getenv
@item char * secure_getenv (const char *@var{name})

@file{stdlib.h} (GNU):  @ref{Environment Access}.

@comment seed48
@item unsigned short int * seed48 (unsigned short int @var{seed16v}[3])

@file{stdlib.h} (SVID):  @ref{SVID Random}.

@comment seed48_r
@item int seed48_r (unsigned short int @var{seed16v}[3], struct drand48_data *@var{buffer})

@file{stdlib.h} (GNU):  @ref{SVID Random}.

@comment seekdir
@item void seekdir (DIR *@var{dirstream}, long int @var{pos})

@file{dirent.h} (BSD):  @ref{Random Access Directory}.

@comment select
@item int select (int @var{nfds}, fd_set *@var{read-fds}, fd_set *@var{write-fds}, fd_set *@var{except-fds}, struct timeval *@var{timeout})

@file{sys/types.h} (BSD):  @ref{Waiting for I/O}.

@comment send
@item ssize_t send (int @var{socket}, const void *@var{buffer}, size_t @var{size}, int @var{flags})

@file{sys/socket.h} (BSD):  @ref{Sending Data}.

@comment sendto
@item ssize_t sendto (int @var{socket}, const void *@var{buffer}, size_t @var{size}, int @var{flags}, struct sockaddr *@var{addr}, socklen_t @var{length})

@file{sys/socket.h} (BSD):  @ref{Sending Datagrams}.

@comment servent
@item struct servent

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment setbuf
@item void setbuf (FILE *@var{stream}, char *@var{buf})

@file{stdio.h} (ISO):  @ref{Controlling Buffering}.

@comment setbuffer
@item void setbuffer (FILE *@var{stream}, char *@var{buf}, size_t @var{size})

@file{stdio.h} (BSD):  @ref{Controlling Buffering}.

@comment setcontext
@item int setcontext (const ucontext_t *@var{ucp})

@file{ucontext.h} (SVID):  @ref{System V contexts}.

@comment setdomainname
@item int setdomainname (const char *@var{name}, size_t @var{length})

@file{unistd.h} (???):  @ref{Host Identification}.

@comment setegid
@item int setegid (gid_t @var{newgid})

@file{unistd.h} (POSIX.1):  @ref{Setting Groups}.

@comment setenv
@item int setenv (const char *@var{name}, const char *@var{value}, int @var{replace})

@file{stdlib.h} (BSD):  @ref{Environment Access}.

@comment seteuid
@item int seteuid (uid_t @var{neweuid})

@file{unistd.h} (POSIX.1):  @ref{Setting User ID}.

@comment setfsent
@item int setfsent (void)

@file{fstab.h} (BSD):  @ref{fstab}.

@comment setgid
@item int setgid (gid_t @var{newgid})

@file{unistd.h} (POSIX.1):  @ref{Setting Groups}.

@comment setgrent
@item void setgrent (void)

@file{grp.h} (SVID):  @ref{Scanning All Groups}.

@file{grp.h} (BSD):  @ref{Scanning All Groups}.

@comment setgroups
@item int setgroups (size_t @var{count}, const gid_t *@var{groups})

@file{grp.h} (BSD):  @ref{Setting Groups}.

@comment sethostent
@item void sethostent (int @var{stayopen})

@file{netdb.h} (BSD):  @ref{Host Names}.

@comment sethostid
@item int sethostid (long int @var{id})

@file{unistd.h} (BSD):  @ref{Host Identification}.

@comment sethostname
@item int sethostname (const char *@var{name}, size_t @var{length})

@file{unistd.h} (BSD):  @ref{Host Identification}.

@comment setitimer
@item int setitimer (int @var{which}, const struct itimerval *@var{new}, struct itimerval *@var{old})

@file{sys/time.h} (BSD):  @ref{Setting an Alarm}.

@comment setjmp
@item int setjmp (jmp_buf @var{state})

@file{setjmp.h} (ISO):  @ref{Non-Local Details}.

@comment setlinebuf
@item void setlinebuf (FILE *@var{stream})

@file{stdio.h} (BSD):  @ref{Controlling Buffering}.

@comment setlocale
@item char * setlocale (int @var{category}, const char *@var{locale})

@file{locale.h} (ISO):  @ref{Setting the Locale}.

@comment setlogmask
@item int setlogmask (int @var{mask})

@file{syslog.h} (BSD):  @ref{setlogmask}.

@comment setmntent
@item FILE * setmntent (const char *@var{file}, const char *@var{mode})

@file{mntent.h} (BSD):  @ref{mtab}.

@comment setnetent
@item void setnetent (int @var{stayopen})

@file{netdb.h} (BSD):  @ref{Networks Database}.

@comment setnetgrent
@item int setnetgrent (const char *@var{netgroup})

@file{netdb.h} (BSD):  @ref{Lookup Netgroup}.

@comment setpayload
@item int setpayload (double *@var{x}, double @var{payload})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment setpayloadf
@item int setpayloadf (float *@var{x}, float @var{payload})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment setpayloadfN
@item int setpayloadfN (_Float@var{N} *@var{x}, _Float@var{N} @var{payload})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment setpayloadfNx
@item int setpayloadfNx (_Float@var{N}x *@var{x}, _Float@var{N}x @var{payload})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment setpayloadl
@item int setpayloadl (long double *@var{x}, long double @var{payload})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment setpayloadsig
@item int setpayloadsig (double *@var{x}, double @var{payload})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment setpayloadsigf
@item int setpayloadsigf (float *@var{x}, float @var{payload})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment setpayloadsigfN
@item int setpayloadsigfN (_Float@var{N} *@var{x}, _Float@var{N} @var{payload})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment setpayloadsigfNx
@item int setpayloadsigfNx (_Float@var{N}x *@var{x}, _Float@var{N}x @var{payload})

@file{math.h} (TS 18661-3:2015):  @ref{FP Bit Twiddling}.

@comment setpayloadsigl
@item int setpayloadsigl (long double *@var{x}, long double @var{payload})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment setpgid
@item int setpgid (pid_t @var{pid}, pid_t @var{pgid})

@file{unistd.h} (POSIX.1):  @ref{Process Group Functions}.

@comment setpgrp
@item int setpgrp (pid_t @var{pid}, pid_t @var{pgid})

@file{unistd.h} (BSD):  @ref{Process Group Functions}.

@comment setpriority
@item int setpriority (int @var{class}, int @var{id}, int @var{niceval})

@file{sys/resource.h} (BSD):  @ref{Traditional Scheduling Functions}.

@file{sys/resource.h} (POSIX):  @ref{Traditional Scheduling Functions}.

@comment setprotoent
@item void setprotoent (int @var{stayopen})

@file{netdb.h} (BSD):  @ref{Protocols Database}.

@comment setpwent
@item void setpwent (void)

@file{pwd.h} (SVID):  @ref{Scanning All Users}.

@file{pwd.h} (BSD):  @ref{Scanning All Users}.

@comment setregid
@item int setregid (gid_t @var{rgid}, gid_t @var{egid})

@file{unistd.h} (BSD):  @ref{Setting Groups}.

@comment setreuid
@item int setreuid (uid_t @var{ruid}, uid_t @var{euid})

@file{unistd.h} (BSD):  @ref{Setting User ID}.

@comment setrlimit
@item int setrlimit (int @var{resource}, const struct rlimit *@var{rlp})

@file{sys/resource.h} (BSD):  @ref{Limits on Resources}.

@comment setrlimit64
@item int setrlimit64 (int @var{resource}, const struct rlimit64 *@var{rlp})

@file{sys/resource.h} (Unix98):  @ref{Limits on Resources}.

@comment setservent
@item void setservent (int @var{stayopen})

@file{netdb.h} (BSD):  @ref{Services Database}.

@comment setsid
@item pid_t setsid (void)

@file{unistd.h} (POSIX.1):  @ref{Process Group Functions}.

@comment setsockopt
@item int setsockopt (int @var{socket}, int @var{level}, int @var{optname}, const void *@var{optval}, socklen_t @var{optlen})

@file{sys/socket.h} (BSD):  @ref{Socket Option Functions}.

@comment setstate
@item char * setstate (char *@var{state})

@file{stdlib.h} (BSD):  @ref{BSD Random}.

@comment setstate_r
@item int setstate_r (char *restrict @var{statebuf}, struct random_data *restrict @var{buf})

@file{stdlib.h} (GNU):  @ref{BSD Random}.

@comment settimeofday
@item int settimeofday (const struct timeval *@var{tp}, const void *@var{tzp})

@file{sys/time.h} (BSD):  @ref{Setting and Adjusting the Time}.

@comment setuid
@item int setuid (uid_t @var{newuid})

@file{unistd.h} (POSIX.1):  @ref{Setting User ID}.

@comment setutent
@item void setutent (void)

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@comment setutxent
@item void setutxent (void)

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment setvbuf
@item int setvbuf (FILE *@var{stream}, char *@var{buf}, int @var{mode}, size_t @var{size})

@file{stdio.h} (ISO):  @ref{Controlling Buffering}.

@comment sgttyb
@item struct sgttyb

@file{termios.h} (BSD):  @ref{BSD Terminal Modes}.

@comment shm_open
@item int shm_open (const char *@var{name}, int @var{oflag}, mode_t @var{mode})

@file{sys/mman.h} (POSIX):  @ref{Memory-mapped I/O}.

@comment shutdown
@item int shutdown (int @var{socket}, int @var{how})

@file{sys/socket.h} (BSD):  @ref{Closing a Socket}.

@comment sig_atomic_t
@item sig_atomic_t

@file{signal.h} (ISO):  @ref{Atomic Types}.

@comment sigabbrev_np
@item const char * sigabbrev_np (int @var{signum})

@file{string.h} (GNU):  @ref{Signal Messages}.

@comment sigaction
@item int sigaction (int @var{signum}, const struct sigaction *restrict @var{action}, struct sigaction *restrict @var{old-action})

@file{signal.h} (POSIX.1):  @ref{Advanced Signal Handling}.

@comment sigaction
@item struct sigaction

@file{signal.h} (POSIX.1):  @ref{Advanced Signal Handling}.

@comment sigaddset
@item int sigaddset (sigset_t *@var{set}, int @var{signum})

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment sigaltstack
@item int sigaltstack (const stack_t *restrict @var{stack}, stack_t *restrict @var{oldstack})

@file{signal.h} (XPG):  @ref{Signal Stack}.

@comment sigblock
@item int sigblock (int @var{mask})

@file{signal.h} (BSD):  @ref{BSD Signal Handling}.

@comment sigdelset
@item int sigdelset (sigset_t *@var{set}, int @var{signum})

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment sigdescr_np
@item const char * sigdescr_np (int @var{signum})

@file{string.h} (GNU):  @ref{Signal Messages}.

@comment sigemptyset
@item int sigemptyset (sigset_t *@var{set})

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment sigfillset
@item int sigfillset (sigset_t *@var{set})

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment sighandler_t
@item sighandler_t

@file{signal.h} (GNU):  @ref{Basic Signal Handling}.

@comment siginterrupt
@item int siginterrupt (int @var{signum}, int @var{failflag})

@file{signal.h} (XPG):  @ref{BSD Signal Handling}.

@comment sigismember
@item int sigismember (const sigset_t *@var{set}, int @var{signum})

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment sigjmp_buf
@item sigjmp_buf

@file{setjmp.h} (POSIX.1):  @ref{Non-Local Exits and Signals}.

@comment siglongjmp
@item void siglongjmp (sigjmp_buf @var{state}, int @var{value})

@file{setjmp.h} (POSIX.1):  @ref{Non-Local Exits and Signals}.

@comment sigmask
@item int sigmask (int @var{signum})

@file{signal.h} (BSD):  @ref{BSD Signal Handling}.

@comment signal
@item sighandler_t signal (int @var{signum}, sighandler_t @var{action})

@file{signal.h} (ISO):  @ref{Basic Signal Handling}.

@comment signbit
@item int signbit (@emph{float-type} @var{x})

@file{math.h} (ISO):  @ref{FP Bit Twiddling}.

@comment significand
@item double significand (double @var{x})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment significandf
@item float significandf (float @var{x})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment significandl
@item long double significandl (long double @var{x})

@file{math.h} (BSD):  @ref{Normalization Functions}.

@comment sigpause
@item int sigpause (int @var{mask})

@file{signal.h} (BSD):  @ref{BSD Signal Handling}.

@comment sigpending
@item int sigpending (sigset_t *@var{set})

@file{signal.h} (POSIX.1):  @ref{Checking for Pending Signals}.

@comment sigprocmask
@item int sigprocmask (int @var{how}, const sigset_t *restrict @var{set}, sigset_t *restrict @var{oldset})

@file{signal.h} (POSIX.1):  @ref{Process Signal Mask}.

@comment sigset_t
@item sigset_t

@file{signal.h} (POSIX.1):  @ref{Signal Sets}.

@comment sigsetjmp
@item int sigsetjmp (sigjmp_buf @var{state}, int @var{savesigs})

@file{setjmp.h} (POSIX.1):  @ref{Non-Local Exits and Signals}.

@comment sigsetmask
@item int sigsetmask (int @var{mask})

@file{signal.h} (BSD):  @ref{BSD Signal Handling}.

@comment sigstack
@item int sigstack (struct sigstack *@var{stack}, struct sigstack *@var{oldstack})

@file{signal.h} (BSD):  @ref{Signal Stack}.

@comment sigstack
@item struct sigstack

@file{signal.h} (BSD):  @ref{Signal Stack}.

@comment sigsuspend
@item int sigsuspend (const sigset_t *@var{set})

@file{signal.h} (POSIX.1):  @ref{Sigsuspend}.

@comment sin
@item double sin (double @var{x})

@file{math.h} (ISO):  @ref{Trig Functions}.

@comment sincos
@item void sincos (double @var{x}, double *@var{sinx}, double *@var{cosx})

@file{math.h} (GNU):  @ref{Trig Functions}.

@comment sincosf
@item void sincosf (float @var{x}, float *@var{sinx}, float *@var{cosx})

@file{math.h} (GNU):  @ref{Trig Functions}.

@comment sincosfN
@item _FloatN sincosfN (_Float@var{N} @var{x}, _Float@var{N} *@var{sinx}, _Float@var{N} *@var{cosx})

@file{math.h} (GNU):  @ref{Trig Functions}.

@comment sincosfNx
@item _FloatNx sincosfNx (_Float@var{N}x @var{x}, _Float@var{N}x *@var{sinx}, _Float@var{N}x *@var{cosx})

@file{math.h} (GNU):  @ref{Trig Functions}.

@comment sincosl
@item void sincosl (long double @var{x}, long double *@var{sinx}, long double *@var{cosx})

@file{math.h} (GNU):  @ref{Trig Functions}.

@comment sinf
@item float sinf (float @var{x})

@file{math.h} (ISO):  @ref{Trig Functions}.

@comment sinfN
@item _FloatN sinfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment sinfNx
@item _FloatNx sinfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment sinh
@item double sinh (double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment sinhf
@item float sinhf (float @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment sinhfN
@item _FloatN sinhfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment sinhfNx
@item _FloatNx sinhfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment sinhl
@item long double sinhl (long double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment sinl
@item long double sinl (long double @var{x})

@file{math.h} (ISO):  @ref{Trig Functions}.

@comment size_t
@item size_t

@file{stddef.h} (ISO):  @ref{Important Data Types}.

@comment sleep
@item unsigned int sleep (unsigned int @var{seconds})

@file{unistd.h} (POSIX.1):  @ref{Sleeping}.

@comment snprintf
@item int snprintf (char *@var{s}, size_t @var{size}, const char *@var{template}, @dots{})

@file{stdio.h} (GNU):  @ref{Formatted Output Functions}.

@comment sockaddr
@item struct sockaddr

@file{sys/socket.h} (BSD):  @ref{Address Formats}.

@comment sockaddr_in
@item struct sockaddr_in

@file{netinet/in.h} (BSD):  @ref{Internet Address Formats}.

@comment sockaddr_un
@item struct sockaddr_un

@file{sys/un.h} (BSD):  @ref{Local Namespace Details}.

@comment socket
@item int socket (int @var{namespace}, int @var{style}, int @var{protocol})

@file{sys/socket.h} (BSD):  @ref{Creating a Socket}.

@comment socketpair
@item int socketpair (int @var{namespace}, int @var{style}, int @var{protocol}, int @var{filedes}@t{[2]})

@file{sys/socket.h} (BSD):  @ref{Socket Pairs}.

@comment speed_t
@item speed_t

@file{termios.h} (POSIX.1):  @ref{Line Speed}.

@comment sprintf
@item int sprintf (char *@var{s}, const char *@var{template}, @dots{})

@file{stdio.h} (ISO):  @ref{Formatted Output Functions}.

@comment sqrt
@item double sqrt (double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment sqrtf
@item float sqrtf (float @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment sqrtfN
@item _FloatN sqrtfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment sqrtfNx
@item _FloatNx sqrtfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Exponents and Logarithms}.

@comment sqrtl
@item long double sqrtl (long double @var{x})

@file{math.h} (ISO):  @ref{Exponents and Logarithms}.

@comment srand
@item void srand (unsigned int @var{seed})

@file{stdlib.h} (ISO):  @ref{ISO Random}.

@comment srand48
@item void srand48 (long int @var{seedval})

@file{stdlib.h} (SVID):  @ref{SVID Random}.

@comment srand48_r
@item int srand48_r (long int @var{seedval}, struct drand48_data *@var{buffer})

@file{stdlib.h} (GNU):  @ref{SVID Random}.

@comment srandom
@item void srandom (unsigned int @var{seed})

@file{stdlib.h} (BSD):  @ref{BSD Random}.

@comment srandom_r
@item int srandom_r (unsigned int @var{seed}, struct random_data *@var{buf})

@file{stdlib.h} (GNU):  @ref{BSD Random}.

@comment sscanf
@item int sscanf (const char *@var{s}, const char *@var{template}, @dots{})

@file{stdio.h} (ISO):  @ref{Formatted Input Functions}.

@comment ssignal
@item sighandler_t ssignal (int @var{signum}, sighandler_t @var{action})

@file{signal.h} (SVID):  @ref{Basic Signal Handling}.

@comment ssize_t
@item ssize_t

@file{unistd.h} (POSIX.1):  @ref{I/O Primitives}.

@comment stack_t
@item stack_t

@file{signal.h} (XPG):  @ref{Signal Stack}.

@comment stat
@item int stat (const char *@var{filename}, struct stat *@var{buf})

@file{sys/stat.h} (POSIX.1):  @ref{Reading Attributes}.

@comment stat
@item struct stat

@file{sys/stat.h} (POSIX.1):  @ref{Attribute Meanings}.

@comment stat64
@item int stat64 (const char *@var{filename}, struct stat64 *@var{buf})

@file{sys/stat.h} (Unix98):  @ref{Reading Attributes}.

@comment stat64
@item struct stat64

@file{sys/stat.h} (LFS):  @ref{Attribute Meanings}.

@comment stderr
@item FILE * stderr

@file{stdio.h} (ISO):  @ref{Standard Streams}.

@comment stdin
@item FILE * stdin

@file{stdio.h} (ISO):  @ref{Standard Streams}.

@comment stdout
@item FILE * stdout

@file{stdio.h} (ISO):  @ref{Standard Streams}.

@comment stime
@item int stime (const time_t *@var{newtime})

@file{time.h} (SVID):  @ref{Setting and Adjusting the Time}.

@file{time.h} (XPG):  @ref{Setting and Adjusting the Time}.

@comment stpcpy
@item char * stpcpy (char *restrict @var{to}, const char *restrict @var{from})

@file{string.h} (Unknown origin):  @ref{Copying Strings and Arrays}.

@comment stpncpy
@item char * stpncpy (char *restrict @var{to}, const char *restrict @var{from}, size_t @var{size})

@file{string.h} (GNU):  @ref{Truncating Strings}.

@comment strcasecmp
@item int strcasecmp (const char *@var{s1}, const char *@var{s2})

@file{string.h} (BSD):  @ref{String/Array Comparison}.

@comment strcasestr
@item char * strcasestr (const char *@var{haystack}, const char *@var{needle})

@file{string.h} (GNU):  @ref{Search Functions}.

@comment strcat
@item char * strcat (char *restrict @var{to}, const char *restrict @var{from})

@file{string.h} (ISO):  @ref{Concatenating Strings}.

@comment strchr
@item char * strchr (const char *@var{string}, int @var{c})

@file{string.h} (ISO):  @ref{Search Functions}.

@comment strchrnul
@item char * strchrnul (const char *@var{string}, int @var{c})

@file{string.h} (GNU):  @ref{Search Functions}.

@comment strcmp
@item int strcmp (const char *@var{s1}, const char *@var{s2})

@file{string.h} (ISO):  @ref{String/Array Comparison}.

@comment strcoll
@item int strcoll (const char *@var{s1}, const char *@var{s2})

@file{string.h} (ISO):  @ref{Collation Functions}.

@comment strcpy
@item char * strcpy (char *restrict @var{to}, const char *restrict @var{from})

@file{string.h} (ISO):  @ref{Copying Strings and Arrays}.

@comment strcspn
@item size_t strcspn (const char *@var{string}, const char *@var{stopset})

@file{string.h} (ISO):  @ref{Search Functions}.

@comment strdup
@item char * strdup (const char *@var{s})

@file{string.h} (SVID):  @ref{Copying Strings and Arrays}.

@comment strdupa
@item char * strdupa (const char *@var{s})

@file{string.h} (GNU):  @ref{Copying Strings and Arrays}.

@comment strerror
@item char * strerror (int @var{errnum})

@file{string.h} (ISO):  @ref{Error Messages}.

@comment strerror_r
@item char * strerror_r (int @var{errnum}, char *@var{buf}, size_t @var{n})

@file{string.h} (GNU):  @ref{Error Messages}.

@comment strerrordesc_np
@item const char * strerrordesc_np (int @var{errnum})

@file{string.h} (GNU):  @ref{Error Messages}.

@comment strerrorname_np
@item const char * strerrorname_np (int @var{errnum})

@file{string.h} (GNU):  @ref{Error Messages}.

@comment strfromd
@item int strfromd (char *restrict @var{string}, size_t @var{size}, const char *restrict @var{format}, double @var{value})

@file{stdlib.h} (ISO/IEC TS 18661-1):  @ref{Printing of Floats}.

@comment strfromf
@item int strfromf (char *restrict @var{string}, size_t @var{size}, const char *restrict @var{format}, float @var{value})

@file{stdlib.h} (ISO/IEC TS 18661-1):  @ref{Printing of Floats}.

@comment strfromfN
@item int strfromfN (char *restrict @var{string}, size_t @var{size}, const char *restrict @var{format}, _Float@var{N} @var{value})

@file{stdlib.h} (ISO/IEC TS 18661-3):  @ref{Printing of Floats}.

@comment strfromfNx
@item int strfromfNx (char *restrict @var{string}, size_t @var{size}, const char *restrict @var{format}, _Float@var{N}x @var{value})

@file{stdlib.h} (ISO/IEC TS 18661-3):  @ref{Printing of Floats}.

@comment strfroml
@item int strfroml (char *restrict @var{string}, size_t @var{size}, const char *restrict @var{format}, long double @var{value})

@file{stdlib.h} (ISO/IEC TS 18661-1):  @ref{Printing of Floats}.

@comment strfry
@item char * strfry (char *@var{string})

@file{string.h} (GNU):  @ref{Shuffling Bytes}.

@comment strftime
@item size_t strftime (char *@var{s}, size_t @var{size}, const char *@var{template}, const struct tm *@var{brokentime})

@file{time.h} (ISO):  @ref{Formatting Calendar Time}.

@comment strlen
@item size_t strlen (const char *@var{s})

@file{string.h} (ISO):  @ref{String Length}.

@comment strncasecmp
@item int strncasecmp (const char *@var{s1}, const char *@var{s2}, size_t @var{n})

@file{string.h} (BSD):  @ref{String/Array Comparison}.

@comment strncat
@item char * strncat (char *restrict @var{to}, const char *restrict @var{from}, size_t @var{size})

@file{string.h} (ISO):  @ref{Truncating Strings}.

@comment strncmp
@item int strncmp (const char *@var{s1}, const char *@var{s2}, size_t @var{size})

@file{string.h} (ISO):  @ref{String/Array Comparison}.

@comment strncpy
@item char * strncpy (char *restrict @var{to}, const char *restrict @var{from}, size_t @var{size})

@file{string.h} (C90):  @ref{Truncating Strings}.

@comment strndup
@item char * strndup (const char *@var{s}, size_t @var{size})

@file{string.h} (GNU):  @ref{Truncating Strings}.

@comment strndupa
@item char * strndupa (const char *@var{s}, size_t @var{size})

@file{string.h} (GNU):  @ref{Truncating Strings}.

@comment strnlen
@item size_t strnlen (const char *@var{s}, size_t @var{maxlen})

@file{string.h} (GNU):  @ref{String Length}.

@comment strpbrk
@item char * strpbrk (const char *@var{string}, const char *@var{stopset})

@file{string.h} (ISO):  @ref{Search Functions}.

@comment strptime
@item char * strptime (const char *@var{s}, const char *@var{fmt}, struct tm *@var{tp})

@file{time.h} (XPG4):  @ref{Low-Level Time String Parsing}.

@comment strrchr
@item char * strrchr (const char *@var{string}, int @var{c})

@file{string.h} (ISO):  @ref{Search Functions}.

@comment strsep
@item char * strsep (char **@var{string_ptr}, const char *@var{delimiter})

@file{string.h} (BSD):  @ref{Finding Tokens in a String}.

@comment strsignal
@item char * strsignal (int @var{signum})

@file{string.h} (GNU):  @ref{Signal Messages}.

@comment strspn
@item size_t strspn (const char *@var{string}, const char *@var{skipset})

@file{string.h} (ISO):  @ref{Search Functions}.

@comment strstr
@item char * strstr (const char *@var{haystack}, const char *@var{needle})

@file{string.h} (ISO):  @ref{Search Functions}.

@comment strtod
@item double strtod (const char *restrict @var{string}, char **restrict @var{tailptr})

@file{stdlib.h} (ISO):  @ref{Parsing of Floats}.

@comment strtof
@item float strtof (const char *@var{string}, char **@var{tailptr})

@file{stdlib.h} (ISO):  @ref{Parsing of Floats}.

@comment strtofN
@item _FloatN strtofN (const char *@var{string}, char **@var{tailptr})

@file{stdlib.h} (ISO/IEC TS 18661-3):  @ref{Parsing of Floats}.

@comment strtofNx
@item _FloatNx strtofNx (const char *@var{string}, char **@var{tailptr})

@file{stdlib.h} (ISO/IEC TS 18661-3):  @ref{Parsing of Floats}.

@comment strtoimax
@item intmax_t strtoimax (const char *restrict @var{string}, char **restrict @var{tailptr}, int @var{base})

@file{inttypes.h} (ISO):  @ref{Parsing of Integers}.

@comment strtok
@item char * strtok (char *restrict @var{newstring}, const char *restrict @var{delimiters})

@file{string.h} (ISO):  @ref{Finding Tokens in a String}.

@comment strtok_r
@item char * strtok_r (char *@var{newstring}, const char *@var{delimiters}, char **@var{save_ptr})

@file{string.h} (POSIX):  @ref{Finding Tokens in a String}.

@comment strtol
@item long int strtol (const char *restrict @var{string}, char **restrict @var{tailptr}, int @var{base})

@file{stdlib.h} (ISO):  @ref{Parsing of Integers}.

@comment strtold
@item long double strtold (const char *@var{string}, char **@var{tailptr})

@file{stdlib.h} (ISO):  @ref{Parsing of Floats}.

@comment strtoll
@item long long int strtoll (const char *restrict @var{string}, char **restrict @var{tailptr}, int @var{base})

@file{stdlib.h} (ISO):  @ref{Parsing of Integers}.

@comment strtoq
@item long long int strtoq (const char *restrict @var{string}, char **restrict @var{tailptr}, int @var{base})

@file{stdlib.h} (BSD):  @ref{Parsing of Integers}.

@comment strtoul
@item unsigned long int strtoul (const char *restrict @var{string}, char **restrict @var{tailptr}, int @var{base})

@file{stdlib.h} (ISO):  @ref{Parsing of Integers}.

@comment strtoull
@item unsigned long long int strtoull (const char *restrict @var{string}, char **restrict @var{tailptr}, int @var{base})

@file{stdlib.h} (ISO):  @ref{Parsing of Integers}.

@comment strtoumax
@item uintmax_t strtoumax (const char *restrict @var{string}, char **restrict @var{tailptr}, int @var{base})

@file{inttypes.h} (ISO):  @ref{Parsing of Integers}.

@comment strtouq
@item unsigned long long int strtouq (const char *restrict @var{string}, char **restrict @var{tailptr}, int @var{base})

@file{stdlib.h} (BSD):  @ref{Parsing of Integers}.

@comment strverscmp
@item int strverscmp (const char *@var{s1}, const char *@var{s2})

@file{string.h} (GNU):  @ref{String/Array Comparison}.

@comment strxfrm
@item size_t strxfrm (char *restrict @var{to}, const char *restrict @var{from}, size_t @var{size})

@file{string.h} (ISO):  @ref{Collation Functions}.

@comment stty
@item int stty (int @var{filedes}, const struct sgttyb *@var{attributes})

@file{sgtty.h} (BSD):  @ref{BSD Terminal Modes}.

@comment swapcontext
@item int swapcontext (ucontext_t *restrict @var{oucp}, const ucontext_t *restrict @var{ucp})

@file{ucontext.h} (SVID):  @ref{System V contexts}.

@comment swprintf
@item int swprintf (wchar_t *@var{ws}, size_t @var{size}, const wchar_t *@var{template}, @dots{})

@file{wchar.h} (GNU):  @ref{Formatted Output Functions}.

@comment swscanf
@item int swscanf (const wchar_t *@var{ws}, const wchar_t *@var{template}, @dots{})

@file{wchar.h} (ISO):  @ref{Formatted Input Functions}.

@comment symlink
@item int symlink (const char *@var{oldname}, const char *@var{newname})

@file{unistd.h} (BSD):  @ref{Symbolic Links}.

@comment sync
@item void sync (void)

@file{unistd.h} (X/Open):  @ref{Synchronizing I/O}.

@comment syscall
@item long int syscall (long int @var{sysno}, @dots{})

@file{unistd.h} (???):  @ref{System Calls}.

@comment sysconf
@item long int sysconf (int @var{parameter})

@file{unistd.h} (POSIX.1):  @ref{Sysconf Definition}.

@comment syslog
@item void syslog (int @var{facility_priority}, const char *@var{format}, @dots{})

@file{syslog.h} (BSD):  @ref{syslog; vsyslog}.

@comment system
@item int system (const char *@var{command})

@file{stdlib.h} (ISO):  @ref{Running a Command}.

@comment sysv_signal
@item sighandler_t sysv_signal (int @var{signum}, sighandler_t @var{action})

@file{signal.h} (GNU):  @ref{Basic Signal Handling}.

@comment tan
@item double tan (double @var{x})

@file{math.h} (ISO):  @ref{Trig Functions}.

@comment tanf
@item float tanf (float @var{x})

@file{math.h} (ISO):  @ref{Trig Functions}.

@comment tanfN
@item _FloatN tanfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment tanfNx
@item _FloatNx tanfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Trig Functions}.

@comment tanh
@item double tanh (double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment tanhf
@item float tanhf (float @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment tanhfN
@item _FloatN tanhfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment tanhfNx
@item _FloatNx tanhfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Hyperbolic Functions}.

@comment tanhl
@item long double tanhl (long double @var{x})

@file{math.h} (ISO):  @ref{Hyperbolic Functions}.

@comment tanl
@item long double tanl (long double @var{x})

@file{math.h} (ISO):  @ref{Trig Functions}.

@comment tcdrain
@item int tcdrain (int @var{filedes})

@file{termios.h} (POSIX.1):  @ref{Line Control}.

@comment tcflag_t
@item tcflag_t

@file{termios.h} (POSIX.1):  @ref{Mode Data Types}.

@comment tcflow
@item int tcflow (int @var{filedes}, int @var{action})

@file{termios.h} (POSIX.1):  @ref{Line Control}.

@comment tcflush
@item int tcflush (int @var{filedes}, int @var{queue})

@file{termios.h} (POSIX.1):  @ref{Line Control}.

@comment tcgetattr
@item int tcgetattr (int @var{filedes}, struct termios *@var{termios-p})

@file{termios.h} (POSIX.1):  @ref{Mode Functions}.

@comment tcgetpgrp
@item pid_t tcgetpgrp (int @var{filedes})

@file{unistd.h} (POSIX.1):  @ref{Terminal Access Functions}.

@comment tcgetsid
@item pid_t tcgetsid (int @var{fildes})

@file{termios.h} (Unix98):  @ref{Terminal Access Functions}.

@comment tcsendbreak
@item int tcsendbreak (int @var{filedes}, int @var{duration})

@file{termios.h} (POSIX.1):  @ref{Line Control}.

@comment tcsetattr
@item int tcsetattr (int @var{filedes}, int @var{when}, const struct termios *@var{termios-p})

@file{termios.h} (POSIX.1):  @ref{Mode Functions}.

@comment tcsetpgrp
@item int tcsetpgrp (int @var{filedes}, pid_t @var{pgid})

@file{unistd.h} (POSIX.1):  @ref{Terminal Access Functions}.

@comment tdelete
@item void * tdelete (const void *@var{key}, void **@var{rootp}, comparison_fn_t @var{compar})

@file{search.h} (SVID):  @ref{Tree Search Function}.

@comment tdestroy
@item void tdestroy (void *@var{vroot}, __free_fn_t @var{freefct})

@file{search.h} (GNU):  @ref{Tree Search Function}.

@comment telldir
@item long int telldir (DIR *@var{dirstream})

@file{dirent.h} (BSD):  @ref{Random Access Directory}.

@comment tempnam
@item char * tempnam (const char *@var{dir}, const char *@var{prefix})

@file{stdio.h} (SVID):  @ref{Temporary Files}.

@comment termios
@item struct termios

@file{termios.h} (POSIX.1):  @ref{Mode Data Types}.

@comment textdomain
@item char * textdomain (const char *@var{domainname})

@file{libintl.h} (GNU):  @ref{Locating gettext catalog}.

@comment tfind
@item void * tfind (const void *@var{key}, void *const *@var{rootp}, comparison_fn_t @var{compar})

@file{search.h} (SVID):  @ref{Tree Search Function}.

@comment tgamma
@item double tgamma (double @var{x})

@file{math.h} (XPG):  @ref{Special Functions}.

@file{math.h} (ISO):  @ref{Special Functions}.

@comment tgammaf
@item float tgammaf (float @var{x})

@file{math.h} (XPG):  @ref{Special Functions}.

@file{math.h} (ISO):  @ref{Special Functions}.

@comment tgammafN
@item _FloatN tgammafN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Special Functions}.

@comment tgammafNx
@item _FloatNx tgammafNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Special Functions}.

@comment tgammal
@item long double tgammal (long double @var{x})

@file{math.h} (XPG):  @ref{Special Functions}.

@file{math.h} (ISO):  @ref{Special Functions}.

@comment tgkill
@item int tgkill (pid_t @var{pid}, pid_t @var{tid}, int @var{signum})

@file{signal.h} (Linux):  @ref{Signaling Another Process}.

@comment thrd_busy
@item thrd_busy

@file{threads.h} (C11):  @ref{ISO C Threads Return Values}.

@comment thrd_create
@item int thrd_create (thrd_t *@var{thr}, thrd_start_t @var{func}, void *@var{arg})

@file{threads.h} (C11):  @ref{ISO C Thread Management}.

@comment thrd_current
@item thrd_t thrd_current (void)

@file{threads.h} (C11):  @ref{ISO C Thread Management}.

@comment thrd_detach
@item int thrd_detach (thrd_t @var{thr})

@file{threads.h} (C11):  @ref{ISO C Thread Management}.

@comment thrd_equal
@item int thrd_equal (thrd_t @var{lhs}, thrd_t @var{rhs})

@file{threads.h} (C11):  @ref{ISO C Thread Management}.

@comment thrd_error
@item thrd_error

@file{threads.h} (C11):  @ref{ISO C Threads Return Values}.

@comment thrd_exit
@item _Noreturn void thrd_exit (int @var{res})

@file{threads.h} (C11):  @ref{ISO C Thread Management}.

@comment thrd_join
@item int thrd_join (thrd_t @var{thr}, int *@var{res})

@file{threads.h} (C11):  @ref{ISO C Thread Management}.

@comment thrd_nomem
@item thrd_nomem

@file{threads.h} (C11):  @ref{ISO C Threads Return Values}.

@comment thrd_sleep
@item int thrd_sleep (const struct timespec *@var{time_point}, struct timespec *@var{remaining})

@file{threads.h} (C11):  @ref{ISO C Thread Management}.

@comment thrd_start_t
@item thrd_start_t

@file{threads.h} (C11):  @ref{ISO C Thread Management}.

@comment thrd_success
@item thrd_success

@file{threads.h} (C11):  @ref{ISO C Threads Return Values}.

@comment thrd_t
@item thrd_t

@file{threads.h} (C11):  @ref{ISO C Thread Management}.

@comment thrd_timedout
@item thrd_timedout

@file{threads.h} (C11):  @ref{ISO C Threads Return Values}.

@comment thrd_yield
@item void thrd_yield (void)

@file{threads.h} (C11):  @ref{ISO C Thread Management}.

@comment thread_local
@item thread_local

@file{threads.h} (C11):  @ref{ISO C Thread-local Storage}.

@comment time
@item time_t time (time_t *@var{result})

@file{time.h} (ISO):  @ref{Getting the Time}.

@comment time_t
@item time_t

@file{time.h} (ISO):  @ref{Time Types}.

@comment timegm
@item time_t timegm (struct tm *@var{brokentime})

@file{time.h} (???):  @ref{Broken-down Time}.

@comment timelocal
@item time_t timelocal (struct tm *@var{brokentime})

@file{time.h} (???):  @ref{Broken-down Time}.

@comment times
@item clock_t times (struct tms *@var{buffer})

@file{sys/times.h} (POSIX.1):  @ref{Processor Time}.

@comment timespec
@item struct timespec

@file{time.h} (POSIX.1):  @ref{Time Types}.

@comment timeval
@item struct timeval

@file{sys/time.h} (BSD):  @ref{Time Types}.

@comment timezone
@item long int timezone

@file{time.h} (SVID):  @ref{Time Zone Functions}.

@comment tm
@item struct tm

@file{time.h} (ISO):  @ref{Time Types}.

@file{time.h} (ISO):  @ref{Broken-down Time}.

@comment tmpfile
@item FILE * tmpfile (void)

@file{stdio.h} (ISO):  @ref{Temporary Files}.

@comment tmpfile64
@item FILE * tmpfile64 (void)

@file{stdio.h} (Unix98):  @ref{Temporary Files}.

@comment tmpnam
@item char * tmpnam (char *@var{result})

@file{stdio.h} (ISO):  @ref{Temporary Files}.

@comment tmpnam_r
@item char * tmpnam_r (char *@var{result})

@file{stdio.h} (GNU):  @ref{Temporary Files}.

@comment tms
@item struct tms

@file{sys/times.h} (POSIX.1):  @ref{Processor Time}.

@comment toascii
@item int toascii (int @var{c})

@file{ctype.h} (SVID):  @ref{Case Conversion}.

@file{ctype.h} (BSD):  @ref{Case Conversion}.

@comment tolower
@item int tolower (int @var{c})

@file{ctype.h} (ISO):  @ref{Case Conversion}.

@comment totalorder
@item int totalorder (const double *@var{x}, const double *@var{y})

@file{math.h} (TS 18661-1:2014):  @ref{FP Comparison Functions}.

@comment totalorderf
@item int totalorderf (const float *@var{x}, const float *@var{y})

@file{math.h} (TS 18661-1:2014):  @ref{FP Comparison Functions}.

@comment totalorderfN
@item int totalorderfN (const _Float@var{N} *@var{x}, const _Float@var{N} *@var{y})

@file{math.h} (TS 18661-3:2015):  @ref{FP Comparison Functions}.

@comment totalorderfNx
@item int totalorderfNx (const _Float@var{N}x *@var{x}, const _Float@var{N}x *@var{y})

@file{math.h} (TS 18661-3:2015):  @ref{FP Comparison Functions}.

@comment totalorderl
@item int totalorderl (const long double *@var{x}, const long double *@var{y})

@file{math.h} (TS 18661-1:2014):  @ref{FP Comparison Functions}.

@comment totalordermag
@item int totalordermag (const double *@var{x}, const double *@var{y})

@file{math.h} (TS 18661-1:2014):  @ref{FP Comparison Functions}.

@comment totalordermagf
@item int totalordermagf (const float *@var{x}, const float *@var{y})

@file{math.h} (TS 18661-1:2014):  @ref{FP Comparison Functions}.

@comment totalordermagfN
@item int totalordermagfN (const _Float@var{N} *@var{x}, const _Float@var{N} *@var{y})

@file{math.h} (TS 18661-3:2015):  @ref{FP Comparison Functions}.

@comment totalordermagfNx
@item int totalordermagfNx (const _Float@var{N}x *@var{x}, const _Float@var{N}x *@var{y})

@file{math.h} (TS 18661-3:2015):  @ref{FP Comparison Functions}.

@comment totalordermagl
@item int totalordermagl (const long double *@var{x}, const long double *@var{y})

@file{math.h} (TS 18661-1:2014):  @ref{FP Comparison Functions}.

@comment toupper
@item int toupper (int @var{c})

@file{ctype.h} (ISO):  @ref{Case Conversion}.

@comment towctrans
@item wint_t towctrans (wint_t @var{wc}, wctrans_t @var{desc})

@file{wctype.h} (ISO):  @ref{Wide Character Case Conversion}.

@comment towlower
@item wint_t towlower (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Wide Character Case Conversion}.

@comment towupper
@item wint_t towupper (wint_t @var{wc})

@file{wctype.h} (ISO):  @ref{Wide Character Case Conversion}.

@comment trunc
@item double trunc (double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment truncate
@item int truncate (const char *@var{filename}, off_t @var{length})

@file{unistd.h} (X/Open):  @ref{File Size}.

@comment truncate64
@item int truncate64 (const char *@var{name}, off64_t @var{length})

@file{unistd.h} (Unix98):  @ref{File Size}.

@comment truncf
@item float truncf (float @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment truncfN
@item _FloatN truncfN (_Float@var{N} @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment truncfNx
@item _FloatNx truncfNx (_Float@var{N}x @var{x})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment truncl
@item long double truncl (long double @var{x})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment tsearch
@item void * tsearch (const void *@var{key}, void **@var{rootp}, comparison_fn_t @var{compar})

@file{search.h} (SVID):  @ref{Tree Search Function}.

@comment tss_create
@item int tss_create (tss_t *@var{tss_key}, tss_dtor_t @var{destructor})

@file{threads.h} (C11):  @ref{ISO C Thread-local Storage}.

@comment tss_delete
@item void tss_delete (tss_t @var{tss_key})

@file{threads.h} (C11):  @ref{ISO C Thread-local Storage}.

@comment tss_dtor_t
@item tss_dtor_t

@file{threads.h} (C11):  @ref{ISO C Thread-local Storage}.

@comment tss_get
@item void * tss_get (tss_t @var{tss_key})

@file{threads.h} (C11):  @ref{ISO C Thread-local Storage}.

@comment tss_set
@item int tss_set (tss_t @var{tss_key}, void *@var{val})

@file{threads.h} (C11):  @ref{ISO C Thread-local Storage}.

@comment tss_t
@item tss_t

@file{threads.h} (C11):  @ref{ISO C Thread-local Storage}.

@comment ttyname
@item char * ttyname (int @var{filedes})

@file{unistd.h} (POSIX.1):  @ref{Is It a Terminal}.

@comment ttyname_r
@item int ttyname_r (int @var{filedes}, char *@var{buf}, size_t @var{len})

@file{unistd.h} (POSIX.1):  @ref{Is It a Terminal}.

@comment twalk
@item void twalk (const void *@var{root}, __action_fn_t @var{action})

@file{search.h} (SVID):  @ref{Tree Search Function}.

@comment twalk_r
@item void twalk_r (const void *@var{root}, void (*@var{action}) (const void *@var{key}, VISIT @var{which}, void *@var{closure}), void *@var{closure})

@file{search.h} (GNU):  @ref{Tree Search Function}.

@comment tzname
@item char * tzname [2]

@file{time.h} (POSIX.1):  @ref{Time Zone Functions}.

@comment tzset
@item void tzset (void)

@file{time.h} (POSIX.1):  @ref{Time Zone Functions}.

@comment ucontext_t
@item ucontext_t

@file{ucontext.h} (SVID):  @ref{System V contexts}.

@comment ufromfp
@item uintmax_t ufromfp (double @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment ufromfpf
@item uintmax_t ufromfpf (float @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment ufromfpfN
@item uintmax_t ufromfpfN (_Float@var{N} @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment ufromfpfNx
@item uintmax_t ufromfpfNx (_Float@var{N}x @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment ufromfpl
@item uintmax_t ufromfpl (long double @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment ufromfpx
@item uintmax_t ufromfpx (double @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment ufromfpxf
@item uintmax_t ufromfpxf (float @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment ufromfpxfN
@item uintmax_t ufromfpxfN (_Float@var{N} @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment ufromfpxfNx
@item uintmax_t ufromfpxfNx (_Float@var{N}x @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (TS 18661-3:2015):  @ref{Rounding Functions}.

@comment ufromfpxl
@item uintmax_t ufromfpxl (long double @var{x}, int @var{round}, unsigned int @var{width})

@file{math.h} (ISO):  @ref{Rounding Functions}.

@comment uid_t
@item uid_t

@file{sys/types.h} (POSIX.1):  @ref{Reading Persona}.

@comment ulimit
@item long int ulimit (int @var{cmd}, @dots{})

@file{ulimit.h} (BSD):  @ref{Limits on Resources}.

@comment umask
@item mode_t umask (mode_t @var{mask})

@file{sys/stat.h} (POSIX.1):  @ref{Setting Permissions}.

@comment umount
@item int umount (const char *@var{file})

@file{sys/mount.h} (SVID):  @ref{Mount-Unmount-Remount}.

@file{sys/mount.h} (GNU):  @ref{Mount-Unmount-Remount}.

@comment umount2
@item int umount2 (const char *@var{file}, int @var{flags})

@file{sys/mount.h} (GNU):  @ref{Mount-Unmount-Remount}.

@comment uname
@item int uname (struct utsname *@var{info})

@file{sys/utsname.h} (POSIX.1):  @ref{Platform Type}.

@comment ungetc
@item int ungetc (int @var{c}, FILE *@var{stream})

@file{stdio.h} (ISO):  @ref{How Unread}.

@comment ungetwc
@item wint_t ungetwc (wint_t @var{wc}, FILE *@var{stream})

@file{wchar.h} (ISO):  @ref{How Unread}.

@comment unlink
@item int unlink (const char *@var{filename})

@file{unistd.h} (POSIX.1):  @ref{Deleting Files}.

@comment unlockpt
@item int unlockpt (int @var{filedes})

@file{stdlib.h} (SVID):  @ref{Allocation}.

@file{stdlib.h} (XPG4.2):  @ref{Allocation}.

@comment unsetenv
@item int unsetenv (const char *@var{name})

@file{stdlib.h} (BSD):  @ref{Environment Access}.

@comment updwtmp
@item void updwtmp (const char *@var{wtmp_file}, const struct utmp *@var{utmp})

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@comment utimbuf
@item struct utimbuf

@file{utime.h} (POSIX.1):  @ref{File Times}.

@comment utime
@item int utime (const char *@var{filename}, const struct utimbuf *@var{times})

@file{utime.h} (POSIX.1):  @ref{File Times}.

@comment utimes
@item int utimes (const char *@var{filename}, const struct timeval @var{tvp}@t{[2]})

@file{sys/time.h} (BSD):  @ref{File Times}.

@comment utmpname
@item int utmpname (const char *@var{file})

@file{utmp.h} (SVID):  @ref{Manipulating the Database}.

@comment utmpxname
@item int utmpxname (const char *@var{file})

@file{utmpx.h} (XPG4.2):  @ref{XPG Functions}.

@comment utsname
@item struct utsname

@file{sys/utsname.h} (POSIX.1):  @ref{Platform Type}.

@comment va_arg
@item @var{type} va_arg (va_list @var{ap}, @var{type})

@file{stdarg.h} (ISO):  @ref{Argument Macros}.

@comment va_copy
@item void va_copy (va_list @var{dest}, va_list @var{src})

@file{stdarg.h} (C99):  @ref{Argument Macros}.

@comment va_end
@item void va_end (va_list @var{ap})

@file{stdarg.h} (ISO):  @ref{Argument Macros}.

@comment va_list
@item va_list

@file{stdarg.h} (ISO):  @ref{Argument Macros}.

@comment va_start
@item void va_start (va_list @var{ap}, @var{last-required})

@file{stdarg.h} (ISO):  @ref{Argument Macros}.

@comment valloc
@item void * valloc (size_t @var{size})

@file{malloc.h} (BSD):  @ref{Aligned Memory Blocks}.

@file{stdlib.h} (BSD):  @ref{Aligned Memory Blocks}.

@comment vasprintf
@item int vasprintf (char **@var{ptr}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (GNU):  @ref{Variable Arguments Output}.

@comment verr
@item void verr (int @var{status}, const char *@var{format}, va_list @var{ap})

@file{err.h} (BSD):  @ref{Error Messages}.

@comment verrx
@item void verrx (int @var{status}, const char *@var{format}, va_list @var{ap})

@file{err.h} (BSD):  @ref{Error Messages}.

@comment versionsort
@item int versionsort (const struct dirent **@var{a}, const struct dirent **@var{b})

@file{dirent.h} (GNU):  @ref{Scanning Directory Content}.

@comment versionsort64
@item int versionsort64 (const struct dirent64 **@var{a}, const struct dirent64 **@var{b})

@file{dirent.h} (GNU):  @ref{Scanning Directory Content}.

@comment vfork
@item pid_t vfork (void)

@file{unistd.h} (BSD):  @ref{Creating a Process}.

@comment vfprintf
@item int vfprintf (FILE *@var{stream}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (ISO):  @ref{Variable Arguments Output}.

@comment vfscanf
@item int vfscanf (FILE *@var{stream}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (ISO):  @ref{Variable Arguments Input}.

@comment vfwprintf
@item int vfwprintf (FILE *@var{stream}, const wchar_t *@var{template}, va_list @var{ap})

@file{wchar.h} (ISO):  @ref{Variable Arguments Output}.

@comment vfwscanf
@item int vfwscanf (FILE *@var{stream}, const wchar_t *@var{template}, va_list @var{ap})

@file{wchar.h} (ISO):  @ref{Variable Arguments Input}.

@comment vlimit
@item int vlimit (int @var{resource}, int @var{limit})

@file{sys/vlimit.h} (BSD):  @ref{Limits on Resources}.

@comment vprintf
@item int vprintf (const char *@var{template}, va_list @var{ap})

@file{stdio.h} (ISO):  @ref{Variable Arguments Output}.

@comment vscanf
@item int vscanf (const char *@var{template}, va_list @var{ap})

@file{stdio.h} (ISO):  @ref{Variable Arguments Input}.

@comment vsnprintf
@item int vsnprintf (char *@var{s}, size_t @var{size}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (GNU):  @ref{Variable Arguments Output}.

@comment vsprintf
@item int vsprintf (char *@var{s}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (ISO):  @ref{Variable Arguments Output}.

@comment vsscanf
@item int vsscanf (const char *@var{s}, const char *@var{template}, va_list @var{ap})

@file{stdio.h} (ISO):  @ref{Variable Arguments Input}.

@comment vswprintf
@item int vswprintf (wchar_t *@var{ws}, size_t @var{size}, const wchar_t *@var{template}, va_list @var{ap})

@file{wchar.h} (GNU):  @ref{Variable Arguments Output}.

@comment vswscanf
@item int vswscanf (const wchar_t *@var{s}, const wchar_t *@var{template}, va_list @var{ap})

@file{wchar.h} (ISO):  @ref{Variable Arguments Input}.

@comment vsyslog
@item void vsyslog (int @var{facility_priority}, const char *@var{format}, va_list @var{arglist})

@file{syslog.h} (BSD):  @ref{syslog; vsyslog}.

@comment vwarn
@item void vwarn (const char *@var{format}, va_list @var{ap})

@file{err.h} (BSD):  @ref{Error Messages}.

@comment vwarnx
@item void vwarnx (const char *@var{format}, va_list @var{ap})

@file{err.h} (BSD):  @ref{Error Messages}.

@comment vwprintf
@item int vwprintf (const wchar_t *@var{template}, va_list @var{ap})

@file{wchar.h} (ISO):  @ref{Variable Arguments Output}.

@comment vwscanf
@item int vwscanf (const wchar_t *@var{template}, va_list @var{ap})

@file{wchar.h} (ISO):  @ref{Variable Arguments Input}.

@comment wait
@item pid_t wait (int *@var{status-ptr})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion}.

@comment wait3
@item pid_t wait3 (int *@var{status-ptr}, int @var{options}, struct rusage *@var{usage})

@file{sys/wait.h} (BSD):  @ref{BSD Wait Functions}.

@comment wait4
@item pid_t wait4 (pid_t @var{pid}, int *@var{status-ptr}, int @var{options}, struct rusage *@var{usage})

@file{sys/wait.h} (BSD):  @ref{Process Completion}.

@comment waitpid
@item pid_t waitpid (pid_t @var{pid}, int *@var{status-ptr}, int @var{options})

@file{sys/wait.h} (POSIX.1):  @ref{Process Completion}.

@comment warn
@item void warn (const char *@var{format}, @dots{})

@file{err.h} (BSD):  @ref{Error Messages}.

@comment warnx
@item void warnx (const char *@var{format}, @dots{})

@file{err.h} (BSD):  @ref{Error Messages}.

@comment wchar_t
@item wchar_t

@file{stddef.h} (ISO):  @ref{Extended Char Intro}.

@comment wcpcpy
@item wchar_t * wcpcpy (wchar_t *restrict @var{wto}, const wchar_t *restrict @var{wfrom})

@file{wchar.h} (GNU):  @ref{Copying Strings and Arrays}.

@comment wcpncpy
@item wchar_t * wcpncpy (wchar_t *restrict @var{wto}, const wchar_t *restrict @var{wfrom}, size_t @var{size})

@file{wchar.h} (GNU):  @ref{Truncating Strings}.

@comment wcrtomb
@item size_t wcrtomb (char *restrict @var{s}, wchar_t @var{wc}, mbstate_t *restrict @var{ps})

@file{wchar.h} (ISO):  @ref{Converting a Character}.

@comment wcscasecmp
@item int wcscasecmp (const wchar_t *@var{ws1}, const wchar_t *@var{ws2})

@file{wchar.h} (GNU):  @ref{String/Array Comparison}.

@comment wcscat
@item wchar_t * wcscat (wchar_t *restrict @var{wto}, const wchar_t *restrict @var{wfrom})

@file{wchar.h} (ISO):  @ref{Concatenating Strings}.

@comment wcschr
@item wchar_t * wcschr (const wchar_t *@var{wstring}, wchar_t @var{wc})

@file{wchar.h} (ISO):  @ref{Search Functions}.

@comment wcschrnul
@item wchar_t * wcschrnul (const wchar_t *@var{wstring}, wchar_t @var{wc})

@file{wchar.h} (GNU):  @ref{Search Functions}.

@comment wcscmp
@item int wcscmp (const wchar_t *@var{ws1}, const wchar_t *@var{ws2})

@file{wchar.h} (ISO):  @ref{String/Array Comparison}.

@comment wcscoll
@item int wcscoll (const wchar_t *@var{ws1}, const wchar_t *@var{ws2})

@file{wchar.h} (ISO):  @ref{Collation Functions}.

@comment wcscpy
@item wchar_t * wcscpy (wchar_t *restrict @var{wto}, const wchar_t *restrict @var{wfrom})

@file{wchar.h} (ISO):  @ref{Copying Strings and Arrays}.

@comment wcscspn
@item size_t wcscspn (const wchar_t *@var{wstring}, const wchar_t *@var{stopset})

@file{wchar.h} (ISO):  @ref{Search Functions}.

@comment wcsdup
@item wchar_t * wcsdup (const wchar_t *@var{ws})

@file{wchar.h} (GNU):  @ref{Copying Strings and Arrays}.

@comment wcsftime
@item size_t wcsftime (wchar_t *@var{s}, size_t @var{size}, const wchar_t *@var{template}, const struct tm *@var{brokentime})

@file{time.h} (ISO/Amend1):  @ref{Formatting Calendar Time}.

@comment wcslen
@item size_t wcslen (const wchar_t *@var{ws})

@file{wchar.h} (ISO):  @ref{String Length}.

@comment wcsncasecmp
@item int wcsncasecmp (const wchar_t *@var{ws1}, const wchar_t *@var{s2}, size_t @var{n})

@file{wchar.h} (GNU):  @ref{String/Array Comparison}.

@comment wcsncat
@item wchar_t * wcsncat (wchar_t *restrict @var{wto}, const wchar_t *restrict @var{wfrom}, size_t @var{size})

@file{wchar.h} (ISO):  @ref{Truncating Strings}.

@comment wcsncmp
@item int wcsncmp (const wchar_t *@var{ws1}, const wchar_t *@var{ws2}, size_t @var{size})

@file{wchar.h} (ISO):  @ref{String/Array Comparison}.

@comment wcsncpy
@item wchar_t * wcsncpy (wchar_t *restrict @var{wto}, const wchar_t *restrict @var{wfrom}, size_t @var{size})

@file{wchar.h} (ISO):  @ref{Truncating Strings}.

@comment wcsnlen
@item size_t wcsnlen (const wchar_t *@var{ws}, size_t @var{maxlen})

@file{wchar.h} (GNU):  @ref{String Length}.

@comment wcsnrtombs
@item size_t wcsnrtombs (char *restrict @var{dst}, const wchar_t **restrict @var{src}, size_t @var{nwc}, size_t @var{len}, mbstate_t *restrict @var{ps})

@file{wchar.h} (GNU):  @ref{Converting Strings}.

@comment wcspbrk
@item wchar_t * wcspbrk (const wchar_t *@var{wstring}, const wchar_t *@var{stopset})

@file{wchar.h} (ISO):  @ref{Search Functions}.

@comment wcsrchr
@item wchar_t * wcsrchr (const wchar_t *@var{wstring}, wchar_t @var{wc})

@file{wchar.h} (ISO):  @ref{Search Functions}.

@comment wcsrtombs
@item size_t wcsrtombs (char *restrict @var{dst}, const wchar_t **restrict @var{src}, size_t @var{len}, mbstate_t *restrict @var{ps})

@file{wchar.h} (ISO):  @ref{Converting Strings}.

@comment wcsspn
@item size_t wcsspn (const wchar_t *@var{wstring}, const wchar_t *@var{skipset})

@file{wchar.h} (ISO):  @ref{Search Functions}.

@comment wcsstr
@item wchar_t * wcsstr (const wchar_t *@var{haystack}, const wchar_t *@var{needle})

@file{wchar.h} (ISO):  @ref{Search Functions}.

@comment wcstod
@item double wcstod (const wchar_t *restrict @var{string}, wchar_t **restrict @var{tailptr})

@file{wchar.h} (ISO):  @ref{Parsing of Floats}.

@comment wcstof
@item float wcstof (const wchar_t *@var{string}, wchar_t **@var{tailptr})

@file{wchar.h} (ISO):  @ref{Parsing of Floats}.

@comment wcstofN
@item _FloatN wcstofN (const wchar_t *@var{string}, wchar_t **@var{tailptr})

@file{wchar.h} (GNU):  @ref{Parsing of Floats}.

@comment wcstofNx
@item _FloatNx wcstofNx (const wchar_t *@var{string}, wchar_t **@var{tailptr})

@file{wchar.h} (GNU):  @ref{Parsing of Floats}.

@comment wcstoimax
@item intmax_t wcstoimax (const wchar_t *restrict @var{string}, wchar_t **restrict @var{tailptr}, int @var{base})

@file{wchar.h} (ISO):  @ref{Parsing of Integers}.

@comment wcstok
@item wchar_t * wcstok (wchar_t *@var{newstring}, const wchar_t *@var{delimiters}, wchar_t **@var{save_ptr})

@file{wchar.h} (ISO):  @ref{Finding Tokens in a String}.

@comment wcstol
@item long int wcstol (const wchar_t *restrict @var{string}, wchar_t **restrict @var{tailptr}, int @var{base})

@file{wchar.h} (ISO):  @ref{Parsing of Integers}.

@comment wcstold
@item long double wcstold (const wchar_t *@var{string}, wchar_t **@var{tailptr})

@file{wchar.h} (ISO):  @ref{Parsing of Floats}.

@comment wcstoll
@item long long int wcstoll (const wchar_t *restrict @var{string}, wchar_t **restrict @var{tailptr}, int @var{base})

@file{wchar.h} (ISO):  @ref{Parsing of Integers}.

@comment wcstombs
@item size_t wcstombs (char *@var{string}, const wchar_t *@var{wstring}, size_t @var{size})

@file{stdlib.h} (ISO):  @ref{Non-reentrant String Conversion}.

@comment wcstoq
@item long long int wcstoq (const wchar_t *restrict @var{string}, wchar_t **restrict @var{tailptr}, int @var{base})

@file{wchar.h} (GNU):  @ref{Parsing of Integers}.

@comment wcstoul
@item unsigned long int wcstoul (const wchar_t *restrict @var{string}, wchar_t **restrict @var{tailptr}, int @var{base})

@file{wchar.h} (ISO):  @ref{Parsing of Integers}.

@comment wcstoull
@item unsigned long long int wcstoull (const wchar_t *restrict @var{string}, wchar_t **restrict @var{tailptr}, int @var{base})

@file{wchar.h} (ISO):  @ref{Parsing of Integers}.

@comment wcstoumax
@item uintmax_t wcstoumax (const wchar_t *restrict @var{string}, wchar_t **restrict @var{tailptr}, int @var{base})

@file{wchar.h} (ISO):  @ref{Parsing of Integers}.

@comment wcstouq
@item unsigned long long int wcstouq (const wchar_t *restrict @var{string}, wchar_t **restrict @var{tailptr}, int @var{base})

@file{wchar.h} (GNU):  @ref{Parsing of Integers}.

@comment wcswcs
@item wchar_t * wcswcs (const wchar_t *@var{haystack}, const wchar_t *@var{needle})

@file{wchar.h} (XPG):  @ref{Search Functions}.

@comment wcsxfrm
@item size_t wcsxfrm (wchar_t *restrict @var{wto}, const wchar_t *@var{wfrom}, size_t @var{size})

@file{wchar.h} (ISO):  @ref{Collation Functions}.

@comment wctob
@item int wctob (wint_t @var{c})

@file{wchar.h} (ISO):  @ref{Converting a Character}.

@comment wctomb
@item int wctomb (char *@var{string}, wchar_t @var{wchar})

@file{stdlib.h} (ISO):  @ref{Non-reentrant Character Conversion}.

@comment wctrans
@item wctrans_t wctrans (const char *@var{property})

@file{wctype.h} (ISO):  @ref{Wide Character Case Conversion}.

@comment wctrans_t
@item wctrans_t

@file{wctype.h} (ISO):  @ref{Wide Character Case Conversion}.

@comment wctype
@item wctype_t wctype (const char *@var{property})

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment wctype_t
@item wctype_t

@file{wctype.h} (ISO):  @ref{Classification of Wide Characters}.

@comment wint_t
@item wint_t

@file{wchar.h} (ISO):  @ref{Extended Char Intro}.

@comment wmemchr
@item wchar_t * wmemchr (const wchar_t *@var{block}, wchar_t @var{wc}, size_t @var{size})

@file{wchar.h} (ISO):  @ref{Search Functions}.

@comment wmemcmp
@item int wmemcmp (const wchar_t *@var{a1}, const wchar_t *@var{a2}, size_t @var{size})

@file{wchar.h} (ISO):  @ref{String/Array Comparison}.

@comment wmemcpy
@item wchar_t * wmemcpy (wchar_t *restrict @var{wto}, const wchar_t *restrict @var{wfrom}, size_t @var{size})

@file{wchar.h} (ISO):  @ref{Copying Strings and Arrays}.

@comment wmemmove
@item wchar_t * wmemmove (wchar_t *@var{wto}, const wchar_t *@var{wfrom}, size_t @var{size})

@file{wchar.h} (ISO):  @ref{Copying Strings and Arrays}.

@comment wmempcpy
@item wchar_t * wmempcpy (wchar_t *restrict @var{wto}, const wchar_t *restrict @var{wfrom}, size_t @var{size})

@file{wchar.h} (GNU):  @ref{Copying Strings and Arrays}.

@comment wmemset
@item wchar_t * wmemset (wchar_t *@var{block}, wchar_t @var{wc}, size_t @var{size})

@file{wchar.h} (ISO):  @ref{Copying Strings and Arrays}.

@comment wordexp
@item int wordexp (const char *@var{words}, wordexp_t *@var{word-vector-ptr}, int @var{flags})

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment wordexp_t
@item wordexp_t

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment wordfree
@item void wordfree (wordexp_t *@var{word-vector-ptr})

@file{wordexp.h} (POSIX.2):  @ref{Calling Wordexp}.

@comment wprintf
@item int wprintf (const wchar_t *@var{template}, @dots{})

@file{wchar.h} (ISO):  @ref{Formatted Output Functions}.

@comment write
@item ssize_t write (int @var{filedes}, const void *@var{buffer}, size_t @var{size})

@file{unistd.h} (POSIX.1):  @ref{I/O Primitives}.

@comment writev
@item ssize_t writev (int @var{filedes}, const struct iovec *@var{vector}, int @var{count})

@file{sys/uio.h} (BSD):  @ref{Scatter-Gather}.

@comment wscanf
@item int wscanf (const wchar_t *@var{template}, @dots{})

@file{wchar.h} (ISO):  @ref{Formatted Input Functions}.

@comment y0
@item double y0 (double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment y0f
@item float y0f (float @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment y0fN
@item _FloatN y0fN (_Float@var{N} @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment y0fNx
@item _FloatNx y0fNx (_Float@var{N}x @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment y0l
@item long double y0l (long double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment y1
@item double y1 (double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment y1f
@item float y1f (float @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment y1fN
@item _FloatN y1fN (_Float@var{N} @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment y1fNx
@item _FloatNx y1fNx (_Float@var{N}x @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment y1l
@item long double y1l (long double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment yn
@item double yn (int @var{n}, double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment ynf
@item float ynf (int @var{n}, float @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.

@comment ynfN
@item _FloatN ynfN (int @var{n}, _Float@var{N} @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment ynfNx
@item _FloatNx ynfNx (int @var{n}, _Float@var{N}x @var{x})

@file{math.h} (GNU):  @ref{Special Functions}.

@comment ynl
@item long double ynl (int @var{n}, long double @var{x})

@file{math.h} (SVID):  @ref{Special Functions}.


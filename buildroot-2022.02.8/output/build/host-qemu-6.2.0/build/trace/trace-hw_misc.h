/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_MISC_GENERATED_TRACERS_H
#define TRACE_HW_MISC_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_ALLWINNER_CPUCFG_CPU_RESET_EVENT;
extern TraceEvent _TRACE_ALLWINNER_CPUCFG_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_CPUCFG_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMCOM_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMCOM_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMCTL_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMCTL_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMPHY_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_H3_DRAMPHY_WRITE_EVENT;
extern TraceEvent _TRACE_ALLWINNER_SID_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_SID_WRITE_EVENT;
extern TraceEvent _TRACE_AVR_POWER_READ_EVENT;
extern TraceEvent _TRACE_AVR_POWER_WRITE_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_MER_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_MDR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_MFSR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_VCR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_DR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_ECR0_EVENT;
extern TraceEvent _TRACE_ECC_MEM_WRITEL_ECR1_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MER_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MDR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MFSR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_VCR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MFAR0_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_MFAR1_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_DR_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_ECR0_EVENT;
extern TraceEvent _TRACE_ECC_MEM_READL_ECR1_EVENT;
extern TraceEvent _TRACE_ECC_DIAG_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_ECC_DIAG_MEM_READB_EVENT;
extern TraceEvent _TRACE_EMPTY_SLOT_WRITE_EVENT;
extern TraceEvent _TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_EVENT;
extern TraceEvent _TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_EVENT;
extern TraceEvent _TRACE_SLAVIO_SET_POWER_FAIL_EVENT;
extern TraceEvent _TRACE_SLAVIO_CFG_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_CFG_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_DIAG_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_DIAG_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_MDM_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_MDM_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX1_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX1_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX2_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_SLAVIO_AUX2_MEM_READB_EVENT;
extern TraceEvent _TRACE_APC_MEM_WRITEB_EVENT;
extern TraceEvent _TRACE_APC_MEM_READB_EVENT;
extern TraceEvent _TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_SYSCTRL_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_LED_MEM_WRITEW_EVENT;
extern TraceEvent _TRACE_SLAVIO_LED_MEM_READW_EVENT;
extern TraceEvent _TRACE_ASPEED_SCU_WRITE_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_READ_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_WRITE_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_RESET_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_CFG_WRITE_EVENT;
extern TraceEvent _TRACE_MPS2_SCC_CFG_READ_EVENT;
extern TraceEvent _TRACE_MPS2_FPGAIO_READ_EVENT;
extern TraceEvent _TRACE_MPS2_FPGAIO_WRITE_EVENT;
extern TraceEvent _TRACE_MPS2_FPGAIO_RESET_EVENT;
extern TraceEvent _TRACE_MSF2_SYSREG_WRITE_EVENT;
extern TraceEvent _TRACE_MSF2_SYSREG_READ_EVENT;
extern TraceEvent _TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_EVENT;
extern TraceEvent _TRACE_IMX7_GPR_READ_EVENT;
extern TraceEvent _TRACE_IMX7_GPR_WRITE_EVENT;
extern TraceEvent _TRACE_MOS6522_SET_COUNTER_EVENT;
extern TraceEvent _TRACE_MOS6522_GET_NEXT_IRQ_TIME_EVENT;
extern TraceEvent _TRACE_MOS6522_SET_SR_INT_EVENT;
extern TraceEvent _TRACE_MOS6522_WRITE_EVENT;
extern TraceEvent _TRACE_MOS6522_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_CLK_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_CLK_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_GCR_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_GCR_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_RPM_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_CAPTURE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_UPDATE_CLOCK_EVENT;
extern TraceEvent _TRACE_NPCM7XX_MFT_SET_DUTY_EVENT;
extern TraceEvent _TRACE_NPCM7XX_RNG_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_RNG_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_PWM_READ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_PWM_WRITE_EVENT;
extern TraceEvent _TRACE_NPCM7XX_PWM_UPDATE_FREQ_EVENT;
extern TraceEvent _TRACE_NPCM7XX_PWM_UPDATE_DUTY_EVENT;
extern TraceEvent _TRACE_STM32F4XX_SYSCFG_SET_IRQ_EVENT;
extern TraceEvent _TRACE_STM32F4XX_PULSE_EXTI_EVENT;
extern TraceEvent _TRACE_STM32F4XX_SYSCFG_READ_EVENT;
extern TraceEvent _TRACE_STM32F4XX_SYSCFG_WRITE_EVENT;
extern TraceEvent _TRACE_STM32F4XX_EXTI_SET_IRQ_EVENT;
extern TraceEvent _TRACE_STM32F4XX_EXTI_READ_EVENT;
extern TraceEvent _TRACE_STM32F4XX_EXTI_WRITE_EVENT;
extern TraceEvent _TRACE_TZ_MPC_REG_READ_EVENT;
extern TraceEvent _TRACE_TZ_MPC_REG_WRITE_EVENT;
extern TraceEvent _TRACE_TZ_MPC_MEM_BLOCKED_READ_EVENT;
extern TraceEvent _TRACE_TZ_MPC_MEM_BLOCKED_WRITE_EVENT;
extern TraceEvent _TRACE_TZ_MPC_TRANSLATE_EVENT;
extern TraceEvent _TRACE_TZ_MPC_IOMMU_NOTIFY_EVENT;
extern TraceEvent _TRACE_TZ_MSC_RESET_EVENT;
extern TraceEvent _TRACE_TZ_MSC_CFG_NONSEC_EVENT;
extern TraceEvent _TRACE_TZ_MSC_CFG_SEC_RESP_EVENT;
extern TraceEvent _TRACE_TZ_MSC_IRQ_CLEAR_EVENT;
extern TraceEvent _TRACE_TZ_MSC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_TZ_MSC_ACCESS_BLOCKED_EVENT;
extern TraceEvent _TRACE_TZ_PPC_RESET_EVENT;
extern TraceEvent _TRACE_TZ_PPC_CFG_NONSEC_EVENT;
extern TraceEvent _TRACE_TZ_PPC_CFG_AP_EVENT;
extern TraceEvent _TRACE_TZ_PPC_CFG_SEC_RESP_EVENT;
extern TraceEvent _TRACE_TZ_PPC_IRQ_ENABLE_EVENT;
extern TraceEvent _TRACE_TZ_PPC_IRQ_CLEAR_EVENT;
extern TraceEvent _TRACE_TZ_PPC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_TZ_PPC_READ_BLOCKED_EVENT;
extern TraceEvent _TRACE_TZ_PPC_WRITE_BLOCKED_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_S_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_S_WRITE_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_NS_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SECCTL_NS_WRITE_EVENT;
extern TraceEvent _TRACE_CCM_ENTRY_EVENT;
extern TraceEvent _TRACE_CCM_FREQ_EVENT;
extern TraceEvent _TRACE_CCM_CLOCK_FREQ_EVENT;
extern TraceEvent _TRACE_CCM_READ_REG_EVENT;
extern TraceEvent _TRACE_CCM_WRITE_REG_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSINFO_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSINFO_WRITE_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSCTL_READ_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSCTL_WRITE_EVENT;
extern TraceEvent _TRACE_IOTKIT_SYSCTL_RESET_EVENT;
extern TraceEvent _TRACE_ARMSSE_CPU_PWRCTRL_READ_EVENT;
extern TraceEvent _TRACE_ARMSSE_CPU_PWRCTRL_WRITE_EVENT;
extern TraceEvent _TRACE_ARMSSE_CPUID_READ_EVENT;
extern TraceEvent _TRACE_ARMSSE_CPUID_WRITE_EVENT;
extern TraceEvent _TRACE_ARMSSE_MHU_READ_EVENT;
extern TraceEvent _TRACE_ARMSSE_MHU_WRITE_EVENT;
extern TraceEvent _TRACE_ASPEED_XDMA_WRITE_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_PROPERTY_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_WRITE_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_READ_EVENT;
extern TraceEvent _TRACE_BCM2835_MBOX_IRQ_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_UPDATE_DATA_OUT_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_UPDATE_DATA_IN_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_STATUS_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_CMD_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_INVALID_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_TIME_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_SET_CMD_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_INTERNAL_SET_ALT_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_SECONDS_READ_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_SECONDS_WRITE_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_TEST_WRITE_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_WPROTECT_WRITE_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_PRAM_READ_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_PRAM_WRITE_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_PRAM_SECT_READ_EVENT;
extern TraceEvent _TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE_EVENT;
extern TraceEvent _TRACE_VIA1_ADB_SEND_EVENT;
extern TraceEvent _TRACE_VIA1_ADB_RECEIVE_EVENT;
extern TraceEvent _TRACE_VIA1_ADB_POLL_EVENT;
extern TraceEvent _TRACE_VIA1_AUXMODE_EVENT;
extern TraceEvent _TRACE_GRLIB_AHB_PNP_READ_EVENT;
extern TraceEvent _TRACE_GRLIB_APB_PNP_READ_EVENT;
extern TraceEvent _TRACE_LED_SET_INTENSITY_EVENT;
extern TraceEvent _TRACE_LED_CHANGE_INTENSITY_EVENT;
extern TraceEvent _TRACE_PCA955X_GPIO_STATUS_EVENT;
extern TraceEvent _TRACE_PCA955X_GPIO_CHANGE_EVENT;
extern TraceEvent _TRACE_BCM2835_CPRMAN_READ_EVENT;
extern TraceEvent _TRACE_BCM2835_CPRMAN_WRITE_EVENT;
extern TraceEvent _TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC_EVENT;
extern TraceEvent _TRACE_VIRT_CTRL_READ_EVENT;
extern TraceEvent _TRACE_VIRT_CTRL_WRITE_EVENT;
extern TraceEvent _TRACE_VIRT_CTRL_RESET_EVENT;
extern TraceEvent _TRACE_VIRT_CTRL_REALIZE_EVENT;
extern TraceEvent _TRACE_VIRT_CTRL_INSTANCE_INIT_EVENT;
extern uint16_t _TRACE_ALLWINNER_CPUCFG_CPU_RESET_DSTATE;
extern uint16_t _TRACE_ALLWINNER_CPUCFG_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_CPUCFG_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMCOM_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMCOM_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMCTL_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMCTL_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMPHY_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_H3_DRAMPHY_WRITE_DSTATE;
extern uint16_t _TRACE_ALLWINNER_SID_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_SID_WRITE_DSTATE;
extern uint16_t _TRACE_AVR_POWER_READ_DSTATE;
extern uint16_t _TRACE_AVR_POWER_WRITE_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_MER_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_MDR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_MFSR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_VCR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_DR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_ECR0_DSTATE;
extern uint16_t _TRACE_ECC_MEM_WRITEL_ECR1_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MER_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MDR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MFSR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_VCR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MFAR0_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_MFAR1_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_DR_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_ECR0_DSTATE;
extern uint16_t _TRACE_ECC_MEM_READL_ECR1_DSTATE;
extern uint16_t _TRACE_ECC_DIAG_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_ECC_DIAG_MEM_READB_DSTATE;
extern uint16_t _TRACE_EMPTY_SLOT_WRITE_DSTATE;
extern uint16_t _TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_DSTATE;
extern uint16_t _TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_DSTATE;
extern uint16_t _TRACE_SLAVIO_SET_POWER_FAIL_DSTATE;
extern uint16_t _TRACE_SLAVIO_CFG_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_CFG_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_DIAG_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_DIAG_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_MDM_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_MDM_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX1_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX1_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX2_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_SLAVIO_AUX2_MEM_READB_DSTATE;
extern uint16_t _TRACE_APC_MEM_WRITEB_DSTATE;
extern uint16_t _TRACE_APC_MEM_READB_DSTATE;
extern uint16_t _TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_SYSCTRL_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_LED_MEM_WRITEW_DSTATE;
extern uint16_t _TRACE_SLAVIO_LED_MEM_READW_DSTATE;
extern uint16_t _TRACE_ASPEED_SCU_WRITE_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_READ_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_WRITE_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_RESET_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_CFG_WRITE_DSTATE;
extern uint16_t _TRACE_MPS2_SCC_CFG_READ_DSTATE;
extern uint16_t _TRACE_MPS2_FPGAIO_READ_DSTATE;
extern uint16_t _TRACE_MPS2_FPGAIO_WRITE_DSTATE;
extern uint16_t _TRACE_MPS2_FPGAIO_RESET_DSTATE;
extern uint16_t _TRACE_MSF2_SYSREG_WRITE_DSTATE;
extern uint16_t _TRACE_MSF2_SYSREG_READ_DSTATE;
extern uint16_t _TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_DSTATE;
extern uint16_t _TRACE_IMX7_GPR_READ_DSTATE;
extern uint16_t _TRACE_IMX7_GPR_WRITE_DSTATE;
extern uint16_t _TRACE_MOS6522_SET_COUNTER_DSTATE;
extern uint16_t _TRACE_MOS6522_GET_NEXT_IRQ_TIME_DSTATE;
extern uint16_t _TRACE_MOS6522_SET_SR_INT_DSTATE;
extern uint16_t _TRACE_MOS6522_WRITE_DSTATE;
extern uint16_t _TRACE_MOS6522_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_CLK_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_CLK_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_GCR_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_GCR_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_RPM_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_CAPTURE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_UPDATE_CLOCK_DSTATE;
extern uint16_t _TRACE_NPCM7XX_MFT_SET_DUTY_DSTATE;
extern uint16_t _TRACE_NPCM7XX_RNG_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_RNG_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_PWM_READ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_PWM_WRITE_DSTATE;
extern uint16_t _TRACE_NPCM7XX_PWM_UPDATE_FREQ_DSTATE;
extern uint16_t _TRACE_NPCM7XX_PWM_UPDATE_DUTY_DSTATE;
extern uint16_t _TRACE_STM32F4XX_SYSCFG_SET_IRQ_DSTATE;
extern uint16_t _TRACE_STM32F4XX_PULSE_EXTI_DSTATE;
extern uint16_t _TRACE_STM32F4XX_SYSCFG_READ_DSTATE;
extern uint16_t _TRACE_STM32F4XX_SYSCFG_WRITE_DSTATE;
extern uint16_t _TRACE_STM32F4XX_EXTI_SET_IRQ_DSTATE;
extern uint16_t _TRACE_STM32F4XX_EXTI_READ_DSTATE;
extern uint16_t _TRACE_STM32F4XX_EXTI_WRITE_DSTATE;
extern uint16_t _TRACE_TZ_MPC_REG_READ_DSTATE;
extern uint16_t _TRACE_TZ_MPC_REG_WRITE_DSTATE;
extern uint16_t _TRACE_TZ_MPC_MEM_BLOCKED_READ_DSTATE;
extern uint16_t _TRACE_TZ_MPC_MEM_BLOCKED_WRITE_DSTATE;
extern uint16_t _TRACE_TZ_MPC_TRANSLATE_DSTATE;
extern uint16_t _TRACE_TZ_MPC_IOMMU_NOTIFY_DSTATE;
extern uint16_t _TRACE_TZ_MSC_RESET_DSTATE;
extern uint16_t _TRACE_TZ_MSC_CFG_NONSEC_DSTATE;
extern uint16_t _TRACE_TZ_MSC_CFG_SEC_RESP_DSTATE;
extern uint16_t _TRACE_TZ_MSC_IRQ_CLEAR_DSTATE;
extern uint16_t _TRACE_TZ_MSC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_TZ_MSC_ACCESS_BLOCKED_DSTATE;
extern uint16_t _TRACE_TZ_PPC_RESET_DSTATE;
extern uint16_t _TRACE_TZ_PPC_CFG_NONSEC_DSTATE;
extern uint16_t _TRACE_TZ_PPC_CFG_AP_DSTATE;
extern uint16_t _TRACE_TZ_PPC_CFG_SEC_RESP_DSTATE;
extern uint16_t _TRACE_TZ_PPC_IRQ_ENABLE_DSTATE;
extern uint16_t _TRACE_TZ_PPC_IRQ_CLEAR_DSTATE;
extern uint16_t _TRACE_TZ_PPC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_TZ_PPC_READ_BLOCKED_DSTATE;
extern uint16_t _TRACE_TZ_PPC_WRITE_BLOCKED_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_S_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_S_WRITE_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_NS_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SECCTL_NS_WRITE_DSTATE;
extern uint16_t _TRACE_CCM_ENTRY_DSTATE;
extern uint16_t _TRACE_CCM_FREQ_DSTATE;
extern uint16_t _TRACE_CCM_CLOCK_FREQ_DSTATE;
extern uint16_t _TRACE_CCM_READ_REG_DSTATE;
extern uint16_t _TRACE_CCM_WRITE_REG_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSINFO_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSINFO_WRITE_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSCTL_READ_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSCTL_WRITE_DSTATE;
extern uint16_t _TRACE_IOTKIT_SYSCTL_RESET_DSTATE;
extern uint16_t _TRACE_ARMSSE_CPU_PWRCTRL_READ_DSTATE;
extern uint16_t _TRACE_ARMSSE_CPU_PWRCTRL_WRITE_DSTATE;
extern uint16_t _TRACE_ARMSSE_CPUID_READ_DSTATE;
extern uint16_t _TRACE_ARMSSE_CPUID_WRITE_DSTATE;
extern uint16_t _TRACE_ARMSSE_MHU_READ_DSTATE;
extern uint16_t _TRACE_ARMSSE_MHU_WRITE_DSTATE;
extern uint16_t _TRACE_ASPEED_XDMA_WRITE_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_PROPERTY_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_WRITE_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_READ_DSTATE;
extern uint16_t _TRACE_BCM2835_MBOX_IRQ_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_UPDATE_DATA_OUT_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_UPDATE_DATA_IN_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_STATUS_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_CMD_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_INVALID_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_TIME_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_SET_CMD_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_INTERNAL_SET_ALT_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_SECONDS_READ_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_SECONDS_WRITE_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_TEST_WRITE_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_WPROTECT_WRITE_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_PRAM_READ_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_PRAM_WRITE_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_PRAM_SECT_READ_DSTATE;
extern uint16_t _TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE_DSTATE;
extern uint16_t _TRACE_VIA1_ADB_SEND_DSTATE;
extern uint16_t _TRACE_VIA1_ADB_RECEIVE_DSTATE;
extern uint16_t _TRACE_VIA1_ADB_POLL_DSTATE;
extern uint16_t _TRACE_VIA1_AUXMODE_DSTATE;
extern uint16_t _TRACE_GRLIB_AHB_PNP_READ_DSTATE;
extern uint16_t _TRACE_GRLIB_APB_PNP_READ_DSTATE;
extern uint16_t _TRACE_LED_SET_INTENSITY_DSTATE;
extern uint16_t _TRACE_LED_CHANGE_INTENSITY_DSTATE;
extern uint16_t _TRACE_PCA955X_GPIO_STATUS_DSTATE;
extern uint16_t _TRACE_PCA955X_GPIO_CHANGE_DSTATE;
extern uint16_t _TRACE_BCM2835_CPRMAN_READ_DSTATE;
extern uint16_t _TRACE_BCM2835_CPRMAN_WRITE_DSTATE;
extern uint16_t _TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC_DSTATE;
extern uint16_t _TRACE_VIRT_CTRL_READ_DSTATE;
extern uint16_t _TRACE_VIRT_CTRL_WRITE_DSTATE;
extern uint16_t _TRACE_VIRT_CTRL_RESET_DSTATE;
extern uint16_t _TRACE_VIRT_CTRL_REALIZE_DSTATE;
extern uint16_t _TRACE_VIRT_CTRL_INSTANCE_INIT_DSTATE;
#define TRACE_ALLWINNER_CPUCFG_CPU_RESET_ENABLED 1
#define TRACE_ALLWINNER_CPUCFG_READ_ENABLED 1
#define TRACE_ALLWINNER_CPUCFG_WRITE_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMCOM_READ_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMCOM_WRITE_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMCTL_READ_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMCTL_WRITE_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMPHY_READ_ENABLED 1
#define TRACE_ALLWINNER_H3_DRAMPHY_WRITE_ENABLED 1
#define TRACE_ALLWINNER_SID_READ_ENABLED 1
#define TRACE_ALLWINNER_SID_WRITE_ENABLED 1
#define TRACE_AVR_POWER_READ_ENABLED 1
#define TRACE_AVR_POWER_WRITE_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MER_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MDR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_MFSR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_VCR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_DR_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_ECR0_ENABLED 1
#define TRACE_ECC_MEM_WRITEL_ECR1_ENABLED 1
#define TRACE_ECC_MEM_READL_MER_ENABLED 1
#define TRACE_ECC_MEM_READL_MDR_ENABLED 1
#define TRACE_ECC_MEM_READL_MFSR_ENABLED 1
#define TRACE_ECC_MEM_READL_VCR_ENABLED 1
#define TRACE_ECC_MEM_READL_MFAR0_ENABLED 1
#define TRACE_ECC_MEM_READL_MFAR1_ENABLED 1
#define TRACE_ECC_MEM_READL_DR_ENABLED 1
#define TRACE_ECC_MEM_READL_ECR0_ENABLED 1
#define TRACE_ECC_MEM_READL_ECR1_ENABLED 1
#define TRACE_ECC_DIAG_MEM_WRITEB_ENABLED 1
#define TRACE_ECC_DIAG_MEM_READB_ENABLED 1
#define TRACE_EMPTY_SLOT_WRITE_ENABLED 1
#define TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_ENABLED 1
#define TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_ENABLED 1
#define TRACE_SLAVIO_SET_POWER_FAIL_ENABLED 1
#define TRACE_SLAVIO_CFG_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_CFG_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_DIAG_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_DIAG_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_MDM_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_MDM_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_AUX1_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_AUX1_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_AUX2_MEM_WRITEB_ENABLED 1
#define TRACE_SLAVIO_AUX2_MEM_READB_ENABLED 1
#define TRACE_APC_MEM_WRITEB_ENABLED 1
#define TRACE_APC_MEM_READB_ENABLED 1
#define TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_SYSCTRL_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_LED_MEM_WRITEW_ENABLED 1
#define TRACE_SLAVIO_LED_MEM_READW_ENABLED 1
#define TRACE_ASPEED_SCU_WRITE_ENABLED 1
#define TRACE_MPS2_SCC_READ_ENABLED 1
#define TRACE_MPS2_SCC_WRITE_ENABLED 1
#define TRACE_MPS2_SCC_RESET_ENABLED 1
#define TRACE_MPS2_SCC_CFG_WRITE_ENABLED 1
#define TRACE_MPS2_SCC_CFG_READ_ENABLED 1
#define TRACE_MPS2_FPGAIO_READ_ENABLED 1
#define TRACE_MPS2_FPGAIO_WRITE_ENABLED 1
#define TRACE_MPS2_FPGAIO_RESET_ENABLED 1
#define TRACE_MSF2_SYSREG_WRITE_ENABLED 1
#define TRACE_MSF2_SYSREG_READ_ENABLED 1
#define TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_ENABLED 1
#define TRACE_IMX7_GPR_READ_ENABLED 1
#define TRACE_IMX7_GPR_WRITE_ENABLED 1
#define TRACE_MOS6522_SET_COUNTER_ENABLED 1
#define TRACE_MOS6522_GET_NEXT_IRQ_TIME_ENABLED 1
#define TRACE_MOS6522_SET_SR_INT_ENABLED 1
#define TRACE_MOS6522_WRITE_ENABLED 1
#define TRACE_MOS6522_READ_ENABLED 1
#define TRACE_NPCM7XX_CLK_READ_ENABLED 1
#define TRACE_NPCM7XX_CLK_WRITE_ENABLED 1
#define TRACE_NPCM7XX_GCR_READ_ENABLED 1
#define TRACE_NPCM7XX_GCR_WRITE_ENABLED 1
#define TRACE_NPCM7XX_MFT_READ_ENABLED 1
#define TRACE_NPCM7XX_MFT_WRITE_ENABLED 1
#define TRACE_NPCM7XX_MFT_RPM_ENABLED 1
#define TRACE_NPCM7XX_MFT_CAPTURE_ENABLED 1
#define TRACE_NPCM7XX_MFT_UPDATE_CLOCK_ENABLED 1
#define TRACE_NPCM7XX_MFT_SET_DUTY_ENABLED 1
#define TRACE_NPCM7XX_RNG_READ_ENABLED 1
#define TRACE_NPCM7XX_RNG_WRITE_ENABLED 1
#define TRACE_NPCM7XX_PWM_READ_ENABLED 1
#define TRACE_NPCM7XX_PWM_WRITE_ENABLED 1
#define TRACE_NPCM7XX_PWM_UPDATE_FREQ_ENABLED 1
#define TRACE_NPCM7XX_PWM_UPDATE_DUTY_ENABLED 1
#define TRACE_STM32F4XX_SYSCFG_SET_IRQ_ENABLED 1
#define TRACE_STM32F4XX_PULSE_EXTI_ENABLED 1
#define TRACE_STM32F4XX_SYSCFG_READ_ENABLED 1
#define TRACE_STM32F4XX_SYSCFG_WRITE_ENABLED 1
#define TRACE_STM32F4XX_EXTI_SET_IRQ_ENABLED 1
#define TRACE_STM32F4XX_EXTI_READ_ENABLED 1
#define TRACE_STM32F4XX_EXTI_WRITE_ENABLED 1
#define TRACE_TZ_MPC_REG_READ_ENABLED 1
#define TRACE_TZ_MPC_REG_WRITE_ENABLED 1
#define TRACE_TZ_MPC_MEM_BLOCKED_READ_ENABLED 1
#define TRACE_TZ_MPC_MEM_BLOCKED_WRITE_ENABLED 1
#define TRACE_TZ_MPC_TRANSLATE_ENABLED 1
#define TRACE_TZ_MPC_IOMMU_NOTIFY_ENABLED 1
#define TRACE_TZ_MSC_RESET_ENABLED 1
#define TRACE_TZ_MSC_CFG_NONSEC_ENABLED 1
#define TRACE_TZ_MSC_CFG_SEC_RESP_ENABLED 1
#define TRACE_TZ_MSC_IRQ_CLEAR_ENABLED 1
#define TRACE_TZ_MSC_UPDATE_IRQ_ENABLED 1
#define TRACE_TZ_MSC_ACCESS_BLOCKED_ENABLED 1
#define TRACE_TZ_PPC_RESET_ENABLED 1
#define TRACE_TZ_PPC_CFG_NONSEC_ENABLED 1
#define TRACE_TZ_PPC_CFG_AP_ENABLED 1
#define TRACE_TZ_PPC_CFG_SEC_RESP_ENABLED 1
#define TRACE_TZ_PPC_IRQ_ENABLE_ENABLED 1
#define TRACE_TZ_PPC_IRQ_CLEAR_ENABLED 1
#define TRACE_TZ_PPC_UPDATE_IRQ_ENABLED 1
#define TRACE_TZ_PPC_READ_BLOCKED_ENABLED 1
#define TRACE_TZ_PPC_WRITE_BLOCKED_ENABLED 1
#define TRACE_IOTKIT_SECCTL_S_READ_ENABLED 1
#define TRACE_IOTKIT_SECCTL_S_WRITE_ENABLED 1
#define TRACE_IOTKIT_SECCTL_NS_READ_ENABLED 1
#define TRACE_IOTKIT_SECCTL_NS_WRITE_ENABLED 1
#define TRACE_CCM_ENTRY_ENABLED 1
#define TRACE_CCM_FREQ_ENABLED 1
#define TRACE_CCM_CLOCK_FREQ_ENABLED 1
#define TRACE_CCM_READ_REG_ENABLED 1
#define TRACE_CCM_WRITE_REG_ENABLED 1
#define TRACE_IOTKIT_SYSINFO_READ_ENABLED 1
#define TRACE_IOTKIT_SYSINFO_WRITE_ENABLED 1
#define TRACE_IOTKIT_SYSCTL_READ_ENABLED 1
#define TRACE_IOTKIT_SYSCTL_WRITE_ENABLED 1
#define TRACE_IOTKIT_SYSCTL_RESET_ENABLED 1
#define TRACE_ARMSSE_CPU_PWRCTRL_READ_ENABLED 1
#define TRACE_ARMSSE_CPU_PWRCTRL_WRITE_ENABLED 1
#define TRACE_ARMSSE_CPUID_READ_ENABLED 1
#define TRACE_ARMSSE_CPUID_WRITE_ENABLED 1
#define TRACE_ARMSSE_MHU_READ_ENABLED 1
#define TRACE_ARMSSE_MHU_WRITE_ENABLED 1
#define TRACE_ASPEED_XDMA_WRITE_ENABLED 1
#define TRACE_BCM2835_MBOX_PROPERTY_ENABLED 1
#define TRACE_BCM2835_MBOX_WRITE_ENABLED 1
#define TRACE_BCM2835_MBOX_READ_ENABLED 1
#define TRACE_BCM2835_MBOX_IRQ_ENABLED 1
#define TRACE_VIA1_RTC_UPDATE_DATA_OUT_ENABLED 1
#define TRACE_VIA1_RTC_UPDATE_DATA_IN_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_STATUS_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_CMD_ENABLED 1
#define TRACE_VIA1_RTC_CMD_INVALID_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_TIME_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_SET_CMD_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD_ENABLED 1
#define TRACE_VIA1_RTC_INTERNAL_SET_ALT_ENABLED 1
#define TRACE_VIA1_RTC_CMD_SECONDS_READ_ENABLED 1
#define TRACE_VIA1_RTC_CMD_SECONDS_WRITE_ENABLED 1
#define TRACE_VIA1_RTC_CMD_TEST_WRITE_ENABLED 1
#define TRACE_VIA1_RTC_CMD_WPROTECT_WRITE_ENABLED 1
#define TRACE_VIA1_RTC_CMD_PRAM_READ_ENABLED 1
#define TRACE_VIA1_RTC_CMD_PRAM_WRITE_ENABLED 1
#define TRACE_VIA1_RTC_CMD_PRAM_SECT_READ_ENABLED 1
#define TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE_ENABLED 1
#define TRACE_VIA1_ADB_SEND_ENABLED 1
#define TRACE_VIA1_ADB_RECEIVE_ENABLED 1
#define TRACE_VIA1_ADB_POLL_ENABLED 1
#define TRACE_VIA1_AUXMODE_ENABLED 1
#define TRACE_GRLIB_AHB_PNP_READ_ENABLED 1
#define TRACE_GRLIB_APB_PNP_READ_ENABLED 1
#define TRACE_LED_SET_INTENSITY_ENABLED 1
#define TRACE_LED_CHANGE_INTENSITY_ENABLED 1
#define TRACE_PCA955X_GPIO_STATUS_ENABLED 1
#define TRACE_PCA955X_GPIO_CHANGE_ENABLED 1
#define TRACE_BCM2835_CPRMAN_READ_ENABLED 1
#define TRACE_BCM2835_CPRMAN_WRITE_ENABLED 1
#define TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC_ENABLED 1
#define TRACE_VIRT_CTRL_READ_ENABLED 1
#define TRACE_VIRT_CTRL_WRITE_ENABLED 1
#define TRACE_VIRT_CTRL_RESET_ENABLED 1
#define TRACE_VIRT_CTRL_REALIZE_ENABLED 1
#define TRACE_VIRT_CTRL_INSTANCE_INIT_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_ALLWINNER_CPUCFG_CPU_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_CPUCFG_CPU_RESET) || \
    false)

static inline void _nocheck__trace_allwinner_cpucfg_cpu_reset(uint8_t cpu_id, uint32_t reset_addr)
{
    if (trace_event_get_state(TRACE_ALLWINNER_CPUCFG_CPU_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_cpucfg_cpu_reset " "id %u, reset_addr 0x%" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cpu_id, reset_addr);
#line 556 "trace/trace-hw_misc.h"
        } else {
#line 4 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_cpucfg_cpu_reset " "id %u, reset_addr 0x%" PRIu32 "\n", cpu_id, reset_addr);
#line 560 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_cpucfg_cpu_reset(uint8_t cpu_id, uint32_t reset_addr)
{
    if (true) {
        _nocheck__trace_allwinner_cpucfg_cpu_reset(cpu_id, reset_addr);
    }
}

#define TRACE_ALLWINNER_CPUCFG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_CPUCFG_READ) || \
    false)

static inline void _nocheck__trace_allwinner_cpucfg_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_CPUCFG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_cpucfg_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 587 "trace/trace-hw_misc.h"
        } else {
#line 5 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_cpucfg_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 591 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_cpucfg_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_cpucfg_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_CPUCFG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_CPUCFG_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_cpucfg_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_CPUCFG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_cpucfg_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 618 "trace/trace-hw_misc.h"
        } else {
#line 6 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_cpucfg_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 622 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_cpucfg_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_cpucfg_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramc_rowmirror_disable(void)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_DISABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramc_rowmirror_disable " "Disable row mirror" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 649 "trace/trace-hw_misc.h"
        } else {
#line 9 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_h3_dramc_rowmirror_disable " "Disable row mirror" "\n");
#line 653 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramc_rowmirror_disable(void)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramc_rowmirror_disable();
    }
}

#define TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramc_rowmirror_enable(uint64_t addr)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMC_ROWMIRROR_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramc_rowmirror_enable " "Enable row mirror: addr 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr);
#line 680 "trace/trace-hw_misc.h"
        } else {
#line 10 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_h3_dramc_rowmirror_enable " "Enable row mirror: addr 0x%" PRIx64 "\n", addr);
#line 684 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramc_rowmirror_enable(uint64_t addr)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramc_rowmirror_enable(addr);
    }
}

#define TRACE_ALLWINNER_H3_DRAMCOM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMCOM_READ) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramcom_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMCOM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramcom_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 711 "trace/trace-hw_misc.h"
        } else {
#line 11 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_h3_dramcom_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 715 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramcom_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramcom_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMCOM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMCOM_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramcom_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMCOM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramcom_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 742 "trace/trace-hw_misc.h"
        } else {
#line 12 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_h3_dramcom_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 746 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramcom_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramcom_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMCTL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMCTL_READ) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMCTL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramctl_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 773 "trace/trace-hw_misc.h"
        } else {
#line 13 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_h3_dramctl_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 777 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramctl_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMCTL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMCTL_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMCTL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramctl_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 804 "trace/trace-hw_misc.h"
        } else {
#line 14 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_h3_dramctl_write " "Write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 808 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramctl_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMPHY_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMPHY_READ) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramphy_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMPHY_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramphy_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 835 "trace/trace-hw_misc.h"
        } else {
#line 15 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_h3_dramphy_read " "Read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 839 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramphy_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramphy_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_H3_DRAMPHY_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_H3_DRAMPHY_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_h3_dramphy_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_H3_DRAMPHY_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_h3_dramphy_write " "write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 866 "trace/trace-hw_misc.h"
        } else {
#line 16 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_h3_dramphy_write " "write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 870 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_h3_dramphy_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_h3_dramphy_write(offset, data, size);
    }
}

#define TRACE_ALLWINNER_SID_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_SID_READ) || \
    false)

static inline void _nocheck__trace_allwinner_sid_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_SID_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_sid_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 897 "trace/trace-hw_misc.h"
        } else {
#line 19 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_sid_read " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 901 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_sid_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_sid_read(offset, data, size);
    }
}

#define TRACE_ALLWINNER_SID_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_SID_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_sid_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ALLWINNER_SID_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_sid_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 928 "trace/trace-hw_misc.h"
        } else {
#line 20 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("allwinner_sid_write " "offset 0x%" PRIx64 " data 0x%" PRIx64 " size %" PRIu32 "\n", offset, data, size);
#line 932 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_allwinner_sid_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_sid_write(offset, data, size);
    }
}

#define TRACE_AVR_POWER_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_POWER_READ) || \
    false)

static inline void _nocheck__trace_avr_power_read(uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_POWER_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:avr_power_read " "power_reduc read value:%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 959 "trace/trace-hw_misc.h"
        } else {
#line 23 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("avr_power_read " "power_reduc read value:%u" "\n", value);
#line 963 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_avr_power_read(uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_power_read(value);
    }
}

#define TRACE_AVR_POWER_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_AVR_POWER_WRITE) || \
    false)

static inline void _nocheck__trace_avr_power_write(uint8_t value)
{
    if (trace_event_get_state(TRACE_AVR_POWER_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:avr_power_write " "power_reduc write value:%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 990 "trace/trace-hw_misc.h"
        } else {
#line 24 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("avr_power_write " "power_reduc write value:%u" "\n", value);
#line 994 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_avr_power_write(uint8_t value)
{
    if (true) {
        _nocheck__trace_avr_power_write(value);
    }
}

#define TRACE_ECC_MEM_WRITEL_MER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_MER) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_mer(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_MER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_mer " "Write memory enable 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1021 "trace/trace-hw_misc.h"
        } else {
#line 27 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_writel_mer " "Write memory enable 0x%08x" "\n", val);
#line 1025 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_mer(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_mer(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_MDR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_MDR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_mdr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_MDR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 28 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_mdr " "Write memory delay 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1052 "trace/trace-hw_misc.h"
        } else {
#line 28 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_writel_mdr " "Write memory delay 0x%08x" "\n", val);
#line 1056 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_mdr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_mdr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_MFSR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_MFSR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_mfsr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_MFSR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 29 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_mfsr " "Write memory fault status 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1083 "trace/trace-hw_misc.h"
        } else {
#line 29 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_writel_mfsr " "Write memory fault status 0x%08x" "\n", val);
#line 1087 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_mfsr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_mfsr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_VCR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_VCR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_vcr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_VCR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_vcr " "Write slot configuration 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1114 "trace/trace-hw_misc.h"
        } else {
#line 30 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_writel_vcr " "Write slot configuration 0x%08x" "\n", val);
#line 1118 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_vcr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_vcr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_DR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_DR) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_dr(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_DR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_dr " "Write diagnostic 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1145 "trace/trace-hw_misc.h"
        } else {
#line 31 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_writel_dr " "Write diagnostic 0x%08x" "\n", val);
#line 1149 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_dr(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_dr(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_ECR0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_ECR0) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_ecr0(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_ECR0) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 32 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_ecr0 " "Write event count 1 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1176 "trace/trace-hw_misc.h"
        } else {
#line 32 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_writel_ecr0 " "Write event count 1 0x%08x" "\n", val);
#line 1180 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_ecr0(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_ecr0(val);
    }
}

#define TRACE_ECC_MEM_WRITEL_ECR1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_WRITEL_ECR1) || \
    false)

static inline void _nocheck__trace_ecc_mem_writel_ecr1(uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_MEM_WRITEL_ECR1) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_writel_ecr1 " "Write event count 2 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1207 "trace/trace-hw_misc.h"
        } else {
#line 33 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_writel_ecr1 " "Write event count 2 0x%08x" "\n", val);
#line 1211 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_writel_ecr1(uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_mem_writel_ecr1(val);
    }
}

#define TRACE_ECC_MEM_READL_MER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MER) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mer(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 34 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_mer " "Read memory enable 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1238 "trace/trace-hw_misc.h"
        } else {
#line 34 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_readl_mer " "Read memory enable 0x%08x" "\n", ret);
#line 1242 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_mer(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mer(ret);
    }
}

#define TRACE_ECC_MEM_READL_MDR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MDR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mdr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MDR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 35 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_mdr " "Read memory delay 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1269 "trace/trace-hw_misc.h"
        } else {
#line 35 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_readl_mdr " "Read memory delay 0x%08x" "\n", ret);
#line 1273 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_mdr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mdr(ret);
    }
}

#define TRACE_ECC_MEM_READL_MFSR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MFSR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mfsr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MFSR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_mfsr " "Read memory fault status 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1300 "trace/trace-hw_misc.h"
        } else {
#line 36 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_readl_mfsr " "Read memory fault status 0x%08x" "\n", ret);
#line 1304 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_mfsr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mfsr(ret);
    }
}

#define TRACE_ECC_MEM_READL_VCR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_VCR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_vcr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_VCR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_vcr " "Read slot configuration 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1331 "trace/trace-hw_misc.h"
        } else {
#line 37 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_readl_vcr " "Read slot configuration 0x%08x" "\n", ret);
#line 1335 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_vcr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_vcr(ret);
    }
}

#define TRACE_ECC_MEM_READL_MFAR0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MFAR0) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mfar0(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MFAR0) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 38 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_mfar0 " "Read memory fault address 0 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1362 "trace/trace-hw_misc.h"
        } else {
#line 38 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_readl_mfar0 " "Read memory fault address 0 0x%08x" "\n", ret);
#line 1366 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_mfar0(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mfar0(ret);
    }
}

#define TRACE_ECC_MEM_READL_MFAR1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_MFAR1) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_mfar1(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_MFAR1) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 39 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_mfar1 " "Read memory fault address 1 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1393 "trace/trace-hw_misc.h"
        } else {
#line 39 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_readl_mfar1 " "Read memory fault address 1 0x%08x" "\n", ret);
#line 1397 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_mfar1(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_mfar1(ret);
    }
}

#define TRACE_ECC_MEM_READL_DR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_DR) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_dr(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_DR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_dr " "Read diagnostic 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1424 "trace/trace-hw_misc.h"
        } else {
#line 40 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_readl_dr " "Read diagnostic 0x%08x" "\n", ret);
#line 1428 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_dr(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_dr(ret);
    }
}

#define TRACE_ECC_MEM_READL_ECR0_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_ECR0) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_ecr0(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_ECR0) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_ecr0 " "Read event count 1 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1455 "trace/trace-hw_misc.h"
        } else {
#line 41 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_readl_ecr0 " "Read event count 1 0x%08x" "\n", ret);
#line 1459 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_ecr0(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_ecr0(ret);
    }
}

#define TRACE_ECC_MEM_READL_ECR1_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_MEM_READL_ECR1) || \
    false)

static inline void _nocheck__trace_ecc_mem_readl_ecr1(uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_MEM_READL_ECR1) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 42 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_mem_readl_ecr1 " "Read event count 2 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1486 "trace/trace-hw_misc.h"
        } else {
#line 42 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_mem_readl_ecr1 " "Read event count 2 0x%08x" "\n", ret);
#line 1490 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_mem_readl_ecr1(uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_mem_readl_ecr1(ret);
    }
}

#define TRACE_ECC_DIAG_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_DIAG_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_ecc_diag_mem_writeb(uint64_t addr, uint32_t val)
{
    if (trace_event_get_state(TRACE_ECC_DIAG_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 43 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_diag_mem_writeb " "Write diagnostic %"PRId64" = 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 1517 "trace/trace-hw_misc.h"
        } else {
#line 43 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_diag_mem_writeb " "Write diagnostic %"PRId64" = 0x%02x" "\n", addr, val);
#line 1521 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_diag_mem_writeb(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_ecc_diag_mem_writeb(addr, val);
    }
}

#define TRACE_ECC_DIAG_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ECC_DIAG_MEM_READB) || \
    false)

static inline void _nocheck__trace_ecc_diag_mem_readb(uint64_t addr, uint32_t ret)
{
    if (trace_event_get_state(TRACE_ECC_DIAG_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 44 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ecc_diag_mem_readb " "Read diagnostic %"PRId64"= 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, ret);
#line 1548 "trace/trace-hw_misc.h"
        } else {
#line 44 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ecc_diag_mem_readb " "Read diagnostic %"PRId64"= 0x%02x" "\n", addr, ret);
#line 1552 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ecc_diag_mem_readb(uint64_t addr, uint32_t ret)
{
    if (true) {
        _nocheck__trace_ecc_diag_mem_readb(addr, ret);
    }
}

#define TRACE_EMPTY_SLOT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_EMPTY_SLOT_WRITE) || \
    false)

static inline void _nocheck__trace_empty_slot_write(uint64_t addr, unsigned width, uint64_t value, unsigned size, const char * name)
{
    if (trace_event_get_state(TRACE_EMPTY_SLOT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 47 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:empty_slot_write " "wr addr:0x%04"PRIx64" data:0x%0*"PRIx64" size %u [%s]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, width, value, size, name);
#line 1579 "trace/trace-hw_misc.h"
        } else {
#line 47 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("empty_slot_write " "wr addr:0x%04"PRIx64" data:0x%0*"PRIx64" size %u [%s]" "\n", addr, width, value, size, name);
#line 1583 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_empty_slot_write(uint64_t addr, unsigned width, uint64_t value, unsigned size, const char * name)
{
    if (true) {
        _nocheck__trace_empty_slot_write(addr, width, value, size, name);
    }
}

#define TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE) || \
    false)

static inline void _nocheck__trace_slavio_misc_update_irq_raise(void)
{
    if (trace_event_get_state(TRACE_SLAVIO_MISC_UPDATE_IRQ_RAISE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 50 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_misc_update_irq_raise " "Raise IRQ" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1610 "trace/trace-hw_misc.h"
        } else {
#line 50 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_misc_update_irq_raise " "Raise IRQ" "\n");
#line 1614 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_misc_update_irq_raise(void)
{
    if (true) {
        _nocheck__trace_slavio_misc_update_irq_raise();
    }
}

#define TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER) || \
    false)

static inline void _nocheck__trace_slavio_misc_update_irq_lower(void)
{
    if (trace_event_get_state(TRACE_SLAVIO_MISC_UPDATE_IRQ_LOWER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 51 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_misc_update_irq_lower " "Lower IRQ" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 1641 "trace/trace-hw_misc.h"
        } else {
#line 51 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_misc_update_irq_lower " "Lower IRQ" "\n");
#line 1645 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_misc_update_irq_lower(void)
{
    if (true) {
        _nocheck__trace_slavio_misc_update_irq_lower();
    }
}

#define TRACE_SLAVIO_SET_POWER_FAIL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SET_POWER_FAIL) || \
    false)

static inline void _nocheck__trace_slavio_set_power_fail(int power_failing, uint8_t config)
{
    if (trace_event_get_state(TRACE_SLAVIO_SET_POWER_FAIL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 52 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_set_power_fail " "Power fail: %d, config: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , power_failing, config);
#line 1672 "trace/trace-hw_misc.h"
        } else {
#line 52 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_set_power_fail " "Power fail: %d, config: %d" "\n", power_failing, config);
#line 1676 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_set_power_fail(int power_failing, uint8_t config)
{
    if (true) {
        _nocheck__trace_slavio_set_power_fail(power_failing, config);
    }
}

#define TRACE_SLAVIO_CFG_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_CFG_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_cfg_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_CFG_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 53 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_cfg_mem_writeb " "Write config 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1703 "trace/trace-hw_misc.h"
        } else {
#line 53 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_cfg_mem_writeb " "Write config 0x%02x" "\n", val);
#line 1707 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_cfg_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_cfg_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_CFG_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_CFG_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_cfg_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_CFG_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 54 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_cfg_mem_readb " "Read config 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1734 "trace/trace-hw_misc.h"
        } else {
#line 54 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_cfg_mem_readb " "Read config 0x%02x" "\n", ret);
#line 1738 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_cfg_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_cfg_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_DIAG_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_DIAG_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_diag_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_DIAG_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 55 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_diag_mem_writeb " "Write diag 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1765 "trace/trace-hw_misc.h"
        } else {
#line 55 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_diag_mem_writeb " "Write diag 0x%02x" "\n", val);
#line 1769 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_diag_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_diag_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_DIAG_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_DIAG_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_diag_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_DIAG_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 56 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_diag_mem_readb " "Read diag 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1796 "trace/trace-hw_misc.h"
        } else {
#line 56 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_diag_mem_readb " "Read diag 0x%02x" "\n", ret);
#line 1800 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_diag_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_diag_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_MDM_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MDM_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_mdm_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_MDM_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 57 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_mdm_mem_writeb " "Write modem control 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1827 "trace/trace-hw_misc.h"
        } else {
#line 57 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_mdm_mem_writeb " "Write modem control 0x%02x" "\n", val);
#line 1831 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_mdm_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_mdm_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_MDM_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_MDM_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_mdm_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_MDM_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 58 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_mdm_mem_readb " "Read modem control 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1858 "trace/trace-hw_misc.h"
        } else {
#line 58 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_mdm_mem_readb " "Read modem control 0x%02x" "\n", ret);
#line 1862 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_mdm_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_mdm_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_AUX1_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX1_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_aux1_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX1_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 59 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_aux1_mem_writeb " "Write aux1 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1889 "trace/trace-hw_misc.h"
        } else {
#line 59 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_aux1_mem_writeb " "Write aux1 0x%02x" "\n", val);
#line 1893 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_aux1_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_aux1_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_AUX1_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX1_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_aux1_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX1_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 60 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_aux1_mem_readb " "Read aux1 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1920 "trace/trace-hw_misc.h"
        } else {
#line 60 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_aux1_mem_readb " "Read aux1 0x%02x" "\n", ret);
#line 1924 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_aux1_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_aux1_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_AUX2_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX2_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_slavio_aux2_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX2_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 61 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_aux2_mem_writeb " "Write aux2 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 1951 "trace/trace-hw_misc.h"
        } else {
#line 61 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_aux2_mem_writeb " "Write aux2 0x%02x" "\n", val);
#line 1955 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_aux2_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_aux2_mem_writeb(val);
    }
}

#define TRACE_SLAVIO_AUX2_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_AUX2_MEM_READB) || \
    false)

static inline void _nocheck__trace_slavio_aux2_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_AUX2_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 62 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_aux2_mem_readb " "Read aux2 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 1982 "trace/trace-hw_misc.h"
        } else {
#line 62 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_aux2_mem_readb " "Read aux2 0x%02x" "\n", ret);
#line 1986 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_aux2_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_aux2_mem_readb(ret);
    }
}

#define TRACE_APC_MEM_WRITEB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APC_MEM_WRITEB) || \
    false)

static inline void _nocheck__trace_apc_mem_writeb(uint32_t val)
{
    if (trace_event_get_state(TRACE_APC_MEM_WRITEB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 63 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:apc_mem_writeb " "Write power management 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 2013 "trace/trace-hw_misc.h"
        } else {
#line 63 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("apc_mem_writeb " "Write power management 0x%02x" "\n", val);
#line 2017 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_apc_mem_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_apc_mem_writeb(val);
    }
}

#define TRACE_APC_MEM_READB_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_APC_MEM_READB) || \
    false)

static inline void _nocheck__trace_apc_mem_readb(uint32_t ret)
{
    if (trace_event_get_state(TRACE_APC_MEM_READB) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 64 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:apc_mem_readb " "Read power management 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2044 "trace/trace-hw_misc.h"
        } else {
#line 64 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("apc_mem_readb " "Read power management 0x%02x" "\n", ret);
#line 2048 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_apc_mem_readb(uint32_t ret)
{
    if (true) {
        _nocheck__trace_apc_mem_readb(ret);
    }
}

#define TRACE_SLAVIO_SYSCTRL_MEM_WRITEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SYSCTRL_MEM_WRITEL) || \
    false)

static inline void _nocheck__trace_slavio_sysctrl_mem_writel(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_SYSCTRL_MEM_WRITEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 65 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_sysctrl_mem_writel " "Write system control 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 2075 "trace/trace-hw_misc.h"
        } else {
#line 65 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_sysctrl_mem_writel " "Write system control 0x%08x" "\n", val);
#line 2079 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_sysctrl_mem_writel(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_sysctrl_mem_writel(val);
    }
}

#define TRACE_SLAVIO_SYSCTRL_MEM_READL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_SYSCTRL_MEM_READL) || \
    false)

static inline void _nocheck__trace_slavio_sysctrl_mem_readl(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_SYSCTRL_MEM_READL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 66 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_sysctrl_mem_readl " "Read system control 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2106 "trace/trace-hw_misc.h"
        } else {
#line 66 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_sysctrl_mem_readl " "Read system control 0x%08x" "\n", ret);
#line 2110 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_sysctrl_mem_readl(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_sysctrl_mem_readl(ret);
    }
}

#define TRACE_SLAVIO_LED_MEM_WRITEW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_LED_MEM_WRITEW) || \
    false)

static inline void _nocheck__trace_slavio_led_mem_writew(uint32_t val)
{
    if (trace_event_get_state(TRACE_SLAVIO_LED_MEM_WRITEW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 67 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_led_mem_writew " "Write diagnostic LED 0x%04x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , val);
#line 2137 "trace/trace-hw_misc.h"
        } else {
#line 67 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_led_mem_writew " "Write diagnostic LED 0x%04x" "\n", val);
#line 2141 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_led_mem_writew(uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_led_mem_writew(val);
    }
}

#define TRACE_SLAVIO_LED_MEM_READW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SLAVIO_LED_MEM_READW) || \
    false)

static inline void _nocheck__trace_slavio_led_mem_readw(uint32_t ret)
{
    if (trace_event_get_state(TRACE_SLAVIO_LED_MEM_READW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 68 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:slavio_led_mem_readw " "Read diagnostic LED 0x%04x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ret);
#line 2168 "trace/trace-hw_misc.h"
        } else {
#line 68 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("slavio_led_mem_readw " "Read diagnostic LED 0x%04x" "\n", ret);
#line 2172 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_slavio_led_mem_readw(uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_led_mem_readw(ret);
    }
}

#define TRACE_ASPEED_SCU_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_SCU_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_scu_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_SCU_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 71 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_scu_write " "To 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, size, data);
#line 2199 "trace/trace-hw_misc.h"
        } else {
#line 71 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("aspeed_scu_write " "To 0x%" PRIx64 " of size %u: 0x%" PRIx32 "\n", offset, size, data);
#line 2203 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_scu_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (true) {
        _nocheck__trace_aspeed_scu_write(offset, size, data);
    }
}

#define TRACE_MPS2_SCC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_READ) || \
    false)

static inline void _nocheck__trace_mps2_scc_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 74 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_scc_read " "MPS2 SCC read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2230 "trace/trace-hw_misc.h"
        } else {
#line 74 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mps2_scc_read " "MPS2 SCC read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2234 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_scc_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_scc_read(offset, data, size);
    }
}

#define TRACE_MPS2_SCC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_WRITE) || \
    false)

static inline void _nocheck__trace_mps2_scc_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 75 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_scc_write " "MPS2 SCC write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2261 "trace/trace-hw_misc.h"
        } else {
#line 75 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mps2_scc_write " "MPS2 SCC write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2265 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_scc_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_scc_write(offset, data, size);
    }
}

#define TRACE_MPS2_SCC_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_RESET) || \
    false)

static inline void _nocheck__trace_mps2_scc_reset(void)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 76 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_scc_reset " "MPS2 SCC: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2292 "trace/trace-hw_misc.h"
        } else {
#line 76 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mps2_scc_reset " "MPS2 SCC: reset" "\n");
#line 2296 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_scc_reset(void)
{
    if (true) {
        _nocheck__trace_mps2_scc_reset();
    }
}

#define TRACE_MPS2_SCC_CFG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_CFG_WRITE) || \
    false)

static inline void _nocheck__trace_mps2_scc_cfg_write(unsigned function, unsigned device, uint32_t value)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_CFG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 77 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_scc_cfg_write " "MPS2 SCC config write: function %d device %d data 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , function, device, value);
#line 2323 "trace/trace-hw_misc.h"
        } else {
#line 77 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mps2_scc_cfg_write " "MPS2 SCC config write: function %d device %d data 0x%" PRIx32 "\n", function, device, value);
#line 2327 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_scc_cfg_write(unsigned function, unsigned device, uint32_t value)
{
    if (true) {
        _nocheck__trace_mps2_scc_cfg_write(function, device, value);
    }
}

#define TRACE_MPS2_SCC_CFG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_SCC_CFG_READ) || \
    false)

static inline void _nocheck__trace_mps2_scc_cfg_read(unsigned function, unsigned device, uint32_t value)
{
    if (trace_event_get_state(TRACE_MPS2_SCC_CFG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 78 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_scc_cfg_read " "MPS2 SCC config read: function %d device %d data 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , function, device, value);
#line 2354 "trace/trace-hw_misc.h"
        } else {
#line 78 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mps2_scc_cfg_read " "MPS2 SCC config read: function %d device %d data 0x%" PRIx32 "\n", function, device, value);
#line 2358 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_scc_cfg_read(unsigned function, unsigned device, uint32_t value)
{
    if (true) {
        _nocheck__trace_mps2_scc_cfg_read(function, device, value);
    }
}

#define TRACE_MPS2_FPGAIO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_FPGAIO_READ) || \
    false)

static inline void _nocheck__trace_mps2_fpgaio_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_FPGAIO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 81 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_fpgaio_read " "MPS2 FPGAIO read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2385 "trace/trace-hw_misc.h"
        } else {
#line 81 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mps2_fpgaio_read " "MPS2 FPGAIO read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2389 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_fpgaio_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_fpgaio_read(offset, data, size);
    }
}

#define TRACE_MPS2_FPGAIO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_FPGAIO_WRITE) || \
    false)

static inline void _nocheck__trace_mps2_fpgaio_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_MPS2_FPGAIO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 82 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_fpgaio_write " "MPS2 FPGAIO write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 2416 "trace/trace-hw_misc.h"
        } else {
#line 82 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mps2_fpgaio_write " "MPS2 FPGAIO write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 2420 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_fpgaio_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_mps2_fpgaio_write(offset, data, size);
    }
}

#define TRACE_MPS2_FPGAIO_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MPS2_FPGAIO_RESET) || \
    false)

static inline void _nocheck__trace_mps2_fpgaio_reset(void)
{
    if (trace_event_get_state(TRACE_MPS2_FPGAIO_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 83 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mps2_fpgaio_reset " "MPS2 FPGAIO: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2447 "trace/trace-hw_misc.h"
        } else {
#line 83 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mps2_fpgaio_reset " "MPS2 FPGAIO: reset" "\n");
#line 2451 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mps2_fpgaio_reset(void)
{
    if (true) {
        _nocheck__trace_mps2_fpgaio_reset();
    }
}

#define TRACE_MSF2_SYSREG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MSF2_SYSREG_WRITE) || \
    false)

static inline void _nocheck__trace_msf2_sysreg_write(uint64_t offset, uint32_t val, uint32_t prev)
{
    if (trace_event_get_state(TRACE_MSF2_SYSREG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 86 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:msf2_sysreg_write " "msf2-sysreg write: addr 0x%08" PRIx64 " data 0x%" PRIx32 " prev 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, val, prev);
#line 2478 "trace/trace-hw_misc.h"
        } else {
#line 86 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("msf2_sysreg_write " "msf2-sysreg write: addr 0x%08" PRIx64 " data 0x%" PRIx32 " prev 0x%" PRIx32 "\n", offset, val, prev);
#line 2482 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_msf2_sysreg_write(uint64_t offset, uint32_t val, uint32_t prev)
{
    if (true) {
        _nocheck__trace_msf2_sysreg_write(offset, val, prev);
    }
}

#define TRACE_MSF2_SYSREG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MSF2_SYSREG_READ) || \
    false)

static inline void _nocheck__trace_msf2_sysreg_read(uint64_t offset, uint32_t val)
{
    if (trace_event_get_state(TRACE_MSF2_SYSREG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 87 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:msf2_sysreg_read " "msf2-sysreg read: addr 0x%08" PRIx64 " data 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, val);
#line 2509 "trace/trace-hw_misc.h"
        } else {
#line 87 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("msf2_sysreg_read " "msf2-sysreg read: addr 0x%08" PRIx64 " data 0x%08" PRIx32 "\n", offset, val);
#line 2513 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_msf2_sysreg_read(uint64_t offset, uint32_t val)
{
    if (true) {
        _nocheck__trace_msf2_sysreg_read(offset, val);
    }
}

#define TRACE_MSF2_SYSREG_WRITE_PLL_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MSF2_SYSREG_WRITE_PLL_STATUS) || \
    false)

static inline void _nocheck__trace_msf2_sysreg_write_pll_status(void)
{
    if (trace_event_get_state(TRACE_MSF2_SYSREG_WRITE_PLL_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 88 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:msf2_sysreg_write_pll_status " "Invalid write to read only PLL status register" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2540 "trace/trace-hw_misc.h"
        } else {
#line 88 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("msf2_sysreg_write_pll_status " "Invalid write to read only PLL status register" "\n");
#line 2544 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_msf2_sysreg_write_pll_status(void)
{
    if (true) {
        _nocheck__trace_msf2_sysreg_write_pll_status();
    }
}

#define TRACE_IMX7_GPR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IMX7_GPR_READ) || \
    false)

static inline void _nocheck__trace_imx7_gpr_read(uint64_t offset)
{
    if (trace_event_get_state(TRACE_IMX7_GPR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 91 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:imx7_gpr_read " "addr 0x%08" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset);
#line 2571 "trace/trace-hw_misc.h"
        } else {
#line 91 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("imx7_gpr_read " "addr 0x%08" PRIx64 "\n", offset);
#line 2575 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_imx7_gpr_read(uint64_t offset)
{
    if (true) {
        _nocheck__trace_imx7_gpr_read(offset);
    }
}

#define TRACE_IMX7_GPR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IMX7_GPR_WRITE) || \
    false)

static inline void _nocheck__trace_imx7_gpr_write(uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_IMX7_GPR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 92 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:imx7_gpr_write " "addr 0x%08" PRIx64 "value 0x%08" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 2602 "trace/trace-hw_misc.h"
        } else {
#line 92 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("imx7_gpr_write " "addr 0x%08" PRIx64 "value 0x%08" PRIx64 "\n", offset, value);
#line 2606 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_imx7_gpr_write(uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_imx7_gpr_write(offset, value);
    }
}

#define TRACE_MOS6522_SET_COUNTER_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_SET_COUNTER) || \
    false)

static inline void _nocheck__trace_mos6522_set_counter(int index, unsigned int val)
{
    if (trace_event_get_state(TRACE_MOS6522_SET_COUNTER) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 95 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mos6522_set_counter " "T%d.counter=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , index, val);
#line 2633 "trace/trace-hw_misc.h"
        } else {
#line 95 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mos6522_set_counter " "T%d.counter=%d" "\n", index, val);
#line 2637 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mos6522_set_counter(int index, unsigned int val)
{
    if (true) {
        _nocheck__trace_mos6522_set_counter(index, val);
    }
}

#define TRACE_MOS6522_GET_NEXT_IRQ_TIME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_GET_NEXT_IRQ_TIME) || \
    false)

static inline void _nocheck__trace_mos6522_get_next_irq_time(uint16_t latch, int64_t d, int64_t delta)
{
    if (trace_event_get_state(TRACE_MOS6522_GET_NEXT_IRQ_TIME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 96 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mos6522_get_next_irq_time " "latch=%d counter=0x%"PRId64 " delta_next=0x%"PRId64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , latch, d, delta);
#line 2664 "trace/trace-hw_misc.h"
        } else {
#line 96 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mos6522_get_next_irq_time " "latch=%d counter=0x%"PRId64 " delta_next=0x%"PRId64 "\n", latch, d, delta);
#line 2668 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mos6522_get_next_irq_time(uint16_t latch, int64_t d, int64_t delta)
{
    if (true) {
        _nocheck__trace_mos6522_get_next_irq_time(latch, d, delta);
    }
}

#define TRACE_MOS6522_SET_SR_INT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_SET_SR_INT) || \
    false)

static inline void _nocheck__trace_mos6522_set_sr_int(void)
{
    if (trace_event_get_state(TRACE_MOS6522_SET_SR_INT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 97 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mos6522_set_sr_int " "set sr_int" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 2695 "trace/trace-hw_misc.h"
        } else {
#line 97 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mos6522_set_sr_int " "set sr_int" "\n");
#line 2699 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mos6522_set_sr_int(void)
{
    if (true) {
        _nocheck__trace_mos6522_set_sr_int();
    }
}

#define TRACE_MOS6522_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_WRITE) || \
    false)

static inline void _nocheck__trace_mos6522_write(uint64_t addr, uint64_t val)
{
    if (trace_event_get_state(TRACE_MOS6522_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 98 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mos6522_write " "reg=0x%"PRIx64 " val=0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 2726 "trace/trace-hw_misc.h"
        } else {
#line 98 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mos6522_write " "reg=0x%"PRIx64 " val=0x%"PRIx64 "\n", addr, val);
#line 2730 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mos6522_write(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_mos6522_write(addr, val);
    }
}

#define TRACE_MOS6522_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_MOS6522_READ) || \
    false)

static inline void _nocheck__trace_mos6522_read(uint64_t addr, unsigned val)
{
    if (trace_event_get_state(TRACE_MOS6522_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 99 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:mos6522_read " "reg=0x%"PRIx64 " val=0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val);
#line 2757 "trace/trace-hw_misc.h"
        } else {
#line 99 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("mos6522_read " "reg=0x%"PRIx64 " val=0x%x" "\n", addr, val);
#line 2761 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_mos6522_read(uint64_t addr, unsigned val)
{
    if (true) {
        _nocheck__trace_mos6522_read(addr, val);
    }
}

#define TRACE_NPCM7XX_CLK_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_CLK_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_clk_read(uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_CLK_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 102 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_clk_read " " offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 2788 "trace/trace-hw_misc.h"
        } else {
#line 102 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_clk_read " " offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", offset, value);
#line 2792 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_clk_read(uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_clk_read(offset, value);
    }
}

#define TRACE_NPCM7XX_CLK_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_CLK_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_clk_write(uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_CLK_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 103 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_clk_write " "offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 2819 "trace/trace-hw_misc.h"
        } else {
#line 103 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_clk_write " "offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", offset, value);
#line 2823 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_clk_write(uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_clk_write(offset, value);
    }
}

#define TRACE_NPCM7XX_GCR_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_GCR_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_gcr_read(uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_GCR_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 106 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_gcr_read " " offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 2850 "trace/trace-hw_misc.h"
        } else {
#line 106 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_gcr_read " " offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", offset, value);
#line 2854 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_gcr_read(uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_gcr_read(offset, value);
    }
}

#define TRACE_NPCM7XX_GCR_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_GCR_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_gcr_write(uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_GCR_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 107 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_gcr_write " "offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 2881 "trace/trace-hw_misc.h"
        } else {
#line 107 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_gcr_write " "offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", offset, value);
#line 2885 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_gcr_write(uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_gcr_write(offset, value);
    }
}

#define TRACE_NPCM7XX_MFT_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_read(const char * name, uint64_t offset, uint16_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 110 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_read " "%s: offset: 0x%04" PRIx64 " value: 0x%04" PRIx16 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, offset, value);
#line 2912 "trace/trace-hw_misc.h"
        } else {
#line 110 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_mft_read " "%s: offset: 0x%04" PRIx64 " value: 0x%04" PRIx16 "\n", name, offset, value);
#line 2916 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_read(const char * name, uint64_t offset, uint16_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_read(name, offset, value);
    }
}

#define TRACE_NPCM7XX_MFT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_write(const char * name, uint64_t offset, uint16_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 111 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_write " "%s: offset: 0x%04" PRIx64 " value: 0x%04" PRIx16 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, offset, value);
#line 2943 "trace/trace-hw_misc.h"
        } else {
#line 111 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_mft_write " "%s: offset: 0x%04" PRIx64 " value: 0x%04" PRIx16 "\n", name, offset, value);
#line 2947 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_write(const char * name, uint64_t offset, uint16_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_write(name, offset, value);
    }
}

#define TRACE_NPCM7XX_MFT_RPM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_RPM) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_rpm(const char * clock, uint32_t clock_hz, int state, int32_t cnt, uint32_t rpm, uint32_t duty)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_RPM) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 112 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_rpm " " fan clk: %s clock_hz: %" PRIu32 ", state: %d, cnt: %" PRIi32 ", rpm: %" PRIu32 ", duty: %" PRIu32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , clock, clock_hz, state, cnt, rpm, duty);
#line 2974 "trace/trace-hw_misc.h"
        } else {
#line 112 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_mft_rpm " " fan clk: %s clock_hz: %" PRIu32 ", state: %d, cnt: %" PRIi32 ", rpm: %" PRIu32 ", duty: %" PRIu32 "\n", clock, clock_hz, state, cnt, rpm, duty);
#line 2978 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_rpm(const char * clock, uint32_t clock_hz, int state, int32_t cnt, uint32_t rpm, uint32_t duty)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_rpm(clock, clock_hz, state, cnt, rpm, duty);
    }
}

#define TRACE_NPCM7XX_MFT_CAPTURE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_CAPTURE) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_capture(const char * name, int irq_level)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_CAPTURE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 113 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_capture " "%s: level: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, irq_level);
#line 3005 "trace/trace-hw_misc.h"
        } else {
#line 113 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_mft_capture " "%s: level: %d" "\n", name, irq_level);
#line 3009 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_capture(const char * name, int irq_level)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_capture(name, irq_level);
    }
}

#define TRACE_NPCM7XX_MFT_UPDATE_CLOCK_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_UPDATE_CLOCK) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_update_clock(const char * name, uint16_t sel, uint64_t clock_period, uint64_t prescaled_clock_period)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_UPDATE_CLOCK) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 114 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_update_clock " "%s: sel: 0x%02" PRIx16 ", period: %" PRIu64 ", prescaled: %" PRIu64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, sel, clock_period, prescaled_clock_period);
#line 3036 "trace/trace-hw_misc.h"
        } else {
#line 114 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_mft_update_clock " "%s: sel: 0x%02" PRIx16 ", period: %" PRIu64 ", prescaled: %" PRIu64 "\n", name, sel, clock_period, prescaled_clock_period);
#line 3040 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_update_clock(const char * name, uint16_t sel, uint64_t clock_period, uint64_t prescaled_clock_period)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_update_clock(name, sel, clock_period, prescaled_clock_period);
    }
}

#define TRACE_NPCM7XX_MFT_SET_DUTY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_MFT_SET_DUTY) || \
    false)

static inline void _nocheck__trace_npcm7xx_mft_set_duty(const char * name, int n, int value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_MFT_SET_DUTY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 115 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_mft_set_duty " "%s[%d]: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name, n, value);
#line 3067 "trace/trace-hw_misc.h"
        } else {
#line 115 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_mft_set_duty " "%s[%d]: %d" "\n", name, n, value);
#line 3071 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_mft_set_duty(const char * name, int n, int value)
{
    if (true) {
        _nocheck__trace_npcm7xx_mft_set_duty(name, n, value);
    }
}

#define TRACE_NPCM7XX_RNG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_RNG_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_rng_read(uint64_t offset, uint64_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NPCM7XX_RNG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 118 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_rng_read " "offset: 0x%04" PRIx64 " value: 0x%02" PRIx64 " size: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value, size);
#line 3098 "trace/trace-hw_misc.h"
        } else {
#line 118 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_rng_read " "offset: 0x%04" PRIx64 " value: 0x%02" PRIx64 " size: %u" "\n", offset, value, size);
#line 3102 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_rng_read(uint64_t offset, uint64_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_npcm7xx_rng_read(offset, value, size);
    }
}

#define TRACE_NPCM7XX_RNG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_RNG_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_rng_write(uint64_t offset, uint64_t value, unsigned size)
{
    if (trace_event_get_state(TRACE_NPCM7XX_RNG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 119 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_rng_write " "offset: 0x%04" PRIx64 " value: 0x%02" PRIx64 " size: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value, size);
#line 3129 "trace/trace-hw_misc.h"
        } else {
#line 119 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_rng_write " "offset: 0x%04" PRIx64 " value: 0x%02" PRIx64 " size: %u" "\n", offset, value, size);
#line 3133 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_rng_write(uint64_t offset, uint64_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_npcm7xx_rng_write(offset, value, size);
    }
}

#define TRACE_NPCM7XX_PWM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_PWM_READ) || \
    false)

static inline void _nocheck__trace_npcm7xx_pwm_read(const char * id, uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_PWM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 122 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_pwm_read " "%s offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, offset, value);
#line 3160 "trace/trace-hw_misc.h"
        } else {
#line 122 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_pwm_read " "%s offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", id, offset, value);
#line 3164 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_pwm_read(const char * id, uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_pwm_read(id, offset, value);
    }
}

#define TRACE_NPCM7XX_PWM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_PWM_WRITE) || \
    false)

static inline void _nocheck__trace_npcm7xx_pwm_write(const char * id, uint64_t offset, uint32_t value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_PWM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 123 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_pwm_write " "%s offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, offset, value);
#line 3191 "trace/trace-hw_misc.h"
        } else {
#line 123 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_pwm_write " "%s offset: 0x%04" PRIx64 " value: 0x%08" PRIx32 "\n", id, offset, value);
#line 3195 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_pwm_write(const char * id, uint64_t offset, uint32_t value)
{
    if (true) {
        _nocheck__trace_npcm7xx_pwm_write(id, offset, value);
    }
}

#define TRACE_NPCM7XX_PWM_UPDATE_FREQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_PWM_UPDATE_FREQ) || \
    false)

static inline void _nocheck__trace_npcm7xx_pwm_update_freq(const char * id, uint8_t index, uint32_t old_value, uint32_t new_value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_PWM_UPDATE_FREQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 124 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_pwm_update_freq " "%s pwm[%u] Update Freq: old_freq: %u, new_freq: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, index, old_value, new_value);
#line 3222 "trace/trace-hw_misc.h"
        } else {
#line 124 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_pwm_update_freq " "%s pwm[%u] Update Freq: old_freq: %u, new_freq: %u" "\n", id, index, old_value, new_value);
#line 3226 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_pwm_update_freq(const char * id, uint8_t index, uint32_t old_value, uint32_t new_value)
{
    if (true) {
        _nocheck__trace_npcm7xx_pwm_update_freq(id, index, old_value, new_value);
    }
}

#define TRACE_NPCM7XX_PWM_UPDATE_DUTY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_NPCM7XX_PWM_UPDATE_DUTY) || \
    false)

static inline void _nocheck__trace_npcm7xx_pwm_update_duty(const char * id, uint8_t index, uint32_t old_value, uint32_t new_value)
{
    if (trace_event_get_state(TRACE_NPCM7XX_PWM_UPDATE_DUTY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 125 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:npcm7xx_pwm_update_duty " "%s pwm[%u] Update Duty: old_duty: %u, new_duty: %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, index, old_value, new_value);
#line 3253 "trace/trace-hw_misc.h"
        } else {
#line 125 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("npcm7xx_pwm_update_duty " "%s pwm[%u] Update Duty: old_duty: %u, new_duty: %u" "\n", id, index, old_value, new_value);
#line 3257 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_npcm7xx_pwm_update_duty(const char * id, uint8_t index, uint32_t old_value, uint32_t new_value)
{
    if (true) {
        _nocheck__trace_npcm7xx_pwm_update_duty(id, index, old_value, new_value);
    }
}

#define TRACE_STM32F4XX_SYSCFG_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_SYSCFG_SET_IRQ) || \
    false)

static inline void _nocheck__trace_stm32f4xx_syscfg_set_irq(int gpio, int line, int level)
{
    if (trace_event_get_state(TRACE_STM32F4XX_SYSCFG_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 128 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_syscfg_set_irq " "Interrupt: GPIO: %d, Line: %d; Level: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , gpio, line, level);
#line 3284 "trace/trace-hw_misc.h"
        } else {
#line 128 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("stm32f4xx_syscfg_set_irq " "Interrupt: GPIO: %d, Line: %d; Level: %d" "\n", gpio, line, level);
#line 3288 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_syscfg_set_irq(int gpio, int line, int level)
{
    if (true) {
        _nocheck__trace_stm32f4xx_syscfg_set_irq(gpio, line, level);
    }
}

#define TRACE_STM32F4XX_PULSE_EXTI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_PULSE_EXTI) || \
    false)

static inline void _nocheck__trace_stm32f4xx_pulse_exti(int irq)
{
    if (trace_event_get_state(TRACE_STM32F4XX_PULSE_EXTI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 129 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_pulse_exti " "Pulse EXTI: %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq);
#line 3315 "trace/trace-hw_misc.h"
        } else {
#line 129 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("stm32f4xx_pulse_exti " "Pulse EXTI: %d" "\n", irq);
#line 3319 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_pulse_exti(int irq)
{
    if (true) {
        _nocheck__trace_stm32f4xx_pulse_exti(irq);
    }
}

#define TRACE_STM32F4XX_SYSCFG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_SYSCFG_READ) || \
    false)

static inline void _nocheck__trace_stm32f4xx_syscfg_read(uint64_t addr)
{
    if (trace_event_get_state(TRACE_STM32F4XX_SYSCFG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 130 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_syscfg_read " "reg read: addr: 0x%" PRIx64 " " "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr);
#line 3346 "trace/trace-hw_misc.h"
        } else {
#line 130 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("stm32f4xx_syscfg_read " "reg read: addr: 0x%" PRIx64 " " "\n", addr);
#line 3350 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_syscfg_read(uint64_t addr)
{
    if (true) {
        _nocheck__trace_stm32f4xx_syscfg_read(addr);
    }
}

#define TRACE_STM32F4XX_SYSCFG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_SYSCFG_WRITE) || \
    false)

static inline void _nocheck__trace_stm32f4xx_syscfg_write(uint64_t addr, uint64_t data)
{
    if (trace_event_get_state(TRACE_STM32F4XX_SYSCFG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 131 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_syscfg_write " "reg write: addr: 0x%" PRIx64 " val: 0x%" PRIx64 "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, data);
#line 3377 "trace/trace-hw_misc.h"
        } else {
#line 131 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("stm32f4xx_syscfg_write " "reg write: addr: 0x%" PRIx64 " val: 0x%" PRIx64 "" "\n", addr, data);
#line 3381 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_syscfg_write(uint64_t addr, uint64_t data)
{
    if (true) {
        _nocheck__trace_stm32f4xx_syscfg_write(addr, data);
    }
}

#define TRACE_STM32F4XX_EXTI_SET_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_EXTI_SET_IRQ) || \
    false)

static inline void _nocheck__trace_stm32f4xx_exti_set_irq(int irq, int leve)
{
    if (trace_event_get_state(TRACE_STM32F4XX_EXTI_SET_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 134 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_exti_set_irq " "Set EXTI: %d to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , irq, leve);
#line 3408 "trace/trace-hw_misc.h"
        } else {
#line 134 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("stm32f4xx_exti_set_irq " "Set EXTI: %d to %d" "\n", irq, leve);
#line 3412 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_exti_set_irq(int irq, int leve)
{
    if (true) {
        _nocheck__trace_stm32f4xx_exti_set_irq(irq, leve);
    }
}

#define TRACE_STM32F4XX_EXTI_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_EXTI_READ) || \
    false)

static inline void _nocheck__trace_stm32f4xx_exti_read(uint64_t addr)
{
    if (trace_event_get_state(TRACE_STM32F4XX_EXTI_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 135 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_exti_read " "reg read: addr: 0x%" PRIx64 " " "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr);
#line 3439 "trace/trace-hw_misc.h"
        } else {
#line 135 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("stm32f4xx_exti_read " "reg read: addr: 0x%" PRIx64 " " "\n", addr);
#line 3443 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_exti_read(uint64_t addr)
{
    if (true) {
        _nocheck__trace_stm32f4xx_exti_read(addr);
    }
}

#define TRACE_STM32F4XX_EXTI_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_STM32F4XX_EXTI_WRITE) || \
    false)

static inline void _nocheck__trace_stm32f4xx_exti_write(uint64_t addr, uint64_t data)
{
    if (trace_event_get_state(TRACE_STM32F4XX_EXTI_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 136 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:stm32f4xx_exti_write " "reg write: addr: 0x%" PRIx64 " val: 0x%" PRIx64 "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, data);
#line 3470 "trace/trace-hw_misc.h"
        } else {
#line 136 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("stm32f4xx_exti_write " "reg write: addr: 0x%" PRIx64 " val: 0x%" PRIx64 "" "\n", addr, data);
#line 3474 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_stm32f4xx_exti_write(uint64_t addr, uint64_t data)
{
    if (true) {
        _nocheck__trace_stm32f4xx_exti_write(addr, data);
    }
}

#define TRACE_TZ_MPC_REG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_REG_READ) || \
    false)

static inline void _nocheck__trace_tz_mpc_reg_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_TZ_MPC_REG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 139 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_reg_read " "TZ MPC regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 3501 "trace/trace-hw_misc.h"
        } else {
#line 139 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_mpc_reg_read " "TZ MPC regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 3505 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_reg_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_tz_mpc_reg_read(offset, data, size);
    }
}

#define TRACE_TZ_MPC_REG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_REG_WRITE) || \
    false)

static inline void _nocheck__trace_tz_mpc_reg_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_TZ_MPC_REG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 140 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_reg_write " "TZ MPC regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 3532 "trace/trace-hw_misc.h"
        } else {
#line 140 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_mpc_reg_write " "TZ MPC regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 3536 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_reg_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_tz_mpc_reg_write(offset, data, size);
    }
}

#define TRACE_TZ_MPC_MEM_BLOCKED_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_MEM_BLOCKED_READ) || \
    false)

static inline void _nocheck__trace_tz_mpc_mem_blocked_read(uint64_t addr, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_TZ_MPC_MEM_BLOCKED_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 141 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_mem_blocked_read " "TZ MPC blocked read: offset 0x%" PRIx64 " size %u secure %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size, secure);
#line 3563 "trace/trace-hw_misc.h"
        } else {
#line 141 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_mpc_mem_blocked_read " "TZ MPC blocked read: offset 0x%" PRIx64 " size %u secure %d" "\n", addr, size, secure);
#line 3567 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_mem_blocked_read(uint64_t addr, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_tz_mpc_mem_blocked_read(addr, size, secure);
    }
}

#define TRACE_TZ_MPC_MEM_BLOCKED_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_MEM_BLOCKED_WRITE) || \
    false)

static inline void _nocheck__trace_tz_mpc_mem_blocked_write(uint64_t addr, uint64_t data, unsigned size, bool secure)
{
    if (trace_event_get_state(TRACE_TZ_MPC_MEM_BLOCKED_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 142 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_mem_blocked_write " "TZ MPC blocked write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, data, size, secure);
#line 3594 "trace/trace-hw_misc.h"
        } else {
#line 142 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_mpc_mem_blocked_write " "TZ MPC blocked write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u secure %d" "\n", addr, data, size, secure);
#line 3598 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_mem_blocked_write(uint64_t addr, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_tz_mpc_mem_blocked_write(addr, data, size, secure);
    }
}

#define TRACE_TZ_MPC_TRANSLATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_TRANSLATE) || \
    false)

static inline void _nocheck__trace_tz_mpc_translate(uint64_t addr, int flags, const char * idx, const char * res)
{
    if (trace_event_get_state(TRACE_TZ_MPC_TRANSLATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 143 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_translate " "TZ MPC translate: addr 0x%" PRIx64 " flags 0x%x iommu_idx %s: %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, flags, idx, res);
#line 3625 "trace/trace-hw_misc.h"
        } else {
#line 143 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_mpc_translate " "TZ MPC translate: addr 0x%" PRIx64 " flags 0x%x iommu_idx %s: %s" "\n", addr, flags, idx, res);
#line 3629 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_translate(uint64_t addr, int flags, const char * idx, const char * res)
{
    if (true) {
        _nocheck__trace_tz_mpc_translate(addr, flags, idx, res);
    }
}

#define TRACE_TZ_MPC_IOMMU_NOTIFY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MPC_IOMMU_NOTIFY) || \
    false)

static inline void _nocheck__trace_tz_mpc_iommu_notify(uint64_t addr)
{
    if (trace_event_get_state(TRACE_TZ_MPC_IOMMU_NOTIFY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 144 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_mpc_iommu_notify " "TZ MPC iommu: notifying UNMAP/MAP for 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr);
#line 3656 "trace/trace-hw_misc.h"
        } else {
#line 144 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_mpc_iommu_notify " "TZ MPC iommu: notifying UNMAP/MAP for 0x%" PRIx64 "\n", addr);
#line 3660 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_mpc_iommu_notify(uint64_t addr)
{
    if (true) {
        _nocheck__trace_tz_mpc_iommu_notify(addr);
    }
}

#define TRACE_TZ_MSC_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_RESET) || \
    false)

static inline void _nocheck__trace_tz_msc_reset(void)
{
    if (trace_event_get_state(TRACE_TZ_MSC_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 147 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_reset " "TZ MSC: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3687 "trace/trace-hw_misc.h"
        } else {
#line 147 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_msc_reset " "TZ MSC: reset" "\n");
#line 3691 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_reset(void)
{
    if (true) {
        _nocheck__trace_tz_msc_reset();
    }
}

#define TRACE_TZ_MSC_CFG_NONSEC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_CFG_NONSEC) || \
    false)

static inline void _nocheck__trace_tz_msc_cfg_nonsec(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_CFG_NONSEC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 148 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_cfg_nonsec " "TZ MSC: cfg_nonsec = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 3718 "trace/trace-hw_misc.h"
        } else {
#line 148 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_msc_cfg_nonsec " "TZ MSC: cfg_nonsec = %d" "\n", level);
#line 3722 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_cfg_nonsec(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_cfg_nonsec(level);
    }
}

#define TRACE_TZ_MSC_CFG_SEC_RESP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_CFG_SEC_RESP) || \
    false)

static inline void _nocheck__trace_tz_msc_cfg_sec_resp(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_CFG_SEC_RESP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 149 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_cfg_sec_resp " "TZ MSC: cfg_sec_resp = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 3749 "trace/trace-hw_misc.h"
        } else {
#line 149 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_msc_cfg_sec_resp " "TZ MSC: cfg_sec_resp = %d" "\n", level);
#line 3753 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_cfg_sec_resp(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_cfg_sec_resp(level);
    }
}

#define TRACE_TZ_MSC_IRQ_CLEAR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_IRQ_CLEAR) || \
    false)

static inline void _nocheck__trace_tz_msc_irq_clear(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_IRQ_CLEAR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 150 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_irq_clear " "TZ MSC: int_clear = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 3780 "trace/trace-hw_misc.h"
        } else {
#line 150 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_msc_irq_clear " "TZ MSC: int_clear = %d" "\n", level);
#line 3784 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_irq_clear(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_irq_clear(level);
    }
}

#define TRACE_TZ_MSC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_tz_msc_update_irq(int level)
{
    if (trace_event_get_state(TRACE_TZ_MSC_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 151 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_update_irq " "TZ MSC: setting irq line to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 3811 "trace/trace-hw_misc.h"
        } else {
#line 151 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_msc_update_irq " "TZ MSC: setting irq line to %d" "\n", level);
#line 3815 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_update_irq(int level)
{
    if (true) {
        _nocheck__trace_tz_msc_update_irq(level);
    }
}

#define TRACE_TZ_MSC_ACCESS_BLOCKED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_MSC_ACCESS_BLOCKED) || \
    false)

static inline void _nocheck__trace_tz_msc_access_blocked(uint64_t offset)
{
    if (trace_event_get_state(TRACE_TZ_MSC_ACCESS_BLOCKED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 152 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_msc_access_blocked " "TZ MSC: offset 0x%" PRIx64 " access blocked" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset);
#line 3842 "trace/trace-hw_misc.h"
        } else {
#line 152 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_msc_access_blocked " "TZ MSC: offset 0x%" PRIx64 " access blocked" "\n", offset);
#line 3846 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_msc_access_blocked(uint64_t offset)
{
    if (true) {
        _nocheck__trace_tz_msc_access_blocked(offset);
    }
}

#define TRACE_TZ_PPC_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_RESET) || \
    false)

static inline void _nocheck__trace_tz_ppc_reset(void)
{
    if (trace_event_get_state(TRACE_TZ_PPC_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 155 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_reset " "TZ PPC: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 3873 "trace/trace-hw_misc.h"
        } else {
#line 155 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_ppc_reset " "TZ PPC: reset" "\n");
#line 3877 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_reset(void)
{
    if (true) {
        _nocheck__trace_tz_ppc_reset();
    }
}

#define TRACE_TZ_PPC_CFG_NONSEC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_CFG_NONSEC) || \
    false)

static inline void _nocheck__trace_tz_ppc_cfg_nonsec(int n, int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_CFG_NONSEC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 156 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_cfg_nonsec " "TZ PPC: cfg_nonsec[%d] = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , n, level);
#line 3904 "trace/trace-hw_misc.h"
        } else {
#line 156 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_ppc_cfg_nonsec " "TZ PPC: cfg_nonsec[%d] = %d" "\n", n, level);
#line 3908 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_cfg_nonsec(int n, int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_cfg_nonsec(n, level);
    }
}

#define TRACE_TZ_PPC_CFG_AP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_CFG_AP) || \
    false)

static inline void _nocheck__trace_tz_ppc_cfg_ap(int n, int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_CFG_AP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 157 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_cfg_ap " "TZ PPC: cfg_ap[%d] = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , n, level);
#line 3935 "trace/trace-hw_misc.h"
        } else {
#line 157 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_ppc_cfg_ap " "TZ PPC: cfg_ap[%d] = %d" "\n", n, level);
#line 3939 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_cfg_ap(int n, int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_cfg_ap(n, level);
    }
}

#define TRACE_TZ_PPC_CFG_SEC_RESP_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_CFG_SEC_RESP) || \
    false)

static inline void _nocheck__trace_tz_ppc_cfg_sec_resp(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_CFG_SEC_RESP) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 158 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_cfg_sec_resp " "TZ PPC: cfg_sec_resp = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 3966 "trace/trace-hw_misc.h"
        } else {
#line 158 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_ppc_cfg_sec_resp " "TZ PPC: cfg_sec_resp = %d" "\n", level);
#line 3970 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_cfg_sec_resp(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_cfg_sec_resp(level);
    }
}

#define TRACE_TZ_PPC_IRQ_ENABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_IRQ_ENABLE) || \
    false)

static inline void _nocheck__trace_tz_ppc_irq_enable(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_IRQ_ENABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 159 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_irq_enable " "TZ PPC: int_enable = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 3997 "trace/trace-hw_misc.h"
        } else {
#line 159 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_ppc_irq_enable " "TZ PPC: int_enable = %d" "\n", level);
#line 4001 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_irq_enable(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_irq_enable(level);
    }
}

#define TRACE_TZ_PPC_IRQ_CLEAR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_IRQ_CLEAR) || \
    false)

static inline void _nocheck__trace_tz_ppc_irq_clear(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_IRQ_CLEAR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 160 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_irq_clear " "TZ PPC: int_clear = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 4028 "trace/trace-hw_misc.h"
        } else {
#line 160 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_ppc_irq_clear " "TZ PPC: int_clear = %d" "\n", level);
#line 4032 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_irq_clear(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_irq_clear(level);
    }
}

#define TRACE_TZ_PPC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_UPDATE_IRQ) || \
    false)

static inline void _nocheck__trace_tz_ppc_update_irq(int level)
{
    if (trace_event_get_state(TRACE_TZ_PPC_UPDATE_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 161 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_update_irq " "TZ PPC: setting irq line to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 4059 "trace/trace-hw_misc.h"
        } else {
#line 161 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_ppc_update_irq " "TZ PPC: setting irq line to %d" "\n", level);
#line 4063 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_update_irq(int level)
{
    if (true) {
        _nocheck__trace_tz_ppc_update_irq(level);
    }
}

#define TRACE_TZ_PPC_READ_BLOCKED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_READ_BLOCKED) || \
    false)

static inline void _nocheck__trace_tz_ppc_read_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (trace_event_get_state(TRACE_TZ_PPC_READ_BLOCKED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 162 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_read_blocked " "TZ PPC: port %d offset 0x%" PRIx64 " read (secure %d user %d) blocked" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , n, offset, secure, user);
#line 4090 "trace/trace-hw_misc.h"
        } else {
#line 162 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_ppc_read_blocked " "TZ PPC: port %d offset 0x%" PRIx64 " read (secure %d user %d) blocked" "\n", n, offset, secure, user);
#line 4094 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_read_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (true) {
        _nocheck__trace_tz_ppc_read_blocked(n, offset, secure, user);
    }
}

#define TRACE_TZ_PPC_WRITE_BLOCKED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TZ_PPC_WRITE_BLOCKED) || \
    false)

static inline void _nocheck__trace_tz_ppc_write_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (trace_event_get_state(TRACE_TZ_PPC_WRITE_BLOCKED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 163 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:tz_ppc_write_blocked " "TZ PPC: port %d offset 0x%" PRIx64 " write (secure %d user %d) blocked" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , n, offset, secure, user);
#line 4121 "trace/trace-hw_misc.h"
        } else {
#line 163 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("tz_ppc_write_blocked " "TZ PPC: port %d offset 0x%" PRIx64 " write (secure %d user %d) blocked" "\n", n, offset, secure, user);
#line 4125 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_tz_ppc_write_blocked(int n, uint64_t offset, bool secure, bool user)
{
    if (true) {
        _nocheck__trace_tz_ppc_write_blocked(n, offset, secure, user);
    }
}

#define TRACE_IOTKIT_SECCTL_S_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_S_READ) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_s_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_S_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 166 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_secctl_s_read " "IoTKit SecCtl S regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4152 "trace/trace-hw_misc.h"
        } else {
#line 166 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("iotkit_secctl_s_read " "IoTKit SecCtl S regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4156 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_secctl_s_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_s_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SECCTL_S_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_S_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_s_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_S_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 167 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_secctl_s_write " "IoTKit SecCtl S regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4183 "trace/trace-hw_misc.h"
        } else {
#line 167 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("iotkit_secctl_s_write " "IoTKit SecCtl S regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4187 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_secctl_s_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_s_write(offset, data, size);
    }
}

#define TRACE_IOTKIT_SECCTL_NS_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_NS_READ) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_ns_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_NS_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 168 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_secctl_ns_read " "IoTKit SecCtl NS regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4214 "trace/trace-hw_misc.h"
        } else {
#line 168 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("iotkit_secctl_ns_read " "IoTKit SecCtl NS regs read: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4218 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_secctl_ns_read(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_ns_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SECCTL_NS_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SECCTL_NS_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_secctl_ns_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SECCTL_NS_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 169 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_secctl_ns_write " "IoTKit SecCtl NS regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4245 "trace/trace-hw_misc.h"
        } else {
#line 169 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("iotkit_secctl_ns_write " "IoTKit SecCtl NS regs write: offset 0x%x data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4249 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_secctl_ns_write(uint32_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_secctl_ns_write(offset, data, size);
    }
}

#define TRACE_CCM_ENTRY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_ENTRY) || \
    false)

static inline void _nocheck__trace_ccm_entry(void)
{
    if (trace_event_get_state(TRACE_CCM_ENTRY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 172 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ccm_entry " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 4276 "trace/trace-hw_misc.h"
        } else {
#line 172 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ccm_entry " "" "\n");
#line 4280 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ccm_entry(void)
{
    if (true) {
        _nocheck__trace_ccm_entry();
    }
}

#define TRACE_CCM_FREQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_FREQ) || \
    false)

static inline void _nocheck__trace_ccm_freq(uint32_t freq)
{
    if (trace_event_get_state(TRACE_CCM_FREQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 173 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ccm_freq " "freq = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , freq);
#line 4307 "trace/trace-hw_misc.h"
        } else {
#line 173 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ccm_freq " "freq = %d" "\n", freq);
#line 4311 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ccm_freq(uint32_t freq)
{
    if (true) {
        _nocheck__trace_ccm_freq(freq);
    }
}

#define TRACE_CCM_CLOCK_FREQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_CLOCK_FREQ) || \
    false)

static inline void _nocheck__trace_ccm_clock_freq(uint32_t clock, uint32_t freq)
{
    if (trace_event_get_state(TRACE_CCM_CLOCK_FREQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 174 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ccm_clock_freq " "(Clock = %d) = %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , clock, freq);
#line 4338 "trace/trace-hw_misc.h"
        } else {
#line 174 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ccm_clock_freq " "(Clock = %d) = %d" "\n", clock, freq);
#line 4342 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ccm_clock_freq(uint32_t clock, uint32_t freq)
{
    if (true) {
        _nocheck__trace_ccm_clock_freq(clock, freq);
    }
}

#define TRACE_CCM_READ_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_READ_REG) || \
    false)

static inline void _nocheck__trace_ccm_read_reg(const char * reg_name, uint32_t value)
{
    if (trace_event_get_state(TRACE_CCM_READ_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 175 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ccm_read_reg " "reg[%s] <= 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg_name, value);
#line 4369 "trace/trace-hw_misc.h"
        } else {
#line 175 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ccm_read_reg " "reg[%s] <= 0x%" PRIx32 "\n", reg_name, value);
#line 4373 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ccm_read_reg(const char * reg_name, uint32_t value)
{
    if (true) {
        _nocheck__trace_ccm_read_reg(reg_name, value);
    }
}

#define TRACE_CCM_WRITE_REG_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_CCM_WRITE_REG) || \
    false)

static inline void _nocheck__trace_ccm_write_reg(const char * reg_name, uint32_t value)
{
    if (trace_event_get_state(TRACE_CCM_WRITE_REG) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 176 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:ccm_write_reg " "reg[%s] => 0x%" PRIx32 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg_name, value);
#line 4400 "trace/trace-hw_misc.h"
        } else {
#line 176 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("ccm_write_reg " "reg[%s] => 0x%" PRIx32 "\n", reg_name, value);
#line 4404 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_ccm_write_reg(const char * reg_name, uint32_t value)
{
    if (true) {
        _nocheck__trace_ccm_write_reg(reg_name, value);
    }
}

#define TRACE_IOTKIT_SYSINFO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSINFO_READ) || \
    false)

static inline void _nocheck__trace_iotkit_sysinfo_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSINFO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 179 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_sysinfo_read " "IoTKit SysInfo read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4431 "trace/trace-hw_misc.h"
        } else {
#line 179 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("iotkit_sysinfo_read " "IoTKit SysInfo read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4435 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_sysinfo_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysinfo_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSINFO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSINFO_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_sysinfo_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSINFO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 180 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_sysinfo_write " "IoTKit SysInfo write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4462 "trace/trace-hw_misc.h"
        } else {
#line 180 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("iotkit_sysinfo_write " "IoTKit SysInfo write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4466 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_sysinfo_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysinfo_write(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSCTL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSCTL_READ) || \
    false)

static inline void _nocheck__trace_iotkit_sysctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSCTL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 183 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_sysctl_read " "IoTKit SysCtl read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4493 "trace/trace-hw_misc.h"
        } else {
#line 183 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("iotkit_sysctl_read " "IoTKit SysCtl read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4497 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_sysctl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysctl_read(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSCTL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSCTL_WRITE) || \
    false)

static inline void _nocheck__trace_iotkit_sysctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSCTL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 184 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_sysctl_write " "IoTKit SysCtl write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4524 "trace/trace-hw_misc.h"
        } else {
#line 184 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("iotkit_sysctl_write " "IoTKit SysCtl write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4528 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_sysctl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_iotkit_sysctl_write(offset, data, size);
    }
}

#define TRACE_IOTKIT_SYSCTL_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_IOTKIT_SYSCTL_RESET) || \
    false)

static inline void _nocheck__trace_iotkit_sysctl_reset(void)
{
    if (trace_event_get_state(TRACE_IOTKIT_SYSCTL_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 185 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:iotkit_sysctl_reset " "IoTKit SysCtl: reset" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 4555 "trace/trace-hw_misc.h"
        } else {
#line 185 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("iotkit_sysctl_reset " "IoTKit SysCtl: reset" "\n");
#line 4559 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_iotkit_sysctl_reset(void)
{
    if (true) {
        _nocheck__trace_iotkit_sysctl_reset();
    }
}

#define TRACE_ARMSSE_CPU_PWRCTRL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_CPU_PWRCTRL_READ) || \
    false)

static inline void _nocheck__trace_armsse_cpu_pwrctrl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_CPU_PWRCTRL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 188 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_cpu_pwrctrl_read " "SSE-300 CPU_PWRCTRL read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4586 "trace/trace-hw_misc.h"
        } else {
#line 188 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("armsse_cpu_pwrctrl_read " "SSE-300 CPU_PWRCTRL read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4590 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_cpu_pwrctrl_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_cpu_pwrctrl_read(offset, data, size);
    }
}

#define TRACE_ARMSSE_CPU_PWRCTRL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_CPU_PWRCTRL_WRITE) || \
    false)

static inline void _nocheck__trace_armsse_cpu_pwrctrl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_CPU_PWRCTRL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 189 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_cpu_pwrctrl_write " "SSE-300 CPU_PWRCTRL write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4617 "trace/trace-hw_misc.h"
        } else {
#line 189 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("armsse_cpu_pwrctrl_write " "SSE-300 CPU_PWRCTRL write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4621 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_cpu_pwrctrl_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_cpu_pwrctrl_write(offset, data, size);
    }
}

#define TRACE_ARMSSE_CPUID_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_CPUID_READ) || \
    false)

static inline void _nocheck__trace_armsse_cpuid_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_CPUID_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 192 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_cpuid_read " "SSE-200 CPU_IDENTITY read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4648 "trace/trace-hw_misc.h"
        } else {
#line 192 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("armsse_cpuid_read " "SSE-200 CPU_IDENTITY read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4652 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_cpuid_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_cpuid_read(offset, data, size);
    }
}

#define TRACE_ARMSSE_CPUID_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_CPUID_WRITE) || \
    false)

static inline void _nocheck__trace_armsse_cpuid_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_CPUID_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 193 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_cpuid_write " "SSE-200 CPU_IDENTITY write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4679 "trace/trace-hw_misc.h"
        } else {
#line 193 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("armsse_cpuid_write " "SSE-200 CPU_IDENTITY write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4683 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_cpuid_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_cpuid_write(offset, data, size);
    }
}

#define TRACE_ARMSSE_MHU_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_MHU_READ) || \
    false)

static inline void _nocheck__trace_armsse_mhu_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_MHU_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 196 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_mhu_read " "SSE-200 MHU read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4710 "trace/trace-hw_misc.h"
        } else {
#line 196 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("armsse_mhu_read " "SSE-200 MHU read: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4714 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_mhu_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_mhu_read(offset, data, size);
    }
}

#define TRACE_ARMSSE_MHU_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ARMSSE_MHU_WRITE) || \
    false)

static inline void _nocheck__trace_armsse_mhu_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (trace_event_get_state(TRACE_ARMSSE_MHU_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 197 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:armsse_mhu_write " "SSE-200 MHU write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data, size);
#line 4741 "trace/trace-hw_misc.h"
        } else {
#line 197 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("armsse_mhu_write " "SSE-200 MHU write: offset 0x%" PRIx64 " data 0x%" PRIx64 " size %u" "\n", offset, data, size);
#line 4745 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_armsse_mhu_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_armsse_mhu_write(offset, data, size);
    }
}

#define TRACE_ASPEED_XDMA_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_XDMA_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_xdma_write(uint64_t offset, uint64_t data)
{
    if (trace_event_get_state(TRACE_ASPEED_XDMA_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 200 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_xdma_write " "XDMA write: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, data);
#line 4772 "trace/trace-hw_misc.h"
        } else {
#line 200 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("aspeed_xdma_write " "XDMA write: offset 0x%" PRIx64 " data 0x%" PRIx64 "\n", offset, data);
#line 4776 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_aspeed_xdma_write(uint64_t offset, uint64_t data)
{
    if (true) {
        _nocheck__trace_aspeed_xdma_write(offset, data);
    }
}

#define TRACE_BCM2835_MBOX_PROPERTY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_PROPERTY) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_property(uint32_t tag, uint32_t bufsize, size_t resplen)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_PROPERTY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 203 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_mbox_property " "mbox property tag:0x%08x in_sz:%u out_sz:%zu" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , tag, bufsize, resplen);
#line 4803 "trace/trace-hw_misc.h"
        } else {
#line 203 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("bcm2835_mbox_property " "mbox property tag:0x%08x in_sz:%u out_sz:%zu" "\n", tag, bufsize, resplen);
#line 4807 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_mbox_property(uint32_t tag, uint32_t bufsize, size_t resplen)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_property(tag, bufsize, resplen);
    }
}

#define TRACE_BCM2835_MBOX_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_WRITE) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_write(unsigned int size, uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 206 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_mbox_write " "mbox write sz:%u addr:0x%"PRIx64" data:0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , size, addr, value);
#line 4834 "trace/trace-hw_misc.h"
        } else {
#line 206 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("bcm2835_mbox_write " "mbox write sz:%u addr:0x%"PRIx64" data:0x%"PRIx64 "\n", size, addr, value);
#line 4838 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_mbox_write(unsigned int size, uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_write(size, addr, value);
    }
}

#define TRACE_BCM2835_MBOX_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_READ) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_read(unsigned int size, uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 207 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_mbox_read " "mbox read sz:%u addr:0x%"PRIx64" data:0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , size, addr, value);
#line 4865 "trace/trace-hw_misc.h"
        } else {
#line 207 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("bcm2835_mbox_read " "mbox read sz:%u addr:0x%"PRIx64" data:0x%"PRIx64 "\n", size, addr, value);
#line 4869 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_mbox_read(unsigned int size, uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_read(size, addr, value);
    }
}

#define TRACE_BCM2835_MBOX_IRQ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_MBOX_IRQ) || \
    false)

static inline void _nocheck__trace_bcm2835_mbox_irq(unsigned level)
{
    if (trace_event_get_state(TRACE_BCM2835_MBOX_IRQ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 208 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_mbox_irq " "mbox irq:ARM level:%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 4896 "trace/trace-hw_misc.h"
        } else {
#line 208 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("bcm2835_mbox_irq " "mbox irq:ARM level:%u" "\n", level);
#line 4900 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_mbox_irq(unsigned level)
{
    if (true) {
        _nocheck__trace_bcm2835_mbox_irq(level);
    }
}

#define TRACE_VIA1_RTC_UPDATE_DATA_OUT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_UPDATE_DATA_OUT) || \
    false)

static inline void _nocheck__trace_via1_rtc_update_data_out(int count, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_UPDATE_DATA_OUT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 211 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_update_data_out " "count=%d value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , count, value);
#line 4927 "trace/trace-hw_misc.h"
        } else {
#line 211 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_update_data_out " "count=%d value=0x%02x" "\n", count, value);
#line 4931 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_update_data_out(int count, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_update_data_out(count, value);
    }
}

#define TRACE_VIA1_RTC_UPDATE_DATA_IN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_UPDATE_DATA_IN) || \
    false)

static inline void _nocheck__trace_via1_rtc_update_data_in(int count, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_UPDATE_DATA_IN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 212 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_update_data_in " "count=%d value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , count, value);
#line 4958 "trace/trace-hw_misc.h"
        } else {
#line 212 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_update_data_in " "count=%d value=0x%02x" "\n", count, value);
#line 4962 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_update_data_in(int count, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_update_data_in(count, value);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_STATUS) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_status(int cmd, int alt, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 213 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_status " "cmd=0x%02x alt=0x%02x value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd, alt, value);
#line 4989 "trace/trace-hw_misc.h"
        } else {
#line 213 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_internal_status " "cmd=0x%02x alt=0x%02x value=0x%02x" "\n", cmd, alt, value);
#line 4993 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_status(int cmd, int alt, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_status(cmd, alt, value);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_CMD) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_cmd(int cmd)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 214 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_cmd " "cmd=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd);
#line 5020 "trace/trace-hw_misc.h"
        } else {
#line 214 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_internal_cmd " "cmd=0x%02x" "\n", cmd);
#line 5024 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_cmd(int cmd)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_cmd(cmd);
    }
}

#define TRACE_VIA1_RTC_CMD_INVALID_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_INVALID) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_invalid(int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_INVALID) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 215 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_invalid " "value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 5051 "trace/trace-hw_misc.h"
        } else {
#line 215 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_invalid " "value=0x%02x" "\n", value);
#line 5055 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_invalid(int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_invalid(value);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_TIME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_TIME) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_time(uint32_t time)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_TIME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 216 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_time " "time=0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , time);
#line 5082 "trace/trace-hw_misc.h"
        } else {
#line 216 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_internal_time " "time=0x%08x" "\n", time);
#line 5086 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_time(uint32_t time)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_time(time);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_SET_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_SET_CMD) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_set_cmd(int cmd)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_SET_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 217 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_set_cmd " "cmd=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd);
#line 5113 "trace/trace-hw_misc.h"
        } else {
#line 217 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_internal_set_cmd " "cmd=0x%02x" "\n", cmd);
#line 5117 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_set_cmd(int cmd)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_set_cmd(cmd);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_ignore_cmd(int cmd)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_IGNORE_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 218 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_ignore_cmd " "cmd=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd);
#line 5144 "trace/trace-hw_misc.h"
        } else {
#line 218 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_internal_ignore_cmd " "cmd=0x%02x" "\n", cmd);
#line 5148 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_ignore_cmd(int cmd)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_ignore_cmd(cmd);
    }
}

#define TRACE_VIA1_RTC_INTERNAL_SET_ALT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_INTERNAL_SET_ALT) || \
    false)

static inline void _nocheck__trace_via1_rtc_internal_set_alt(int alt, int sector, int offset)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_INTERNAL_SET_ALT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 219 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_internal_set_alt " "alt=0x%02x sector=%u offset=%u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , alt, sector, offset);
#line 5175 "trace/trace-hw_misc.h"
        } else {
#line 219 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_internal_set_alt " "alt=0x%02x sector=%u offset=%u" "\n", alt, sector, offset);
#line 5179 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_internal_set_alt(int alt, int sector, int offset)
{
    if (true) {
        _nocheck__trace_via1_rtc_internal_set_alt(alt, sector, offset);
    }
}

#define TRACE_VIA1_RTC_CMD_SECONDS_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_SECONDS_READ) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_seconds_read(int reg, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_SECONDS_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 220 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_seconds_read " "reg=%d value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, value);
#line 5206 "trace/trace-hw_misc.h"
        } else {
#line 220 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_seconds_read " "reg=%d value=0x%02x" "\n", reg, value);
#line 5210 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_seconds_read(int reg, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_seconds_read(reg, value);
    }
}

#define TRACE_VIA1_RTC_CMD_SECONDS_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_SECONDS_WRITE) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_seconds_write(int reg, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_SECONDS_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 221 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_seconds_write " "reg=%d value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reg, value);
#line 5237 "trace/trace-hw_misc.h"
        } else {
#line 221 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_seconds_write " "reg=%d value=0x%02x" "\n", reg, value);
#line 5241 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_seconds_write(int reg, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_seconds_write(reg, value);
    }
}

#define TRACE_VIA1_RTC_CMD_TEST_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_TEST_WRITE) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_test_write(int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_TEST_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 222 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_test_write " "value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 5268 "trace/trace-hw_misc.h"
        } else {
#line 222 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_test_write " "value=0x%02x" "\n", value);
#line 5272 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_test_write(int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_test_write(value);
    }
}

#define TRACE_VIA1_RTC_CMD_WPROTECT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_WPROTECT_WRITE) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_wprotect_write(int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_WPROTECT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 223 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_wprotect_write " "value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , value);
#line 5299 "trace/trace-hw_misc.h"
        } else {
#line 223 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_wprotect_write " "value=0x%02x" "\n", value);
#line 5303 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_wprotect_write(int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_wprotect_write(value);
    }
}

#define TRACE_VIA1_RTC_CMD_PRAM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_PRAM_READ) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_pram_read(int addr, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_PRAM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 224 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_pram_read " "addr=%u value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 5330 "trace/trace-hw_misc.h"
        } else {
#line 224 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_pram_read " "addr=%u value=0x%02x" "\n", addr, value);
#line 5334 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_pram_read(int addr, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_pram_read(addr, value);
    }
}

#define TRACE_VIA1_RTC_CMD_PRAM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_PRAM_WRITE) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_pram_write(int addr, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_PRAM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 225 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_pram_write " "addr=%u value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 5361 "trace/trace-hw_misc.h"
        } else {
#line 225 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_pram_write " "addr=%u value=0x%02x" "\n", addr, value);
#line 5365 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_pram_write(int addr, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_pram_write(addr, value);
    }
}

#define TRACE_VIA1_RTC_CMD_PRAM_SECT_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_PRAM_SECT_READ) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_pram_sect_read(int sector, int offset, int addr, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_PRAM_SECT_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 226 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_pram_sect_read " "sector=%u offset=%u addr=0x%x value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sector, offset, addr, value);
#line 5392 "trace/trace-hw_misc.h"
        } else {
#line 226 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_pram_sect_read " "sector=%u offset=%u addr=0x%x value=0x%02x" "\n", sector, offset, addr, value);
#line 5396 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_pram_sect_read(int sector, int offset, int addr, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_pram_sect_read(sector, offset, addr, value);
    }
}

#define TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE) || \
    false)

static inline void _nocheck__trace_via1_rtc_cmd_pram_sect_write(int sector, int offset, int addr, int value)
{
    if (trace_event_get_state(TRACE_VIA1_RTC_CMD_PRAM_SECT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 227 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_rtc_cmd_pram_sect_write " "sector=%u offset=%u addr=0x%x value=0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , sector, offset, addr, value);
#line 5423 "trace/trace-hw_misc.h"
        } else {
#line 227 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_rtc_cmd_pram_sect_write " "sector=%u offset=%u addr=0x%x value=0x%02x" "\n", sector, offset, addr, value);
#line 5427 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_rtc_cmd_pram_sect_write(int sector, int offset, int addr, int value)
{
    if (true) {
        _nocheck__trace_via1_rtc_cmd_pram_sect_write(sector, offset, addr, value);
    }
}

#define TRACE_VIA1_ADB_SEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_ADB_SEND) || \
    false)

static inline void _nocheck__trace_via1_adb_send(const char * state, uint8_t data, const char * vadbint)
{
    if (trace_event_get_state(TRACE_VIA1_ADB_SEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 228 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_adb_send " "state %s data=0x%02x vADBInt=%s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, data, vadbint);
#line 5454 "trace/trace-hw_misc.h"
        } else {
#line 228 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_adb_send " "state %s data=0x%02x vADBInt=%s" "\n", state, data, vadbint);
#line 5458 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_adb_send(const char * state, uint8_t data, const char * vadbint)
{
    if (true) {
        _nocheck__trace_via1_adb_send(state, data, vadbint);
    }
}

#define TRACE_VIA1_ADB_RECEIVE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_ADB_RECEIVE) || \
    false)

static inline void _nocheck__trace_via1_adb_receive(const char * state, uint8_t data, const char * vadbint, int status, int index, int size)
{
    if (trace_event_get_state(TRACE_VIA1_ADB_RECEIVE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 229 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_adb_receive " "state %s data=0x%02x vADBInt=%s status=0x%x index=%d size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , state, data, vadbint, status, index, size);
#line 5485 "trace/trace-hw_misc.h"
        } else {
#line 229 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_adb_receive " "state %s data=0x%02x vADBInt=%s status=0x%x index=%d size=%d" "\n", state, data, vadbint, status, index, size);
#line 5489 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_adb_receive(const char * state, uint8_t data, const char * vadbint, int status, int index, int size)
{
    if (true) {
        _nocheck__trace_via1_adb_receive(state, data, vadbint, status, index, size);
    }
}

#define TRACE_VIA1_ADB_POLL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_ADB_POLL) || \
    false)

static inline void _nocheck__trace_via1_adb_poll(uint8_t data, const char * vadbint, int status, int index, int size)
{
    if (trace_event_get_state(TRACE_VIA1_ADB_POLL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 230 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_adb_poll " "data=0x%02x vADBInt=%s status=0x%x index=%d size=%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , data, vadbint, status, index, size);
#line 5516 "trace/trace-hw_misc.h"
        } else {
#line 230 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_adb_poll " "data=0x%02x vADBInt=%s status=0x%x index=%d size=%d" "\n", data, vadbint, status, index, size);
#line 5520 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_adb_poll(uint8_t data, const char * vadbint, int status, int index, int size)
{
    if (true) {
        _nocheck__trace_via1_adb_poll(data, vadbint, status, index, size);
    }
}

#define TRACE_VIA1_AUXMODE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIA1_AUXMODE) || \
    false)

static inline void _nocheck__trace_via1_auxmode(int mode)
{
    if (trace_event_get_state(TRACE_VIA1_AUXMODE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 231 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:via1_auxmode " "setting auxmode to %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , mode);
#line 5547 "trace/trace-hw_misc.h"
        } else {
#line 231 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("via1_auxmode " "setting auxmode to %d" "\n", mode);
#line 5551 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_via1_auxmode(int mode)
{
    if (true) {
        _nocheck__trace_via1_auxmode(mode);
    }
}

#define TRACE_GRLIB_AHB_PNP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_AHB_PNP_READ) || \
    false)

static inline void _nocheck__trace_grlib_ahb_pnp_read(uint64_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_GRLIB_AHB_PNP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 234 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_ahb_pnp_read " "AHB PnP read addr:0x%03"PRIx64" data:0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 5578 "trace/trace-hw_misc.h"
        } else {
#line 234 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("grlib_ahb_pnp_read " "AHB PnP read addr:0x%03"PRIx64" data:0x%08x" "\n", addr, value);
#line 5582 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_grlib_ahb_pnp_read(uint64_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_grlib_ahb_pnp_read(addr, value);
    }
}

#define TRACE_GRLIB_APB_PNP_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GRLIB_APB_PNP_READ) || \
    false)

static inline void _nocheck__trace_grlib_apb_pnp_read(uint64_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_GRLIB_APB_PNP_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 235 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:grlib_apb_pnp_read " "APB PnP read addr:0x%03"PRIx64" data:0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 5609 "trace/trace-hw_misc.h"
        } else {
#line 235 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("grlib_apb_pnp_read " "APB PnP read addr:0x%03"PRIx64" data:0x%08x" "\n", addr, value);
#line 5613 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_grlib_apb_pnp_read(uint64_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_grlib_apb_pnp_read(addr, value);
    }
}

#define TRACE_LED_SET_INTENSITY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LED_SET_INTENSITY) || \
    false)

static inline void _nocheck__trace_led_set_intensity(const char * color, const char * desc, uint8_t intensity_percent)
{
    if (trace_event_get_state(TRACE_LED_SET_INTENSITY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 238 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:led_set_intensity " "LED desc:'%s' color:%s intensity: %u%%" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , color, desc, intensity_percent);
#line 5640 "trace/trace-hw_misc.h"
        } else {
#line 238 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("led_set_intensity " "LED desc:'%s' color:%s intensity: %u%%" "\n", color, desc, intensity_percent);
#line 5644 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_led_set_intensity(const char * color, const char * desc, uint8_t intensity_percent)
{
    if (true) {
        _nocheck__trace_led_set_intensity(color, desc, intensity_percent);
    }
}

#define TRACE_LED_CHANGE_INTENSITY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_LED_CHANGE_INTENSITY) || \
    false)

static inline void _nocheck__trace_led_change_intensity(const char * color, const char * desc, uint8_t old_intensity_percent, uint8_t new_intensity_percent)
{
    if (trace_event_get_state(TRACE_LED_CHANGE_INTENSITY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 239 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:led_change_intensity " "LED desc:'%s' color:%s intensity %u%% -> %u%%" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , color, desc, old_intensity_percent, new_intensity_percent);
#line 5671 "trace/trace-hw_misc.h"
        } else {
#line 239 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("led_change_intensity " "LED desc:'%s' color:%s intensity %u%% -> %u%%" "\n", color, desc, old_intensity_percent, new_intensity_percent);
#line 5675 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_led_change_intensity(const char * color, const char * desc, uint8_t old_intensity_percent, uint8_t new_intensity_percent)
{
    if (true) {
        _nocheck__trace_led_change_intensity(color, desc, old_intensity_percent, new_intensity_percent);
    }
}

#define TRACE_PCA955X_GPIO_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PCA955X_GPIO_STATUS) || \
    false)

static inline void _nocheck__trace_pca955x_gpio_status(const char * description, const char * buf)
{
    if (trace_event_get_state(TRACE_PCA955X_GPIO_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 242 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:pca955x_gpio_status " "%s GPIOs 0-15 [%s]" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , description, buf);
#line 5702 "trace/trace-hw_misc.h"
        } else {
#line 242 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("pca955x_gpio_status " "%s GPIOs 0-15 [%s]" "\n", description, buf);
#line 5706 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_pca955x_gpio_status(const char * description, const char * buf)
{
    if (true) {
        _nocheck__trace_pca955x_gpio_status(description, buf);
    }
}

#define TRACE_PCA955X_GPIO_CHANGE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PCA955X_GPIO_CHANGE) || \
    false)

static inline void _nocheck__trace_pca955x_gpio_change(const char * description, unsigned id, unsigned prev_state, unsigned current_state)
{
    if (trace_event_get_state(TRACE_PCA955X_GPIO_CHANGE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 243 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:pca955x_gpio_change " "%s GPIO id:%u status: %u -> %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , description, id, prev_state, current_state);
#line 5733 "trace/trace-hw_misc.h"
        } else {
#line 243 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("pca955x_gpio_change " "%s GPIO id:%u status: %u -> %u" "\n", description, id, prev_state, current_state);
#line 5737 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_pca955x_gpio_change(const char * description, unsigned id, unsigned prev_state, unsigned current_state)
{
    if (true) {
        _nocheck__trace_pca955x_gpio_change(description, id, prev_state, current_state);
    }
}

#define TRACE_BCM2835_CPRMAN_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_CPRMAN_READ) || \
    false)

static inline void _nocheck__trace_bcm2835_cprman_read(uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_CPRMAN_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 246 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_cprman_read " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 5764 "trace/trace-hw_misc.h"
        } else {
#line 246 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("bcm2835_cprman_read " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n", offset, value);
#line 5768 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_cprman_read(uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_cprman_read(offset, value);
    }
}

#define TRACE_BCM2835_CPRMAN_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_CPRMAN_WRITE) || \
    false)

static inline void _nocheck__trace_bcm2835_cprman_write(uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_CPRMAN_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 247 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_cprman_write " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 5795 "trace/trace-hw_misc.h"
        } else {
#line 247 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("bcm2835_cprman_write " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n", offset, value);
#line 5799 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_cprman_write(uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_cprman_write(offset, value);
    }
}

#define TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC) || \
    false)

static inline void _nocheck__trace_bcm2835_cprman_write_invalid_magic(uint64_t offset, uint64_t value)
{
    if (trace_event_get_state(TRACE_BCM2835_CPRMAN_WRITE_INVALID_MAGIC) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 248 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:bcm2835_cprman_write_invalid_magic " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , offset, value);
#line 5826 "trace/trace-hw_misc.h"
        } else {
#line 248 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("bcm2835_cprman_write_invalid_magic " "offset:0x%" PRIx64 " value:0x%" PRIx64 "\n", offset, value);
#line 5830 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_bcm2835_cprman_write_invalid_magic(uint64_t offset, uint64_t value)
{
    if (true) {
        _nocheck__trace_bcm2835_cprman_write_invalid_magic(offset, value);
    }
}

#define TRACE_VIRT_CTRL_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRT_CTRL_READ) || \
    false)

static inline void _nocheck__trace_virt_ctrl_read(void * dev, unsigned int addr, unsigned int size, uint64_t value)
{
    if (trace_event_get_state(TRACE_VIRT_CTRL_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 251 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:virt_ctrl_read " "ctrl: %p reg: 0x%02x size: %d value: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev, addr, size, value);
#line 5857 "trace/trace-hw_misc.h"
        } else {
#line 251 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("virt_ctrl_read " "ctrl: %p reg: 0x%02x size: %d value: 0x%"PRIx64 "\n", dev, addr, size, value);
#line 5861 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_virt_ctrl_read(void * dev, unsigned int addr, unsigned int size, uint64_t value)
{
    if (true) {
        _nocheck__trace_virt_ctrl_read(dev, addr, size, value);
    }
}

#define TRACE_VIRT_CTRL_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRT_CTRL_WRITE) || \
    false)

static inline void _nocheck__trace_virt_ctrl_write(void * dev, unsigned int addr, unsigned int size, uint64_t value)
{
    if (trace_event_get_state(TRACE_VIRT_CTRL_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 252 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:virt_ctrl_write " "ctrl: %p reg: 0x%02x size: %d value: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev, addr, size, value);
#line 5888 "trace/trace-hw_misc.h"
        } else {
#line 252 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("virt_ctrl_write " "ctrl: %p reg: 0x%02x size: %d value: 0x%"PRIx64 "\n", dev, addr, size, value);
#line 5892 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_virt_ctrl_write(void * dev, unsigned int addr, unsigned int size, uint64_t value)
{
    if (true) {
        _nocheck__trace_virt_ctrl_write(dev, addr, size, value);
    }
}

#define TRACE_VIRT_CTRL_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRT_CTRL_RESET) || \
    false)

static inline void _nocheck__trace_virt_ctrl_reset(void * dev)
{
    if (trace_event_get_state(TRACE_VIRT_CTRL_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 253 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:virt_ctrl_reset " "ctrl: %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev);
#line 5919 "trace/trace-hw_misc.h"
        } else {
#line 253 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("virt_ctrl_reset " "ctrl: %p" "\n", dev);
#line 5923 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_virt_ctrl_reset(void * dev)
{
    if (true) {
        _nocheck__trace_virt_ctrl_reset(dev);
    }
}

#define TRACE_VIRT_CTRL_REALIZE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRT_CTRL_REALIZE) || \
    false)

static inline void _nocheck__trace_virt_ctrl_realize(void * dev)
{
    if (trace_event_get_state(TRACE_VIRT_CTRL_REALIZE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 254 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:virt_ctrl_realize " "ctrl: %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev);
#line 5950 "trace/trace-hw_misc.h"
        } else {
#line 254 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("virt_ctrl_realize " "ctrl: %p" "\n", dev);
#line 5954 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_virt_ctrl_realize(void * dev)
{
    if (true) {
        _nocheck__trace_virt_ctrl_realize(dev);
    }
}

#define TRACE_VIRT_CTRL_INSTANCE_INIT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_VIRT_CTRL_INSTANCE_INIT) || \
    false)

static inline void _nocheck__trace_virt_ctrl_instance_init(void * dev)
{
    if (trace_event_get_state(TRACE_VIRT_CTRL_INSTANCE_INIT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 255 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("%d@%zu.%06zu:virt_ctrl_instance_init " "ctrl: %p" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev);
#line 5981 "trace/trace-hw_misc.h"
        } else {
#line 255 "/home/luyaohan1001/Projects/hack_linux_v5.15/buildroot-2022.02.8/output/build/host-qemu-6.2.0/hw/misc/trace-events"
            qemu_log("virt_ctrl_instance_init " "ctrl: %p" "\n", dev);
#line 5985 "trace/trace-hw_misc.h"
        }
    }
}

static inline void trace_virt_ctrl_instance_init(void * dev)
{
    if (true) {
        _nocheck__trace_virt_ctrl_instance_init(dev);
    }
}
#endif /* TRACE_HW_MISC_GENERATED_TRACERS_H */
